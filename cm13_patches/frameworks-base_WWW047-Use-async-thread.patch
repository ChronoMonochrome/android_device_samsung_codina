 Use async thread for performPoll in NetworkStats

The performPoll will be executed in BroadcastReceiver
process. But performPoll may sync the time by NTP.
If the NTP server is not available to access this process
will suspend for 20s (depends on the NTP timeout config).
In this 20s all of the other ordered broadcast will be
delay.

This patch use async thread for performPoll. It will
return the receiver process and won't suspend other
broadcast.

diff --git a/services/core/java/com/android/server/net/NetworkStatsService.java b/services/core/java/com/android/server/net/NetworkStatsService.java
index 8449348..8b34e51 100644
--- a/services/core/java/com/android/server/net/NetworkStatsService.java
+++ b/services/core/java/com/android/server/net/NetworkStatsService.java
@@ -1017,23 +1017,38 @@ private void bootstrapStatsLocked() {
         }
     }
 
-    private void performPoll(int flags) {
-        // try refreshing time source when stale
-        if (mTime.getCacheAge() > mSettings.getTimeCacheMaxAge()) {
-            mTime.forceRefresh();
+    class PerformPollAsyncThread extends Thread {
+        private int mflags;
+        public PerformPollAsyncThread(String name, int flags) {
+            super(name);
+            this.mflags = flags;
         }
+        public void run() {
+            if (mTime.getCacheAge() > mSettings.getTimeCacheMaxAge()) {
+                mTime.forceRefresh();
+            }
 
-        synchronized (mStatsLock) {
-            mWakeLock.acquire();
+            synchronized (mStatsLock) {
+                mWakeLock.acquire();
 
-            try {
-                performPollLocked(flags);
-            } finally {
-                mWakeLock.release();
+                try {
+                    performPollLocked(mflags);
+                } finally {
+                    mWakeLock.release();
+                }
             }
         }
     }
 
+    private void performPoll(int flags) {
+        /**
+         * Use async thread for it since this BroadcastReceiver process may cost 20 second.
+         * That Will delay other ordered BroadcastReceiver process.
+         */
+        PerformPollAsyncThread thr = new PerformPollAsyncThread("PerformPoll Async Thread", flags);
+        thr.start();
+    }
+
     /**
      * Periodic poll operation, reading current statistics and recording into
      * {@link NetworkStatsHistory}.
