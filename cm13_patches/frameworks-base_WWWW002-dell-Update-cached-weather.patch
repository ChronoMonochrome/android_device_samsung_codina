 Revert SystemUI: Update cached weather data when temperature unit changes

Register an observer to keep track of the temperature unit
selected in settings to update the cached data accordingly

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
index 339d469..c3feaf1 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
@@ -76,7 +76,6 @@
 
 import cyanogenmod.app.StatusBarPanelCustomTile;
 import cyanogenmod.providers.CMSettings;
-import cyanogenmod.weather.util.WeatherUtils;
 import org.cyanogenmod.internal.logging.CMMetricsLogger;
 
 /**
@@ -515,12 +516,12 @@
 
     @Override
     public void onWeatherChanged(WeatherController.WeatherInfo info) {
-        if (Double.isNaN(info.temp) || info.condition == null) {
+        if (info.temp == null || info.condition == null) {
             mWeatherLine1.setText(null);
         } else {
             mWeatherLine1.setText(mContext.getString(
                     R.string.status_bar_expanded_header_weather_format,
-                    WeatherUtils.formatTemperature(info.temp, info.tempUnit),
+                    info.temp,
                     info.condition));
         }
         mWeatherLine2.setText(info.city);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherController.java
index 1fa4956..0f71bcc 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherController.java
@@ -25,9 +25,8 @@
         void onWeatherChanged(WeatherInfo temp);
     }
     public static class WeatherInfo {
-        public double temp = Double.NaN;
+        public String temp = null;
         public String city = null;
         public String condition = null;
-        public int tempUnit;
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
index f452b7a..1a798f0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
@@ -21,12 +21,9 @@
 import android.content.Intent;
 import android.database.ContentObserver;
 import android.database.Cursor;
-import android.net.Uri;
 import android.os.Handler;
 import android.util.Log;
-import cyanogenmod.providers.CMSettings;
 import cyanogenmod.providers.WeatherContract;
-import cyanogenmod.weather.CMWeatherManager;
 import cyanogenmod.weather.util.WeatherUtils;
 
 import java.util.ArrayList;
@@ -32,8 +35,6 @@
 import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_CONDITION;
 import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_TEMPERATURE;
 import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_TEMPERATURE_UNIT;
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.TempUnit.CELSIUS;
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.TempUnit.FAHRENHEIT;
 
 public class WeatherControllerImpl implements WeatherController {
 
@@ -39,8 +44,6 @@
     private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
     private WeatherContentObserver mWeatherContentObserver;
     private Handler mHandler;
-    private int mWeatherUnit;
-    private Uri mWeatherTempetarureUri;
 
     public static final ComponentName COMPONENT_WEATHER_FORECAST = new ComponentName(
             "com.cyanogenmod.lockclock", "com.cyanogenmod.lockclock.weather.ForecastActivity");
@@ -61,13 +68,9 @@
                 mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
         mHandler = new Handler();
         mWeatherContentObserver = new WeatherContentObserver(mHandler);
-        mWeatherTempetarureUri
-                = CMSettings.Global.getUriFor(CMSettings.Global.WEATHER_TEMPERATURE_UNIT);
         mContext.getContentResolver().registerContentObserver(
-                WeatherContract.WeatherColumns.CURRENT_WEATHER_URI,true, mWeatherContentObserver);
-        mContext.getContentResolver().registerContentObserver(mWeatherTempetarureUri, true,
-                mWeatherContentObserver);
-        queryWeatherTempUnit();
+                WeatherContract.WeatherColumns.CURRENT_WEATHER_URI,
+                true, mWeatherContentObserver);
         queryWeather();
     }
 
@@ -97,16 +108,7 @@
         } else {
             try {
                 c.moveToFirst();
-                double temp = c.getDouble(0);
-                int reportedUnit = c.getInt(1);
-                if (reportedUnit == CELSIUS && mWeatherUnit == FAHRENHEIT) {
-                    temp = WeatherUtils.celsiusToFahrenheit(temp);
-                } else if (reportedUnit == FAHRENHEIT && mWeatherUnit == CELSIUS) {
-                    temp = WeatherUtils.fahrenheitToCelsius(temp);
-                }
-
-                mCachedInfo.temp = temp;
-                mCachedInfo.tempUnit = mWeatherUnit;
+                mCachedInfo.temp = WeatherUtils.formatTemperature(c.getDouble(0), c.getInt(1));
                 mCachedInfo.city = c.getString(2);
                 mCachedInfo.condition = c.getString(3);
             } finally {
@@ -112,53 +132,18 @@
         }
     }
 
-    private class WeatherContentObserver extends ContentObserver {
+    private final class WeatherContentObserver extends ContentObserver {
 
         public WeatherContentObserver(Handler handler) {
             super(handler);
         }
 
         @Override
-        public void onChange(boolean selfChange, Uri uri) {
-            if (uri != null) {
-                if (uri.compareTo(WeatherContract.WeatherColumns.CURRENT_WEATHER_URI) == 0) {
-                    queryWeather();
-                    fireCallback();
-                } else if (uri.compareTo(mWeatherTempetarureUri) == 0) {
-                    queryWeatherTempUnit();
-                    fixCachedWeatherInfo();
-                    fireCallback();
-                } else {
-                    super.onChange(selfChange, uri);
-                }
-            }
-        }
-
-        @Override
         public void onChange(boolean selfChange) {
-            onChange(selfChange, null);
-        }
-    }
-
-    private void queryWeatherTempUnit() {
-        try {
-            mWeatherUnit = CMSettings.Global.getInt(mContext.getContentResolver(),
-                    CMSettings.Global.WEATHER_TEMPERATURE_UNIT);
-        } catch (CMSettings.CMSettingNotFoundException e) {
-            //CMSettingsProvider should have taken care of setting a default value for this setting
-            //so how is that we ended up here?? We need to set a valid temp unit anyway to keep
-            //this going
-            mWeatherUnit = WeatherContract.WeatherColumns.TempUnit.CELSIUS;
-        }
-    }
-
-    private void fixCachedWeatherInfo() {
-        if (mCachedInfo.tempUnit == CELSIUS && mWeatherUnit == FAHRENHEIT) {
-            mCachedInfo.temp = WeatherUtils.celsiusToFahrenheit(mCachedInfo.temp);
-            mCachedInfo.tempUnit = FAHRENHEIT;
-        } else if (mCachedInfo.tempUnit == FAHRENHEIT && mWeatherUnit == CELSIUS) {
-            mCachedInfo.temp = WeatherUtils.fahrenheitToCelsius(mCachedInfo.temp);
-            mCachedInfo.tempUnit = CELSIUS;
+            super.onChange(selfChange);
+            if (DEBUG) Log.d(TAG, "Received onChange notification");
+            queryWeather();
+            fireCallback();
         }
     }
 }
