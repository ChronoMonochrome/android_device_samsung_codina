 Revert Weather Content Provider [5/5]

Use the Weather Content Provider in the cmsdk to pull the
weather data.

However, SystemUI will rely on LockClock to force weather
updates via the new Weather Service, which in turn will
send a broadcast when new weather data is available.

diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 5e28d08..d45b52b 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -135,6 +135,9 @@
             android:protectionLevel="signature" />
     <uses-permission android:name="com.android.systemui.permission.SELF" />
 
+    <!-- Weather -->
+    <uses-permission android:name="com.cyanogenmod.lockclock.permission.READ_WEATHER" />
+
     <!-- blur surface -->
     <uses-permission android:name="android.permission.ACCESS_SURFACE_FLINGER" />
 
diff --git a/packages/SystemUI/AndroidManifest_cm.xml b/packages/SystemUI/AndroidManifest_cm.xml
index b13ac3b..e269159 100644
--- a/packages/SystemUI/AndroidManifest_cm.xml
+++ b/packages/SystemUI/AndroidManifest_cm.xml
@@ -47,9 +47,6 @@
     <!-- Live lock screen manager -->
     <uses-permission android:name="cyanogenmod.permission.LIVE_LOCK_SCREEN_MANAGER_ACCESS_PRIVATE" />
 
-     <!-- Weather Provider -->
-    <uses-permission android:name="cyanogenmod.permission.READ_WEATHER" />
-
     <application>
         <provider android:name=".cm.SpamMessageProvider"
                   android:permission="android.permission.INTERACT_ACROSS_USERS_FULL"
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
index 288bc7e..f452b7a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/WeatherControllerImpl.java
@@ -16,42 +16,43 @@
 
 package com.android.systemui.statusbar.policy;
 
+import android.content.BroadcastReceiver;
 import android.content.ComponentName;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.database.ContentObserver;
 import android.database.Cursor;
+import android.net.Uri;
 import android.os.Handler;
+import android.provider.Settings;
 import android.util.Log;
-import cyanogenmod.providers.WeatherContract;
-import cyanogenmod.weather.util.WeatherUtils;
 
 import java.util.ArrayList;
-
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_CITY;
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_CONDITION;
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_TEMPERATURE;
-import static cyanogenmod.providers.WeatherContract.WeatherColumns.CURRENT_TEMPERATURE_UNIT;
 
 public class WeatherControllerImpl implements WeatherController {
 
     private static final String TAG = WeatherController.class.getSimpleName();
     private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
-    private WeatherContentObserver mWeatherContentObserver;
-    private Handler mHandler;
 
     public static final ComponentName COMPONENT_WEATHER_FORECAST = new ComponentName(
             "com.cyanogenmod.lockclock", "com.cyanogenmod.lockclock.weather.ForecastActivity");
+    public static final String ACTION_UPDATE_FINISHED
+            = "com.cyanogenmod.lockclock.action.WEATHER_UPDATE_FINISHED";
+    public static final String EXTRA_UPDATE_CANCELLED = "update_cancelled";
     public static final String ACTION_FORCE_WEATHER_UPDATE
             = "com.cyanogenmod.lockclock.action.FORCE_WEATHER_UPDATE";
-    private static final String[] WEATHER_PROJECTION = new String[]{
-            CURRENT_TEMPERATURE,
-            CURRENT_TEMPERATURE_UNIT,
-            CURRENT_CITY,
-            CURRENT_CONDITION
+    public static final Uri CURRENT_WEATHER_URI
+            = Uri.parse("content://com.cyanogenmod.lockclock.weather.provider/weather/current");
+    public static final String[] WEATHER_PROJECTION = new String[]{
+            "temperature",
+            "city",
+            "condition"
     };
 
     private final ArrayList<Callback> mCallbacks = new ArrayList<Callback>();
+    private final Receiver mReceiver = new Receiver();
     private final Context mContext;
 
     private WeatherInfo mCachedInfo = new WeatherInfo();
@@ -60,12 +59,10 @@
     public WeatherControllerImpl(Context context) {
         mContext = context;
                 mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-        mHandler = new Handler();
-        mWeatherContentObserver = new WeatherContentObserver(mHandler);
-        mContext.getContentResolver().registerContentObserver(
-                WeatherContract.WeatherColumns.CURRENT_WEATHER_URI,
-                true, mWeatherContentObserver);
         queryWeather();
+        final IntentFilter filter = new IntentFilter();
+        filter.addAction(ACTION_UPDATE_FINISHED);
+        mContext.registerReceiver(mReceiver, filter);
     }
 
     public void addCallback(Callback callback) {
@@ -85,20 +86,17 @@
     }
 
     private void queryWeather() {
-        Cursor c = mContext.getContentResolver().query(
-                WeatherContract.WeatherColumns.CURRENT_WEATHER_URI, WEATHER_PROJECTION,
+        Cursor c = mContext.getContentResolver().query(CURRENT_WEATHER_URI, WEATHER_PROJECTION,
                 null, null, null);
         if (c == null) {
             if(DEBUG) Log.e(TAG, "cursor was null for temperature, forcing weather update");
-            //LockClock keeps track of the user settings (temp unit, search by geo location/city)
-            //so we delegate the responsibility of handling a weather update to LockClock
             mContext.sendBroadcast(new Intent(ACTION_FORCE_WEATHER_UPDATE));
         } else {
             try {
                 c.moveToFirst();
-                mCachedInfo.temp = WeatherUtils.formatTemperature(c.getDouble(0), c.getInt(1));
-                mCachedInfo.city = c.getString(2);
-                mCachedInfo.condition = c.getString(3);
+                mCachedInfo.temp = c.getString(0);
+                mCachedInfo.city = c.getString(1);
+                mCachedInfo.condition = c.getString(2);
             } finally {
                 c.close();
             }
@@ -108,18 +112,19 @@
         }
     }
 
-    private final class WeatherContentObserver extends ContentObserver {
-
-        public WeatherContentObserver(Handler handler) {
-            super(handler);
-        }
-
+    private final class Receiver extends BroadcastReceiver {
         @Override
-        public void onChange(boolean selfChange) {
-            super.onChange(selfChange);
-            if (DEBUG) Log.d(TAG, "Received onChange notification");
+        public void onReceive(Context context, Intent intent) {
+            if (DEBUG) Log.d(TAG, "onReceive " + intent.getAction());
+            if (intent.hasExtra(EXTRA_UPDATE_CANCELLED)) {
+                if (intent.getBooleanExtra(EXTRA_UPDATE_CANCELLED, false)) {
+                    // no update
+                    return;
+                }
+            }
             queryWeather();
             fireCallback();
         }
     }
+
 }
