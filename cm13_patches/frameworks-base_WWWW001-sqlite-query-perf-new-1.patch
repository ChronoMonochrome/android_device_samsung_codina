From fa2327cc622740abfa815cc6f6a8d8c709246ae1 Mon Sep 17 00:00:00 2001
From: Snild Dolkow <snild.dolkow@sonymobile.com>
Date: Tue, 03 Nov 2015 11:10:43 +0100
Subject: [PATCH] [1/2] sqlite query perf: try to continue native sqlite statements

If we avoid resetting statements, we may be able to continue where we
left off last time. This saves us the work of repeating the whole query
over and over again when we just want to fill sequential windows.

To achieve this, add the SQLiteContinuation class, which holds state
usable by SQLiteConnection. Each statement in the connection's cache
will reference the last continuation, and if an incoming continuation
matches, we will continue the statement where we left off.

When continuing, SQLiteConnection.executeForCursorWindow() now takes
startPos more lightly; if a continuation is possible, actualPos may
be clamped to the current statement position (in addition to the old
behavior of actualPos moving up to make sure that requiredPos fits).

However, leaving statements alive ("busy", in sqlite terms) may cause
some operations to return SQLITE_LOCKED (example: DROP TABLE). So, we
have to add some logic to reset any busy statements whenever a
statement fails with an SQLiteTableLockedException.

Leaving statements alive also keeps sqlite's internal query state,
increasing memory usage. To mitigate this, SQLiteQuery makes a call
to discontinue(), informing the lower layers when the continuation is
no longer active. If the owning connection is taken by another thread
at that point, the discontinuation is queued, and handled when the
connection is returned to the pool.

My benchmark - moveToNext() through a 25000-row result set, with the
window being able to fit around 6700 - improved from 1750ms to 750ms.

Future work:
 * Two queries with identical SQL strings could break continuation for
   each other (fighting for the same PreparedStatement). This could
   perhaps be solved by moving statements out of the cache (to another
   structure) while they're continuable.
 * Consider the continuation's connection id in waitForConnection().

Change-Id: I30fe9a72ef7c08cc5adcf233cca2ae216b97eb86
---

diff --git a/core/java/android/database/sqlite/SQLiteConnection.java b/core/java/android/database/sqlite/SQLiteConnection.java
index a762f59..d7ee0dc 100644
--- a/core/java/android/database/sqlite/SQLiteConnection.java
+++ b/core/java/android/database/sqlite/SQLiteConnection.java
@@ -102,6 +102,10 @@
     private final PreparedStatementCache mPreparedStatementCache;
     private PreparedStatement mPreparedStatementPool;
 
+    // Queue for resetting prepared statements that we've left open for performance reasons but may
+    // no longer need. Protected by mPool.mLock.
+    private final ArrayList<String> mCanceledContinuations = new ArrayList<>();
+
     // The recent operations log.
     private final OperationLog mRecentOperations = new OperationLog();
 
@@ -551,7 +555,15 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    nativeExecute(mConnectionPtr, statement.mStatementPtr);
+                    try {
+                        nativeExecute(mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        nativeExecute(mConnectionPtr, statement.mStatementPtr);
+                    }
                 } finally {
                     detachCancellationSignal(cancellationSignal);
                 }
@@ -594,7 +606,15 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    return nativeExecuteForLong(mConnectionPtr, statement.mStatementPtr);
+                    try {
+                        return nativeExecuteForLong(mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        return nativeExecuteForLong(mConnectionPtr, statement.mStatementPtr);
+                    }
                 } finally {
                     detachCancellationSignal(cancellationSignal);
                 }
@@ -637,7 +657,15 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    return nativeExecuteForString(mConnectionPtr, statement.mStatementPtr);
+                    try {
+                        return nativeExecuteForString(mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        return nativeExecuteForString(mConnectionPtr, statement.mStatementPtr);
+                    }
                 } finally {
                     detachCancellationSignal(cancellationSignal);
                 }
@@ -683,8 +711,18 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    int fd = nativeExecuteForBlobFileDescriptor(
-                            mConnectionPtr, statement.mStatementPtr);
+                    int fd;
+                    try {
+                        fd = nativeExecuteForBlobFileDescriptor(
+                                mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        fd = nativeExecuteForBlobFileDescriptor(
+                                mConnectionPtr, statement.mStatementPtr);
+                    }
                     return fd >= 0 ? ParcelFileDescriptor.adoptFd(fd) : null;
                 } finally {
                     detachCancellationSignal(cancellationSignal);
@@ -730,8 +768,17 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    changedRows = nativeExecuteForChangedRowCount(
-                            mConnectionPtr, statement.mStatementPtr);
+                    try {
+                        changedRows = nativeExecuteForChangedRowCount(
+                                mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        changedRows = nativeExecuteForChangedRowCount(
+                                mConnectionPtr, statement.mStatementPtr);
+                    }
                     return changedRows;
                 } finally {
                     detachCancellationSignal(cancellationSignal);
@@ -778,8 +825,17 @@
                 applyBlockGuardPolicy(statement);
                 attachCancellationSignal(cancellationSignal);
                 try {
-                    return nativeExecuteForLastInsertedRowId(
-                            mConnectionPtr, statement.mStatementPtr);
+                    try {
+                        return nativeExecuteForLastInsertedRowId(
+                                mConnectionPtr, statement.mStatementPtr);
+                    } catch (SQLiteTableLockedException e) {
+                        if (!resetBusyStatements()) {
+                            throw e;
+                        }
+                        // we cleared something; let's retry
+                        return nativeExecuteForLastInsertedRowId(
+                                mConnectionPtr, statement.mStatementPtr);
+                    }
                 } finally {
                     detachCancellationSignal(cancellationSignal);
                 }
@@ -809,8 +865,9 @@
      * @param countAllRows True to count all rows that the query would return
      * regagless of whether they fit in the window.
      * @param cancellationSignal A signal to cancel the operation in progress, or null if none.
-     * @return The number of rows that were counted during query execution.  Might
-     * not be all rows in the result set unless <code>countAllRows</code> is true.
+     * @param cont Continuation cookie: lets us keep statements alive; may speed up future fills.
+     * @return the number of rows that have been seen in this query so far. Might not be all rows
+     *         in the result set unless <code>countAllRows</code> is true.
      *
      * @throws SQLiteException if an error occurs, such as a syntax error
      * or invalid number of bind arguments.
@@ -818,7 +875,7 @@
      */
     public int executeForCursorWindow(String sql, Object[] bindArgs,
             CursorWindow window, int startPos, int requiredPos, boolean countAllRows,
-            CancellationSignal cancellationSignal) {
+            CancellationSignal cancellationSignal, SQLiteContinuation cont) {
         if (sql == null) {
             throw new IllegalArgumentException("sql must not be null.");
         }
@@ -831,29 +888,49 @@
             int actualPos = -1;
             int countedRows = -1;
             int filledRows = -1;
+            int seenRows = -1;
             final int cookie = mRecentOperations.beginOperation("executeForCursorWindow",
                     sql, bindArgs);
             try {
-                final PreparedStatement statement = acquirePreparedStatement(sql);
+                final PreparedStatement statement = acquirePreparedStatement(sql, requiredPos, cont);
+                boolean shouldReset = countAllRows; // might as well, if we're consuming everything
                 try {
                     throwIfStatementForbidden(statement);
-                    bindArguments(statement, bindArgs);
+                    final int statementPos;
+                    if (cont == null || cont.isReset()) {
+                        bindArguments(statement, bindArgs);
+                        statementPos = 0;
+                    } else {
+                        statementPos = cont.mNumSteps - 1; // it takes N steps to get to row N-1
+                        cont.reset(); // done with it; releasePreparedStatement may set it up again
+                    }
                     applyBlockGuardPolicy(statement);
                     attachCancellationSignal(cancellationSignal);
                     try {
+                        // For a continuation, we may be past startPos. Don't worry, it'll be fine.
+                        final int skip = Math.max(0, startPos - statementPos);
+                        final int req = requiredPos - statementPos;
                         final long result = nativeExecuteForCursorWindow(
                                 mConnectionPtr, statement.mStatementPtr, window.mWindowPtr,
-                                startPos, requiredPos, countAllRows);
-                        actualPos = (int)(result >> 32);
+                                skip, req, countAllRows);
+                        actualPos = statementPos + (int)(result >> 32);
                         countedRows = (int)result;
                         filledRows = window.getNumRows();
                         window.setStartPosition(actualPos);
-                        return countedRows;
+                        if (filledRows == countedRows) {
+                            // everything fit in the window; we've exhausted the result set
+                            shouldReset = true;
+                        }
+                        seenRows = statementPos + countedRows;
+                        return seenRows;
                     } finally {
                         detachCancellationSignal(cancellationSignal);
                     }
+                } catch (RuntimeException|Error ex) {
+                    shouldReset = true;
+                    throw ex;
                 } finally {
-                    releasePreparedStatement(statement);
+                    releasePreparedStatement(statement, shouldReset, cont, seenRows);
                 }
             } catch (RuntimeException ex) {
                 mRecentOperations.failOperation(cookie, ex);
@@ -864,7 +941,8 @@
                             + "', startPos=" + startPos
                             + ", actualPos=" + actualPos
                             + ", filledRows=" + filledRows
-                            + ", countedRows=" + countedRows);
+                            + ", countedRows=" + countedRows
+                            + ", seenRows=" + seenRows);
                 }
             }
         } finally {
@@ -872,11 +950,64 @@
         }
     }
 
+    /**
+     * Called from the pool. Must hold the pool's mLock, and this connection must not currently be
+     * acquired by another thread.
+     */
+    void handleCanceledContinuationsLocked() {
+        final int N = mCanceledContinuations.size();
+        for (int i=0; i<N; ++i) {
+            String sql = mCanceledContinuations.get(i);
+            PreparedStatement stmt = mPreparedStatementCache.get(sql);
+            if (stmt != null && stmt.mContinuation != null) {
+                resetAndClear(stmt);
+            }
+        }
+        mCanceledContinuations.clear();
+    }
+
+    /**
+     * Called from the connection pool when a continuation is no longer requested. Will be handled
+     * on the next call to handleCanceledContinuationsLocked(). The SQLiteContinuation instance may
+     * be reused by another connection after this call. Must lock the pool's mLock.
+     */
+    void queueCancelContinuationLocked(SQLiteContinuation cont) {
+        if (!cont.isReset()) {
+            mCanceledContinuations.add(cont.mSql);
+            cont.reset();
+        }
+    }
+
     private PreparedStatement acquirePreparedStatement(String sql) {
+        return acquirePreparedStatement(sql, SQLiteContinuation.RESET, null);
+    }
+
+    private PreparedStatement acquirePreparedStatement(String sql, int requiredPos,
+            SQLiteContinuation cont) {
         PreparedStatement statement = mPreparedStatementCache.get(sql);
         boolean skipCache = false;
         if (statement != null) {
             if (!statement.mInUse) {
+                boolean started  = (statement.mContinuation != null);
+                // was the statement last continued with another cookie?
+                boolean mismatch = (statement.mContinuation != cont);
+                // after taking N steps, we are at row N-1; more means we have to start over
+                boolean behind   = (cont != null && cont.mNumSteps-1 > requiredPos);
+                if (started && (mismatch || behind)) {
+                    if (DEBUG) {
+                        Log.i(TAG, "resetting statement because of " +
+                            (mismatch ? "mismatch" : "behind") + ". " +
+                            "requiredPos=" + requiredPos + ", " +
+                            "numSteps=" + (cont == null ? -1 : cont.mNumSteps) + ", " +
+                            "old continuation=" + statement.mContinuation + ", " +
+                            "new continuation=" + cont);
+                    }
+                    if (cont != null) {
+                        cont.reset();
+                    }
+                    resetAndClear(statement);
+                }
+                statement.mInUse = true;
                 return statement;
             }
             // The statement is already in the cache but is in use (this statement appears
@@ -885,6 +1016,9 @@
             skipCache = true;
         }
 
+        if (cont != null) {
+            cont.reset(); // no cached statement; continuation is not possible
+        }
         final long statementPtr = nativePrepareStatement(mConnectionPtr, sql);
         try {
             final int numParameters = nativeGetParameterCount(mConnectionPtr, statementPtr);
@@ -908,28 +1042,59 @@
     }
 
     private void releasePreparedStatement(PreparedStatement statement) {
-        statement.mInUse = false;
-        if (statement.mInCache) {
-            try {
-                nativeResetStatementAndClearBindings(mConnectionPtr, statement.mStatementPtr);
-            } catch (SQLiteException ex) {
-                // The statement could not be reset due to an error.  Remove it from the cache.
-                // When remove() is called, the cache will invoke its entryRemoved() callback,
-                // which will in turn call finalizePreparedStatement() to finalize and
-                // recycle the statement.
-                if (DEBUG) {
-                    Log.d(TAG, "Could not reset prepared statement due to an exception.  "
-                            + "Removing it from the cache.  SQL: "
-                            + trimSqlForDisplay(statement.mSql), ex);
-                }
+        releasePreparedStatement(statement, true, null, 0);
+    }
 
-                mPreparedStatementCache.remove(statement.mSql);
-            }
-        } else {
+    private void releasePreparedStatement(PreparedStatement statement,
+            boolean alwaysReset, SQLiteContinuation cont, int numSteps) {
+        statement.mInUse = false;
+
+        if (!statement.mInCache) {
             finalizePreparedStatement(statement);
+        } else if (alwaysReset || cont == null) {
+            resetAndClear(statement);
+        } else {
+            // we're keeping the statement alive! Set up the continuation.
+            statement.mContinuation = cont;
+            cont.mNumSteps = numSteps;
+            cont.mConnId = mConnectionId;
+            cont.mSql = statement.mSql;
         }
     }
 
+    private void resetAndClear(PreparedStatement statement) {
+        try {
+            // Depending on where we're calling from, statement.mContinuation may already
+            // be reused; we can't read or write its members. But we can disconnect it.
+            statement.mContinuation = null;
+            nativeResetStatementAndClearBindings(mConnectionPtr, statement.mStatementPtr);
+        } catch (SQLiteException ex) {
+            // The statement could not be reset due to an error.  Remove it from the cache.
+            // When remove() is called, the cache will invoke its entryRemoved() callback,
+            // which will in turn call finalizePreparedStatement() to finalize and
+            // recycle the statement.
+            if (DEBUG) {
+                Log.d(TAG, "Could not reset prepared statement due to an exception.  "
+                        + "Removing it from the cache.  SQL: "
+                        + trimSqlForDisplay(statement.mSql), ex);
+            }
+
+            mPreparedStatementCache.remove(statement.mSql);
+            throw ex;
+        }
+    }
+
+    private boolean resetBusyStatements() {
+        Map<String,PreparedStatement> snapshot = mPreparedStatementCache.snapshot();
+        int nreset = 0;
+        for (PreparedStatement stmt : snapshot.values()) {
+            if (!stmt.mInUse && stmt.mContinuation != null) {
+                resetAndClear(stmt);
+                nreset++;
+            }
+        }
+        return (nreset > 0);
+    }
     private void finalizePreparedStatement(PreparedStatement statement) {
         nativeFinalizeStatement(mConnectionPtr, statement.mStatementPtr);
         recyclePreparedStatement(statement);
@@ -1124,7 +1289,7 @@
         // the main database which we have already described.
         CursorWindow window = new CursorWindow("collectDbStats");
         try {
-            executeForCursorWindow("PRAGMA database_list;", null, window, 0, 0, false, null);
+            executeForCursorWindow("PRAGMA database_list;", null, window, 0, 0, false, null, null);
             for (int i = 1; i < window.getNumRows(); i++) {
                 String name = window.getString(i, 1);
                 String path = window.getString(i, 2);
@@ -1198,6 +1363,7 @@
     private void recyclePreparedStatement(PreparedStatement statement) {
         statement.mSql = null;
         statement.mPoolNext = mPreparedStatementPool;
+        statement.mContinuation = null;
         mPreparedStatementPool = statement;
     }
 
@@ -1242,6 +1408,11 @@
         // True if the statement is in the cache.
         public boolean mInCache;
 
+        // Continuation cookie. When not null, this statement is alive ("busy" in sqlite terms).
+        // Note: this attribute is here for reference comparisons only! The cookie may be stale,
+        // having been used with another conn. Cookies are only safe when received from strangers.
+        private SQLiteContinuation mContinuation;
+
         // True if the statement is in use (currently executing).
         // We need this flag because due to the use of custom functions in triggers, it's
         // possible for SQLite calls to be re-entrant.  Consequently we need to prevent
@@ -1288,6 +1459,42 @@
         }
     }
 
+    /**
+     * Continuation cookie that can be used to keep a native sqlite statement alive.
+     * May help speed up reading of large result sets.
+     */
+    static final class SQLiteContinuation {
+        private static final int NO_CONN = -1;
+        private static final int RESET = -1;
+
+        // The number of steps taken in the statement since it was last reset.
+        private int mNumSteps;
+
+        // The id of the last connection used
+        private int mConnId;
+
+        // Used to find the corresponding statement when this continuation is canceled.
+        private String mSql;
+
+        public SQLiteContinuation() {
+            reset();
+        }
+
+        private void reset() {
+            mNumSteps = RESET;
+            mConnId = NO_CONN;
+            mSql = null;
+        }
+
+        public boolean isReset() {
+            return mNumSteps == RESET;
+        }
+
+        public boolean belongsTo(SQLiteConnection conn) {
+            return conn.mConnectionId == mConnId;
+        }
+    }
+
     private static final class OperationLog {
         private static final int MAX_RECENT_OPERATIONS = 20;
         private static final int COOKIE_GENERATION_SHIFT = 8;
diff --git a/core/java/android/database/sqlite/SQLiteConnectionPool.java b/core/java/android/database/sqlite/SQLiteConnectionPool.java
index 3a1714c..2494a0a 100644
--- a/core/java/android/database/sqlite/SQLiteConnectionPool.java
+++ b/core/java/android/database/sqlite/SQLiteConnectionPool.java
@@ -18,6 +18,7 @@
 
 import dalvik.system.CloseGuard;
 
+import android.database.sqlite.SQLiteConnection.SQLiteContinuation;
 import android.database.sqlite.SQLiteDebug.DbStats;
 import android.os.CancellationSignal;
 import android.os.OperationCanceledException;
@@ -325,6 +326,47 @@
         }
     }
 
+    void discontinue(SQLiteContinuation cont, SQLiteConnection heldConnection) {
+        if (cont.isReset()) {
+            return; // no need to even try.
+        }
+        synchronized (mLock) {
+            // if the caller already holds the correct connection, we're happy
+            if (discontinueLocked(cont, heldConnection, true)) {
+                return;
+            }
+            // okay, try all the other ones...
+            if (discontinueLocked(cont, mAvailablePrimaryConnection, true)) {
+                return;
+            }
+            final int N = mAvailableNonPrimaryConnections.size();
+            for (int i=0; i<N; ++i) {
+                if (discontinueLocked(cont, mAvailableNonPrimaryConnections.get(i), true)) {
+                    return;
+                }
+            }
+            for (SQLiteConnection acquiredConnection : mAcquiredConnections.keySet()) {
+                if (discontinueLocked(cont, acquiredConnection, false)) {
+                    return;
+                }
+            }
+            // Oh. Guess the connection was closed. All this work for nothing. That's fine.
+        }
+    }
+
+    private boolean discontinueLocked(SQLiteContinuation cont, SQLiteConnection conn, boolean ours) {
+        if (conn != null && cont.belongsTo(conn)) {
+            conn.queueCancelContinuationLocked(cont);
+            if (ours) {
+                // If the caller owns the connection, or it was available, we can handle it
+                // immediately. Otherwise, it'll be handled when the connection is released.
+                conn.handleCanceledContinuationsLocked();
+            }
+            return true;
+        }
+        return false;
+    }
+
     /**
      * Acquires a connection from the pool.
      * <p>
@@ -344,8 +386,8 @@
      * @throws OperationCanceledException if the operation was canceled.
      */
     public SQLiteConnection acquireConnection(String sql, int connectionFlags,
-            CancellationSignal cancellationSignal) {
-        return waitForConnection(sql, connectionFlags, cancellationSignal);
+            CancellationSignal cancellationSignal, SQLiteContinuation cont) {
+        return waitForConnection(sql, connectionFlags, cancellationSignal, cont);
     }
 
     /**
@@ -368,6 +410,7 @@
                         + "because the specified connection was not acquired "
                         + "from this pool or has already been released.");
             }
+            connection.handleCanceledContinuationsLocked(); // other threads may have queued stuff
 
             if (!mIsOpen) {
                 closeConnectionAndLogExceptionsLocked(connection);
@@ -589,7 +632,7 @@
 
     // Might throw.
     private SQLiteConnection waitForConnection(String sql, int connectionFlags,
-            CancellationSignal cancellationSignal) {
+            CancellationSignal cancellationSignal, SQLiteContinuation cont) {
         final boolean wantPrimaryConnection =
                 (connectionFlags & CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY) != 0;
 
@@ -613,6 +656,7 @@
                 connection = tryAcquirePrimaryConnectionLocked(connectionFlags); // might throw
             }
             if (connection != null) {
+                checkContinuationLocked(connection, cont);
                 return connection;
             }
 
@@ -681,6 +725,7 @@
                     if (connection != null || ex != null) {
                         recycleConnectionWaiterLocked(waiter);
                         if (connection != null) {
+                            checkContinuationLocked(connection, cont);
                             return connection;
                         }
                         throw ex; // rethrow!
@@ -704,6 +749,20 @@
         }
     }
 
+    void checkContinuation(SQLiteConnection conn, SQLiteContinuation cont) {
+        if (cont != null) {
+            synchronized (mLock) {
+                checkContinuationLocked(conn, cont);
+            }
+        }
+    }
+
+    private void checkContinuationLocked(SQLiteConnection conn, SQLiteContinuation cont) {
+        if (cont != null && !cont.belongsTo(conn)) {
+            conn.queueCancelContinuationLocked(cont);
+        }
+    }
+
     // Can't throw.
     private void cancelConnectionWaiterLocked(ConnectionWaiter waiter) {
         if (waiter.mAssignedConnection != null || waiter.mException != null) {
diff --git a/core/java/android/database/sqlite/SQLiteCursor.java b/core/java/android/database/sqlite/SQLiteCursor.java
index 2dc5ca4..0818485 100644
--- a/core/java/android/database/sqlite/SQLiteCursor.java
+++ b/core/java/android/database/sqlite/SQLiteCursor.java
@@ -137,6 +137,7 @@
     private void fillWindow(int requiredPos) {
         clearOrCreateWindow(getDatabase().getPath());
 
+        requiredPos = Math.max(0, requiredPos);
         try {
             if (mCount == NO_COUNT) {
                 int startPos = DatabaseUtils.cursorPickFillWindowStartPosition(requiredPos, 0);
@@ -197,6 +198,7 @@
     @Override
     public void deactivate() {
         super.deactivate();
+        mQuery.deactivate();
         mDriver.cursorDeactivated();
     }
 
@@ -226,6 +228,7 @@
             mPos = -1;
             mCount = NO_COUNT;
 
+            mQuery.onRequery();
             mDriver.cursorRequeried(this);
         }
 
diff --git a/core/java/android/database/sqlite/SQLiteQuery.java b/core/java/android/database/sqlite/SQLiteQuery.java
index 62bcc20..9903a96 100644
--- a/core/java/android/database/sqlite/SQLiteQuery.java
+++ b/core/java/android/database/sqlite/SQLiteQuery.java
@@ -17,6 +17,7 @@
 package android.database.sqlite;
 
 import android.database.CursorWindow;
+import android.database.sqlite.SQLiteConnection.SQLiteContinuation;
 import android.os.CancellationSignal;
 import android.os.OperationCanceledException;
 import android.util.Log;
@@ -32,6 +33,7 @@
     private static final String TAG = "SQLiteQuery";
 
     private final CancellationSignal mCancellationSignal;
+    private final SQLiteContinuation mContinuation = new SQLiteContinuation();
 
     SQLiteQuery(SQLiteDatabase db, String query, CancellationSignal cancellationSignal) {
         super(db, query, null, cancellationSignal);
@@ -59,10 +61,10 @@
         try {
             window.acquireReference();
             try {
-                int numRows = getSession().executeForCursorWindow(getSql(), getBindArgs(),
+                int nfound = getSession().executeForCursorWindow(getSql(), getBindArgs(),
                         window, startPos, requiredPos, countAllRows, getConnectionFlags(),
-                        mCancellationSignal);
-                return numRows;
+                        mCancellationSignal, mContinuation);
+                return nfound;
             } catch (SQLiteDatabaseCorruptException ex) {
                 onCorruption();
                 throw ex;
@@ -77,6 +79,20 @@
         }
     }
 
+    void onRequery() {
+        getSession().discontinue(mContinuation);
+    }
+
+    void deactivate() {
+        getSession().discontinue(mContinuation);
+    }
+
+    @Override
+    public void close() {
+        getSession().discontinue(mContinuation);
+        super.close();
+    }
+
     @Override
     public String toString() {
         return "SQLiteQuery: " + getSql();
diff --git a/core/java/android/database/sqlite/SQLiteSession.java b/core/java/android/database/sqlite/SQLiteSession.java
index d80ab1f..14b621d 100644
--- a/core/java/android/database/sqlite/SQLiteSession.java
+++ b/core/java/android/database/sqlite/SQLiteSession.java
@@ -18,6 +18,7 @@
 
 import android.database.CursorWindow;
 import android.database.DatabaseUtils;
+import android.database.sqlite.SQLiteConnection.SQLiteContinuation;
 import android.os.CancellationSignal;
 import android.os.OperationCanceledException;
 import android.os.ParcelFileDescriptor;
@@ -809,8 +810,9 @@
      * @param connectionFlags The connection flags to use if a connection must be
      * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
      * @param cancellationSignal A signal to cancel the operation in progress, or null if none.
-     * @return The number of rows that were counted during query execution.  Might
-     * not be all rows in the result set unless <code>countAllRows</code> is true.
+     * @param cont Continuation cookie: lets us keep statements alive; may speed up future fills.
+     * @return the number of rows that have been seen in this query so far. May not be all rows in
+     *         the result set unless <code>countAllRows</code> is true.
      *
      * @throws SQLiteException if an error occurs, such as a syntax error
      * or invalid number of bind arguments.
@@ -818,7 +820,7 @@
      */
     public int executeForCursorWindow(String sql, Object[] bindArgs,
             CursorWindow window, int startPos, int requiredPos, boolean countAllRows,
-            int connectionFlags, CancellationSignal cancellationSignal) {
+            int connectionFlags, CancellationSignal cancellationSignal, SQLiteContinuation cont) {
         if (sql == null) {
             throw new IllegalArgumentException("sql must not be null.");
         }
@@ -831,14 +833,18 @@
             return 0;
         }
 
-        acquireConnection(sql, connectionFlags, cancellationSignal); // might throw
+        acquireConnection(sql, connectionFlags, cancellationSignal, cont); // might throw
         try {
             return mConnection.executeForCursorWindow(sql, bindArgs,
                     window, startPos, requiredPos, countAllRows,
-                    cancellationSignal); // might throw
+                    cancellationSignal, cont); // might throw
         } finally {
             releaseConnection(); // might throw
         }
+    }
+
+    void discontinue(SQLiteContinuation cont) {
+        mConnectionPool.discontinue(cont, mConnection);
     }
 
     /**
@@ -889,11 +895,19 @@
 
     private void acquireConnection(String sql, int connectionFlags,
             CancellationSignal cancellationSignal) {
+        acquireConnection(sql, connectionFlags, cancellationSignal, null);
+    }
+
+    private void acquireConnection(String sql, int connectionFlags,
+            CancellationSignal cancellationSignal, SQLiteContinuation cont) {
         if (mConnection == null) {
             assert mConnectionUseCount == 0;
             mConnection = mConnectionPool.acquireConnection(sql, connectionFlags,
-                    cancellationSignal); // might throw
+                    cancellationSignal, cont); // might throw
             mConnectionFlags = connectionFlags;
+        } else if (cont != null) {
+            // this is normally done in pool.acquireConnection(), but since we didn't call it...
+            mConnectionPool.checkContinuation(mConnection, cont);
         }
         mConnectionUseCount += 1;
     }
diff --git a/core/jni/android_database_SQLiteConnection.cpp b/core/jni/android_database_SQLiteConnection.cpp
index bcc3bb0..a16ea01 100644
--- a/core/jni/android_database_SQLiteConnection.cpp
+++ b/core/jni/android_database_SQLiteConnection.cpp
@@ -692,8 +692,15 @@
     int addedRows = 0;
     bool windowFull = false;
     bool gotException = false;
+    bool first = true;
     while (!gotException && (!windowFull || countAllRows)) {
-        int err = sqlite3_step(statement);
+        int err;
+        if (first && sqlite3_stmt_busy(statement)) {
+            err = SQLITE_ROW; // this one didn't fit in the window last time
+        } else {
+            err = sqlite3_step(statement);
+        }
+        first = false;
         if (err == SQLITE_ROW) {
             LOG_WINDOW("Stepped statement %p to row %d", statement, totalRows);
             retryCount = 0;
@@ -744,11 +751,6 @@
             gotException = true;
         }
     }
-
-    LOG_WINDOW("Resetting statement %p after fetching %d rows and adding %d rows"
-            "to the window in %d bytes",
-            statement, totalRows, addedRows, window->size() - window->freeSpace());
-    sqlite3_reset(statement);
 
     // Report the total number of rows on request.
     if (startPos > totalRows) {
