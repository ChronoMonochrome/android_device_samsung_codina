 Fix ApplicationsState.Session memory leak in settings app

Removes the creation of an unused session and some other redundant
code left behind when c5291b8 was applied.

diff --git a/src/com/android/settings/applications/AdvancedAppSettings.java b/src/com/android/settings/applications/AdvancedAppSettings.java
index 0005526..00ec127 100644
--- a/src/com/android/settings/applications/AdvancedAppSettings.java
+++ b/src/com/android/settings/applications/AdvancedAppSettings.java
@@ -29,14 +29,10 @@
 import com.android.settings.SettingsPreferenceFragment;
 import com.android.settings.applications.PermissionsSummaryHelper.PermissionsResultCallback;
 import com.android.settings.fuelgauge.PowerWhitelistBackend;
-import com.android.settingslib.applications.ApplicationsState;
-import com.android.settingslib.applications.ApplicationsState.AppEntry;
-import com.android.settingslib.applications.ApplicationsState.Session;
 
 import java.util.ArrayList;
 
-public class AdvancedAppSettings extends SettingsPreferenceFragment implements
-        ApplicationsState.Callbacks {
+public class AdvancedAppSettings extends SettingsPreferenceFragment {
 
     static final String TAG = "AdvancedAppSettings";
 
@@ -46,7 +42,6 @@
     private static final String KEY_SYSTEM_ALERT_WINDOW = "system_alert_window";
     private static final String KEY_WRITE_SETTINGS_APPS = "write_settings_apps";
 
-    private Session mSession;
     private Preference mAppPermsPreference;
     private Preference mAppDomainURLsPreference;
     private Preference mHighPowerPreference;
@@ -63,10 +58,6 @@ public void onCreate(Bundle icicle) {
         Preference permissions = getPreferenceScreen().findPreference(KEY_APP_PERM);
         permissions.setIntent(new Intent(Intent.ACTION_MANAGE_PERMISSIONS));
 
-        ApplicationsState applicationsState = ApplicationsState.getInstance(
-                getActivity().getApplication());
-        mSession = applicationsState.newSession(this);
-
         mAppPermsPreference = findPreference(KEY_APP_PERM);
         mAppDomainURLsPreference = findPreference(KEY_APP_DOMAIN_URLS);
         mHighPowerPreference = findPreference(KEY_HIGH_POWER_APPS);
@@ -79,46 +70,6 @@ protected int getMetricsCategory() {
         return MetricsLogger.APPLICATIONS_ADVANCED;
     }
 
-    @Override
-    public void onRunningStateChanged(boolean running) {
-        // No-op.
-    }
-
-    @Override
-    public void onPackageListChanged() {
-        // No-op.
-    }
-
-    @Override
-    public void onRebuildComplete(ArrayList<AppEntry> apps) {
-        // No-op.
-    }
-
-    @Override
-    public void onPackageIconChanged() {
-        // No-op.
-    }
-
-    @Override
-    public void onPackageSizeChanged(String packageName) {
-        // No-op.
-    }
-
-    @Override
-    public void onAllSizesComputed() {
-        // No-op.
-    }
-
-    @Override
-    public void onLauncherInfoChanged() {
-        // No-op.
-    }
-
-    @Override
-    public void onLoadEntriesCompleted() {
-        // No-op.
-    }
-
     private final PermissionsResultCallback mPermissionCallback = new PermissionsResultCallback() {
         @Override
         public void onPermissionSummaryResult(int[] counts, CharSequence[] groupLabels) {
