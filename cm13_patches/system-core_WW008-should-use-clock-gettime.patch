 SystemClock: elapsedRealtimeNano() should use clock_gettime() on Linux

We've removed the Android alarm driver from our supported kernels.
clock_gettime(CLOCK_BOOTTIME) has been a viable option since 2.6.39, so
there's no need for the legacy code path anymore.

We can use this on Linux hosts too, since no one should be building
Android on hosts with kernels that old.

diff --git a/libutils/SystemClock.cpp b/libutils/SystemClock.cpp
index c5ae327..965e32c 100644
--- a/libutils/SystemClock.cpp
+++ b/libutils/SystemClock.cpp
@@ -19,19 +19,14 @@
  * System clock functions.
  */
 
-#ifdef HAVE_ANDROID_OS
-#include <linux/ioctl.h>
-#include <linux/rtc.h>
-#include <utils/Atomic.h>
-#include <linux/android_alarm.h>
-#endif
-
 #include <sys/time.h>
 #include <limits.h>
 #include <fcntl.h>
 #include <errno.h>
 #include <string.h>
+#include <errno.h>
 
+#include <cutils/compiler.h>
 #include <utils/SystemClock.h>
 #include <utils/Timers.h>
 
@@ -111,71 +106,16 @@ static inline void checkTimeStamps(int64_t timestamp,
  */
 int64_t elapsedRealtimeNano()
 {
-#ifdef HAVE_ANDROID_OS
+#if defined(__linux__)
     struct timespec ts;
-    int result;
-    int64_t timestamp;
-#if DEBUG_TIMESTAMP
-    static volatile int64_t prevTimestamp;
-    static volatile int prevMethod;
-#endif
-
-    static int s_fd = -1;
-
-    if (clock_method < 0) {
-        pthread_mutex_lock(&clock_lock);
+    int err = clock_gettime(CLOCK_BOOTTIME, &ts);
+    if (CC_UNLIKELY(err)) {
+        // This should never happen, but just in case ...
+        ALOGE("clock_gettime(CLOCK_BOOTTIME) failed: %s", strerror(errno));
+        return 0;
     }
 
-    if (clock_method < 0 || clock_method == METHOD_IOCTL) {
-        if (s_fd == -1) {
-            int fd = open("/dev/alarm", O_RDONLY);
-            if (android_atomic_cmpxchg(-1, fd, &s_fd)) {
-                close(fd);
-            }
-        }
-
-        if (s_fd > -1) {
-            result = ioctl(s_fd,
-                    ANDROID_ALARM_GET_TIME(ANDROID_ALARM_ELAPSED_REALTIME), &ts);
-
-            if (result == 0) {
-                timestamp = seconds_to_nanoseconds(ts.tv_sec) + ts.tv_nsec;
-                checkTimeStamps(timestamp, &prevTimestamp, &prevMethod, METHOD_IOCTL);
-                if (clock_method < 0) {
-                    clock_method = METHOD_IOCTL;
-                    pthread_mutex_unlock(&clock_lock);
-                }
-                return timestamp;
-            }
-        }
-    }
-
-    // /dev/alarm doesn't exist, fallback to CLOCK_BOOTTIME
-    if (clock_method < 0 || clock_method == METHOD_CLOCK_GETTIME) {
-        result = clock_gettime(CLOCK_BOOTTIME, &ts);
-        if (result == 0) {
-            timestamp = seconds_to_nanoseconds(ts.tv_sec) + ts.tv_nsec;
-            checkTimeStamps(timestamp, &prevTimestamp, &prevMethod,
-                            METHOD_CLOCK_GETTIME);
-            if (clock_method < 0) {
-                clock_method = METHOD_CLOCK_GETTIME;
-                pthread_mutex_unlock(&clock_lock);
-            }
-            return timestamp;
-        }
-    }
-
-    // XXX: there was an error, probably because the driver didn't
-    // exist ... this should return
-    // a real error, like an exception!
-    timestamp = systemTime(SYSTEM_TIME_MONOTONIC);
-    checkTimeStamps(timestamp, &prevTimestamp, &prevMethod,
-                    METHOD_SYSTEMTIME);
-    if (clock_method < 0) {
-        clock_method = METHOD_SYSTEMTIME;
-        pthread_mutex_unlock(&clock_lock);
-    }
-    return timestamp;
+    return seconds_to_nanoseconds(ts.tv_sec) + ts.tv_nsec;
 #else
     return systemTime(SYSTEM_TIME_MONOTONIC);
 #endif
