diff --git a/services/core/java/com/android/server/policy/WindowOrientationListener.java b/services/core/java/com/android/server/policy/WindowOrientationListener.java
index 0108a5a..116f6bb 100644
--- a/services/core/java/com/android/server/policy/WindowOrientationListener.java
+++ b/services/core/java/com/android/server/policy/WindowOrientationListener.java
@@ -241,6 +241,8 @@ public void dump(PrintWriter pw, String prefix) {
     }
 
     abstract class OrientationJudge implements SensorEventListener {
+        protected long mTouchEndedTimestampNanos = Long.MIN_VALUE;
+
         // Number of nanoseconds per millisecond.
         protected static final long NANOS_PER_MS = 1000000;
 
@@ -299,6 +301,11 @@ public void dump(PrintWriter pw, String prefix) {
 
         @Override
         public abstract void onSensorChanged(SensorEvent event);
+
+       public boolean touchEnded() {
+            final long now = SystemClock.elapsedRealtimeNanos(); // must compare with RTC and not with event.timestamp, event.timestamp can be skewed after sleep as it doesn't include sleep time on some platforms
+            return (now > mTouchEndedTimestampNanos + PROPOSAL_MIN_TIME_SINCE_TOUCH_END_NANOS); 
+        }
     }
 
     /**
@@ -501,7 +508,6 @@ public void dump(PrintWriter pw, String prefix) {
         private boolean mAccelerating;
 
         // Timestamp when the last touch to the touch screen ended
-        private long mTouchEndedTimestampNanos = Long.MIN_VALUE;
         private boolean mTouched;
 
         // Whether we are locked into an overhead usage mode.
@@ -889,8 +895,7 @@ private boolean isPredictedRotationAcceptableLocked(long now) {
             }
 
             // The last touch must have ended sufficiently long ago.
-            if (mTouched || now < mTouchEndedTimestampNanos
-                    + PROPOSAL_MIN_TIME_SINCE_TOUCH_END_NANOS) {
+            if (mTouched || !touchEnded()) {
                 return false;
             }
 
@@ -970,7 +975,6 @@ private float remainingMS(long now, long until) {
 
     final class OrientationSensorJudge extends OrientationJudge {
         private boolean mTouching;
-        private long mTouchEndedTimestampNanos = Long.MIN_VALUE;
         private int mProposedRotation = -1;
         private int mDesiredRotation = -1;
         private boolean mRotationEvaluationScheduled;
@@ -1046,13 +1050,7 @@ public int evaluateRotationChangeLocked() {
         }
 
         private boolean isDesiredRotationAcceptableLocked(long now) {
-            if (mTouching) {
-                return false;
-            }
-            if (now < mTouchEndedTimestampNanos + PROPOSAL_MIN_TIME_SINCE_TOUCH_END_NANOS) {
-                return false;
-            }
-            return true;
+            return (!mTouching && touchEnded());
         }
 
         private void scheduleRotationEvaluationIfNecessaryLocked(long now) {
