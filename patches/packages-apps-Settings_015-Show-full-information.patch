Subject: [PATCH] Show full /proc/version information
Subject: [PATCH] Full /proc/version information: show by default without tap

diff --git a/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java b/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
index 5afed9c83e..a101a2fc7b 100644
--- a/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
+++ b/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
@@ -15,8 +15,14 @@
  */
 package com.android.settings.deviceinfo;
 
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+
 import android.content.Context;
 import android.support.v7.preference.Preference;
+import android.text.TextUtils;
+import android.util.Log;
 
 import com.android.settings.core.PreferenceControllerMixin;
 import com.android.settingslib.DeviceInfoUtils;
@@ -26,6 +32,8 @@
         PreferenceControllerMixin {
 
     private static final String KEY_KERNEL_VERSION = "kernel_version";
+    private static final String FILENAME_PROC_VERSION = "/proc/version";
+    private static final String LOG_TAG = "KernelVersionPreferenceController";
 
     public KernelVersionPreferenceController(Context context) {
         super(context);
@@ -46,4 +54,40 @@ public void updateState(Preference preference) {
     public String getPreferenceKey() {
         return KEY_KERNEL_VERSION;
     }
+
+    @Override
+    public boolean handlePreferenceTreeClick(Preference preference) {
+        if (!TextUtils.equals(preference.getKey(), KEY_KERNEL_VERSION)) {
+            return false;
+        }
+        preference.setSummary(getFullKernelVersion());
+        return false;
+    }
+
+    private String getFullKernelVersion() {
+        String procVersionStr;
+        try {
+            procVersionStr = readLine(FILENAME_PROC_VERSION);
+            return procVersionStr;
+        } catch (IOException e) {
+            Log.e(LOG_TAG,
+            "IO Exception when getting kernel version for Device Info screen", e);
+            return "Unavailable";
+        }
+    }
+
+    /**
+     * Reads a line from the specified file.
+     * @param filename the file to read from
+     * @return the first line, if any.
+     * @throws IOException if the file couldn't be read
+     */
+    private static String readLine(String filename) throws IOException {
+        BufferedReader reader = new BufferedReader(new FileReader(filename), 256);
+        try {
+            return reader.readLine();
+        } finally {
+            reader.close();
+        }
+    }
 }
diff --git a/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java b/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
index a101a2fc7b..e41353674a 100644
--- a/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
+++ b/src/com/android/settings/deviceinfo/KernelVersionPreferenceController.java
@@ -47,7 +47,7 @@ public boolean isAvailable() {
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-        preference.setSummary(DeviceInfoUtils.getFormattedKernelVersion());
+        preference.setSummary(getFullKernelVersion());
     }
 
     @Override
@@ -55,24 +55,13 @@ public String getPreferenceKey() {
         return KEY_KERNEL_VERSION;
     }
 
-    @Override
-    public boolean handlePreferenceTreeClick(Preference preference) {
-        if (!TextUtils.equals(preference.getKey(), KEY_KERNEL_VERSION)) {
-            return false;
-        }
-        preference.setSummary(getFullKernelVersion());
-        return false;
-    }
-
     private String getFullKernelVersion() {
-        String procVersionStr;
         try {
-            procVersionStr = readLine(FILENAME_PROC_VERSION);
-            return procVersionStr;
+            return readLine(FILENAME_PROC_VERSION);
         } catch (IOException e) {
             Log.e(LOG_TAG,
             "IO Exception when getting kernel version for Device Info screen", e);
-            return "Unavailable";
+            return DeviceInfoUtils.getFormattedKernelVersion();
         }
     }
 
