From 9dafbc5264b75cdbcecd8bd50d4e752e43eb9a07 Mon Sep 17 00:00:00 2001
From: Lucas Crowthers <lucasc@codeaurora.org>
Date: Wed, 6 Nov 2013 15:01:25 -0500
Subject: [PATCH 11/29] SkDraw::drawRect  optimization

New class in SkDeviceLooper.cpp falls in in the critical code path of
SkDraw::drawRect().  This new class SkDeviceLooper does nothing except
for bound checking. It copies the modified rect bounds into new pointer
variables and returns them back "if needed". The additional overhead of
creating an object of SkDeviceLooper class and calling member functions
reduces performance.  This patch creates a pre-check condition and if
it succeeds we know for sure SkDeviceLooper won't change the rect
bounds. Under this condition, we avoid using the SkDeviceLooper class.

Change-Id: I11fa13ace8d50d52069e1780a14874e4c34133f2
Signed-off-by: Chet Kener <Cl3Kener@gmail.com>
---
 src/core/SkDraw.cpp | 115 ++++++++++++++++++++++++++++++++++------------------
 1 file changed, 76 insertions(+), 39 deletions(-)

diff --git a/src/core/SkDraw.cpp b/src/core/SkDraw.cpp
index b77eb43..6285e7a 100644
--- a/src/core/SkDraw.cpp
+++ b/src/core/SkDraw.cpp
@@ -822,45 +822,82 @@ void SkDraw::drawRect(const SkRect& rect, const SkPaint& paint) const {
         return;
     }
 
-    SkDeviceLooper looper(*fBitmap, *fRC, ir, paint.isAntiAlias());
-    while (looper.next()) {
-        SkRect localDevRect;
-        looper.mapRect(&localDevRect, devRect);
-        SkMatrix localMatrix;
-        looper.mapMatrix(&localMatrix, matrix);
-
-        SkAutoBlitterChoose blitterStorage(looper.getBitmap(), localMatrix,
-                                           paint);
-        const SkRasterClip& clip = looper.getRC();
-        SkBlitter*          blitter = blitterStorage.get();
-
-        // we want to "fill" if we are kFill or kStrokeAndFill, since in the latter
-        // case we are also hairline (if we've gotten to here), which devolves to
-        // effectively just kFill
-        switch (rtype) {
-            case kFill_RectType:
-                if (paint.isAntiAlias()) {
-                    SkScan::AntiFillRect(localDevRect, clip, blitter);
-                } else {
-                    SkScan::FillRect(localDevRect, clip, blitter);
-                }
-                break;
-            case kStroke_RectType:
-                if (paint.isAntiAlias()) {
-                    SkScan::AntiFrameRect(localDevRect, strokeSize, clip, blitter);
-                } else {
-                    SkScan::FrameRect(localDevRect, strokeSize, clip, blitter);
-                }
-                break;
-            case kHair_RectType:
-                if (paint.isAntiAlias()) {
-                    SkScan::AntiHairRect(localDevRect, clip, blitter);
-                } else {
-                    SkScan::HairRect(localDevRect, clip, blitter);
-                }
-                break;
-            default:
-                SkDEBUGFAIL("bad rtype");
+    //Based on enum Delta defined in SkDeviceLooper class
+    int delta = (paint.isAntiAlias() ? 4096 : 16384);
+    if( SkLikely(ir.right() < delta && ir.bottom() < delta)){
+         //Refer to SkDeviceLooper::SkDeviceLooper constructor.
+         //On success, fState=kSimple_State so no change in rect bounds and use of SkDeviceLooper class
+         //Same is true for fState=kDone_State. This conidtional check is not implemented now.
+         SkAutoBlitterChoose blitterStorage(*fBitmap, matrix, paint);
+         const SkRasterClip& clip = *fRC;
+         SkBlitter*          blitter = blitterStorage.get();
+
+         switch (rtype) {
+           case kFill_RectType:
+               if (paint.isAntiAlias()) {
+                   SkScan::AntiFillRect(devRect, clip, blitter);
+               } else {
+                   SkScan::FillRect(devRect, clip, blitter);
+               }
+               break;
+           case kStroke_RectType:
+               if (paint.isAntiAlias()) {
+                   SkScan::AntiFrameRect(devRect, strokeSize, clip, blitter);
+               } else {
+                   SkScan::FrameRect(devRect, strokeSize, clip, blitter);
+               }
+               break;
+           case kHair_RectType:
+               if (paint.isAntiAlias()) {
+                   SkScan::AntiHairRect(devRect, clip, blitter);
+               } else {
+                   SkScan::HairRect(devRect, clip, blitter);
+               }
+               break;
+           default:
+               SkDEBUGFAIL("bad rtype");
+         }
+    }else{
+        SkDeviceLooper looper(*fBitmap, *fRC, ir, paint.isAntiAlias());
+        while (looper.next()) {
+            SkRect localDevRect;
+            looper.mapRect(&localDevRect, devRect);
+            SkMatrix localMatrix;
+            looper.mapMatrix(&localMatrix, matrix);
+
+            SkAutoBlitterChoose blitterStorage(looper.getBitmap(), localMatrix,
+                                               paint);
+            const SkRasterClip& clip = looper.getRC();
+            SkBlitter*          blitter = blitterStorage.get();
+
+            // we want to "fill" if we are kFill or kStrokeAndFill, since in the latter
+            // case we are also hairline (if we've gotten to here), which devolves to
+            // effectively just kFill
+            switch (rtype) {
+                case kFill_RectType:
+                    if (paint.isAntiAlias()) {
+                        SkScan::AntiFillRect(localDevRect, clip, blitter);
+                    } else {
+                        SkScan::FillRect(localDevRect, clip, blitter);
+                    }
+                    break;
+                case kStroke_RectType:
+                    if (paint.isAntiAlias()) {
+                        SkScan::AntiFrameRect(localDevRect, strokeSize, clip, blitter);
+                    } else {
+                        SkScan::FrameRect(localDevRect, strokeSize, clip, blitter);
+                    }
+                    break;
+                case kHair_RectType:
+                    if (paint.isAntiAlias()) {
+                        SkScan::AntiHairRect(localDevRect, clip, blitter);
+                    } else {
+                        SkScan::HairRect(localDevRect, clip, blitter);
+                    }
+                    break;
+                default:
+                    SkDEBUGFAIL("bad rtype");
+            }
         }
     }
 }
-- 
2.5.0

