From f08c73259b7464700fed4fd181ace18d3b3f29a0 Mon Sep 17 00:00:00 2001
From: Maxime Poulain <maxime.poulain@student.uclouvain.be>
Date: Tue, 31 Mar 2015 12:23:20 +0200
Subject: [PATCH 28/29] skia:fix compilation error when
 fsingle-precision-constant is enabled

---
 src/pathops/SkDCubicIntersection.cpp | 16 ++++++++--------
 src/pathops/SkDQuadIntersection.cpp  |  8 ++++----
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/pathops/SkDCubicIntersection.cpp b/src/pathops/SkDCubicIntersection.cpp
index 9d83242..ee174b6 100644
--- a/src/pathops/SkDCubicIntersection.cpp
+++ b/src/pathops/SkDCubicIntersection.cpp
@@ -144,8 +144,8 @@ static void intersect(const SkDCubic& cubic1, double t1s, double t1e, const SkDC
                     double c1Top = tIdx == tCount - 1 ? 1 :
                             (t1Start + (t1 - t1Start) * locals[0][tIdx + 1] + to1) / 2;
                     double c1Max = SkTMin(c1Top, to1 + offset);
-                    double c2Min = SkTMax(0., to2 - offset);
-                    double c2Max = SkTMin(1., to2 + offset);
+                    double c2Min = SkTMax((double)0., to2 - offset);
+                    double c2Max = SkTMin((double)1., to2 + offset);
                 #if ONE_OFF_DEBUG
                     SkDebugf("%.*s %s 1 contains1=%d/%d contains2=%d/%d\n", i.depth()*2, tab,
                             __FUNCTION__,
@@ -171,8 +171,8 @@ static void intersect(const SkDCubic& cubic1, double t1s, double t1e, const SkDC
                             i.used(), i.used() > 0 ? i[0][i.used() - 1] : -1);
                 #endif
                     if (tCount > 1) {
-                        c1Min = SkTMax(0., to1 - offset);
-                        c1Max = SkTMin(1., to1 + offset);
+                        c1Min = SkTMax((double)0., to1 - offset);
+                        c1Max = SkTMin((double)1., to1 + offset);
                         double c2Bottom = tIdx == 0 ? to2 :
                                 (t2Start + (t2 - t2Start) * locals[1][tIdx - 1] + to2) / 2;
                         double c2Top = tIdx == tCount - 1 ? to2 :
@@ -392,15 +392,15 @@ void SkIntersections::cubicNearEnd(const SkDCubic& cubic1, bool start, const SkD
         while (tLast + 1 < tVals.count() && roughly_equal(tVals[tLast + 1], tVals[tIdx])) {
             ++tLast;
         }
-        double tMin2 = SkTMax(tVals[tIdx] - LINE_FRACTION, 0.0);
-        double tMax2 = SkTMin(tVals[tLast] + LINE_FRACTION, 1.0);
+        double tMin2 = SkTMax(tVals[tIdx] - LINE_FRACTION, (double)0.0);
+        double tMax2 = SkTMin(tVals[tLast] + LINE_FRACTION, (double)1.0);
         int lastUsed = used();
         if (start ? tMax1 < tMin2 : tMax2 < tMin1) {
             ::intersect(cubic1, tMin1, tMax1, cubic2, tMin2, tMax2, 1, *this);
         }
         if (lastUsed == used()) {
-            tMin2 = SkTMax(tVals[tIdx] - (1.0 / SkDCubic::gPrecisionUnit), 0.0);
-            tMax2 = SkTMin(tVals[tLast] + (1.0 / SkDCubic::gPrecisionUnit), 1.0);
+            tMin2 = SkTMax(tVals[tIdx] - ((double)1.0 / SkDCubic::gPrecisionUnit), (double)0.0);
+            tMax2 = SkTMin(tVals[tLast] + ((double)1.0 / SkDCubic::gPrecisionUnit), (double)1.0);
             if (start ? tMax1 < tMin2 : tMax2 < tMin1) {
                 ::intersect(cubic1, tMin1, tMax1, cubic2, tMin2, tMax2, 1, *this);
             }
diff --git a/src/pathops/SkDQuadIntersection.cpp b/src/pathops/SkDQuadIntersection.cpp
index 5a8bafc..21a7a58 100644
--- a/src/pathops/SkDQuadIntersection.cpp
+++ b/src/pathops/SkDQuadIntersection.cpp
@@ -307,10 +307,10 @@ static bool binary_search(const SkDQuad& quad1, const SkDQuad& quad2, double* t1
     #endif
             return true;
         }
-        if (calcMask & (1 << 0)) t1[0] = quad1.ptAtT(SkTMax(0., *t1Seed - tStep));
-        if (calcMask & (1 << 2)) t1[2] = quad1.ptAtT(SkTMin(1., *t1Seed + tStep));
-        if (calcMask & (1 << 3)) t2[0] = quad2.ptAtT(SkTMax(0., *t2Seed - tStep));
-        if (calcMask & (1 << 5)) t2[2] = quad2.ptAtT(SkTMin(1., *t2Seed + tStep));
+        if (calcMask & (1 << 0)) t1[0] = quad1.ptAtT(SkTMax((double)0., *t1Seed - tStep));
+        if (calcMask & (1 << 2)) t1[2] = quad1.ptAtT(SkTMin((double)1., *t1Seed + tStep));
+        if (calcMask & (1 << 3)) t2[0] = quad2.ptAtT(SkTMax((double)0., *t2Seed - tStep));
+        if (calcMask & (1 << 5)) t2[2] = quad2.ptAtT(SkTMin((double)1., *t2Seed + tStep));
         double dist[3][3];
         // OPTIMIZE: using calcMask value permits skipping some distance calcuations
         //   if prior loop's results are moved to correct slot for reuse
-- 
2.5.0

