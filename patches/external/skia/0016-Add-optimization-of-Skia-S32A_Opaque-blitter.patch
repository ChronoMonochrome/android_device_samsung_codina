From 3a2d218daccfdc5c3b1eee038a4a65d6176bb0c8 Mon Sep 17 00:00:00 2001
From: Henrik Smiding <henrik.smiding@stericsson.com>
Date: Sat, 11 Aug 2012 23:08:19 +0200
Subject: [PATCH 16/29] Add optimization of Skia S32A_Opaque blitter

Adds optimization of Skia S32A_Opaque_BlitRow32 blitter using ARM NEON
instruction set. Special cases for when alpha is zero or opaque.
Improves performance platform wide.

Change-Id: I0ffeb23b128e61cfe581ad121f227631d2918686
Signed-off-by: Henrik Smiding <henrik.smiding@stericsson.com>
Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
Signed-off-by: Chet Kener <Cl3Kener@gmail.com>
---
 Android.mk                            |   5 +
 src/opts/S32A_Opaque_BlitRow32_neon.S | 242 ++++++++++++++++++++++++++++++++++
 src/opts/SkBlitRow_opts_arm.cpp       |  10 ++
 3 files changed, 257 insertions(+)
 create mode 100644 src/opts/S32A_Opaque_BlitRow32_neon.S

diff --git a/Android.mk b/Android.mk
index d6910ed..f7af81f 100644
--- a/Android.mk
+++ b/Android.mk
@@ -602,6 +602,7 @@ LOCAL_SRC_FILES_arm += \
 
 ifeq ($(ARCH_ARM_HAVE_NEON), true)
 LOCAL_SRC_FILES_arm += \
+	src/opts/S32A_Opaque_BlitRow32_neon.S \
 	src/opts/memset16_neon.S \
 	src/opts/memset32_neon.S \
 	src/opts/SkBitmapProcState_arm_neon.cpp \
@@ -618,6 +619,10 @@ LOCAL_CFLAGS_arm += \
 
 endif
 
+# Enable Neon assembler optimized version of S32A_Opaque_BlitRow32.
+# Overrides the intrinsic blitter below.
+LOCAL_CFLAGS += -DENABLE_OPTIMIZED_S32A_BLITTERS
+
 LOCAL_CFLAGS_x86 += \
 	-msse2 \
 	-mfpmath=sse
diff --git a/src/opts/S32A_Opaque_BlitRow32_neon.S b/src/opts/S32A_Opaque_BlitRow32_neon.S
new file mode 100644
index 0000000..28ff4b1
--- /dev/null
+++ b/src/opts/S32A_Opaque_BlitRow32_neon.S
@@ -0,0 +1,242 @@
+/*
+ * Copyright (C) ST-Ericsson SA 2012
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ *
+ * Neon optimized version of S32A_Opaque_BlitRow32.
+ * Special cases for when alpha is zero or opaque.
+ */
+
+#if defined(__ARM_HAVE_NEON) && defined(ENABLE_OPTIMIZED_S32A_BLITTERS)
+
+    .text
+    .fpu    neon
+    .align
+
+    .global S32A_Opaque_BlitRow32_neon
+    .func   S32A_Opaque_BlitRow32_neon
+
+S32A_Opaque_BlitRow32_neon:
+    stmdb         sp!, {r4-r6}
+    cmp           r2, #7                         // The main loop requires at least 8 pixels
+    ble           .LBlitSmall
+    /* Setup constants */
+    vld4.8        {d0-d3}, [r1]!                 // Load eight source RGBA pixels
+    vmov.i16      q15, #256                      // Set up alpha constant
+    pld           [r1, #0]                       // Pre-load next eight source pixels
+    subs          r2, r2, #24                    // Decrement loop counter
+    mov           r3, r0                         // Backup destination pointer
+    bmi           .LPostLoop                     // Do we have enough pixels to enter the main loop?
+    pld           [r1, #32]                      // Pre-load next next eight source pixels
+    /* Main loop, blitting 16 pixels per iteration */
+.LLoop:
+    vmov          r4, r5, d3                     // Move alpha to ARM for test
+    pld           [r1, #64]                      // Pre-load next eight source pixels
+    and           r6, r4, r5                     // Check if source alpha is opaque
+    cmp           r6, #0xFFFFFFFF                //
+    bne           .LNotOpaque1                   // If not opaque, skip code
+    vld4.8        {d20-d23}, [r1]!               // Pre-load next eight source RGBA pixels
+    vst4.8        {d0-d3}, [r3]!                 // Since it is opaque, just write result to memory
+    add           r0, r0, #32                    // Advance destination pointer
+    b             .LGoBack1                      // Skip to next eight pixels
+.LNotOpaque1:
+    orrs          r4, r5                         // Check if source alpha is fully transparent
+    beq           .LAllZero1                     // If so, jump to special case handling
+
+    vld4.8        {d4-d7}, [r0]!                 // Pre-load next eight destination RGBA pixels
+    vsubw.u8      q14, q15, d3                   // Calculate inverse alpha (scale)
+    vmovl.u8      q8, d4                         // Expand destination red to 16-bit
+    vmovl.u8      q9, d5                         // Expand destination green to 16-bit
+    vmovl.u8      q2, d6                         // Expand destination blue to 16-bit
+    vmovl.u8      q3, d7                         // Expand destination alpha to 16-bit
+    vmul.i16      q8, q8, q14                    // Scale red
+    vmul.i16      q9, q9, q14                    // Scale green
+    vld4.8        {d20-d23}, [r1]!               // Pre-load next eight source RGBA pixels
+    vmul.i16      q3, q3, q14                    // Scale alpha
+    vmul.i16      q2, q2, q14                    // Scale blue
+    vshrn.i16     d7, q3, #8                     // Shift and narrow alpha
+    vshrn.i16     d6, q2, #8                     // Shift and narrow blue
+    vshrn.i16     d5, q9, #8                     // Shift and narrow green
+    vshrn.i16     d4, q8, #8                     // Shift and narrow red
+    vadd.i8       q3, q1                         // Add source to results
+    vadd.i8       q2, q0                         // Add source to results
+    vst4.8        {d4-d7}, [r3]!                 // Write result to memory
+.LGoBack1:
+    vmov          r4, r5, d23                    // Move alpha to ARM for test
+    pld           [r1, #64]                      // Pre-load next eight source pixels
+    and           r6, r4, r5                     // Check if source alpha is opaque
+    cmp           r6, #0xFFFFFFFF                //
+    bne           .LNotOpaque2                   // If not opaque, skip code
+    vld4.8        {d0-d3}, [r1]!                 // Pre-load next eight source RGBA pixels
+    vst4.8        {d20-d23}, [r3]!               // Since it is opaque, just write result to memory
+    subs          r2, r2, #16                    // Decrement loop counter
+    add           r0, r0, #32                    // Advance destination pointer
+    bpl           .LLoop                         // Loop here, instead of jumping to GoBack2
+    b             .LPostLoop
+.LNotOpaque2:
+    orrs          r4, r5                         // Check if source alpha is fully transparent
+    beq           .LAllZero2                     // If so, jump to special case handling
+
+    vld4.8        {d24-d27}, [r0]!               // Pre-load next eight destination RGBA pixels
+    vsubw.u8      q14, q15, d23                  // Calculate inverse alpha (scale)
+    vmovl.u8      q8, d24                        // Expand destination red to 16-bit
+    vmovl.u8      q9, d25                        // Expand destination green to 16-bit
+    vmovl.u8      q12, d26                       // Expand destination blue to 16-bit
+    vmovl.u8      q13, d27                       // Expand destination alpha to 16-bit
+    vmul.i16      q8, q8, q14                    // Scale red
+    vmul.i16      q9, q9, q14                    // Scale green
+    vld4.8        {d0-d3}, [r1]!                 // Pre-load next eight source RGBA pixels
+    vmul.i16      q13, q13, q14                  // Scale alpha
+    vmul.i16      q12, q12, q14                  // Scale blue
+    vshrn.i16     d27, q13, #8                   // Shift and narrow alpha
+    vshrn.i16     d26, q12, #8                   // Shift and narrow blue
+    vshrn.i16     d25, q9, #8                    // Shift and narrow green
+    vshrn.i16     d24, q8, #8                    // Shift and narrow red
+    vadd.i8       q13, q11                       // Add source to results
+    vadd.i8       q12, q10                       // Add source to results
+    vst4.8        {d24-d27}, [r3]!               // Write result to memory
+.LGoBack2:
+    subs          r2, r2, #16                    // Decrement loop counter
+    bpl           .LLoop
+.LPostLoop:
+    adds          r2, r2, #16
+    bmi           .LRemaining
+.LLoopRemaining:
+    vmov          r4, r5, d3                     // Move alpha to ARM for test
+    and           r6, r4, r5                     // Check if source alpha is opaque
+    cmp           r6, #0xFFFFFFFF                //
+    bne           .LNotOpaque3                   // If not opaque, skip code
+    vst4.8        {d0-d3}, [r3]!                 // Since it is opaque, just write result to memory
+    add           r0, r0, #32                    // Advance destination pointer
+    subs          r2, r2, #8                     // Decrement loop counter
+    bmi           .LRemaining
+    vld4.8        {d0-d3}, [r1]!                 // Load eight source RGBA pixels
+    b             .LLoopRemaining
+.LNotOpaque3:
+    orrs          r4, r5                         // Check if source alpha is fully transparent
+    addeq         r3, r3, #32                    // If so, advance destination write pointer
+    addeq         r0, r0, #32                    // ...advance destination read pointer
+    beq           .LGoBack3                      // ...and jump to special case handling
+
+    vld4.8        {d4-d7}, [r0]!                 // Load eight destination RGBA pixels
+    vsubw.u8      q14, q15, d3                   // Calculate inverse alpha (scale)
+    vmovl.u8      q8, d4                         // Expand destination red to 16-bit
+    vmovl.u8      q9, d5                         // Expand destination green to 16-bit
+    vmovl.u8      q2, d6                         // Expand destination blue to 16-bit
+    vmovl.u8      q3, d7                         // Expand destination alpha to 16-bit
+    vmul.i16      q8, q8, q14                    // Scale red
+    vmul.i16      q9, q9, q14                    // Scale green
+    vmul.i16      q3, q3, q14                    // Scale alpha
+    vmul.i16      q2, q2, q14                    // Scale blue
+    vshrn.i16     d7, q3, #8                     // Shift and narrow alpha
+    vshrn.i16     d6, q2, #8                     // Shift and narrow blue
+    vshrn.i16     d5, q9, #8                     // Shift and narrow green
+    vshrn.i16     d4, q8, #8                     // Shift and narrow red
+    vadd.i8       q3, q1                         // Add source to results
+    vadd.i8       q2, q0                         // Add source to results
+    vst4.8        {d4-d7}, [r3]!                 // Write result to memory
+.LGoBack3:
+    subs          r2, r2, #8                     // Decrement loop counter
+    bmi           .LRemaining
+    vld4.8        {d0-d3}, [r1]!                 // Load eight source RGBA pixels
+    b             .LLoopRemaining
+
+.LAllZero1:
+    vld4.8        {d20-d23}, [r1]!               // Pre-load next eight source RGBA pixels
+    add           r3, r3, #32                    // Advance destination write pointer
+    add           r0, r0, #32                    // Advance destination read pointer
+    b             .LGoBack1
+.LAllZero2:
+    vld4.8        {d0-d3}, [r1]!                 // Pre-load next eight source RGBA pixels
+    add           r3, r3, #32                    // Advance destination write pointer
+    subs          r2, r2, #16                    // Decrement loop counter
+    add           r0, r0, #32                    // Advance destination read pointer
+    bpl           .LLoop
+    b             .LPostLoop
+
+/* Handle small blits, 0-8 pixels */
+.LRemaining:
+    adds          r2, r2, #8
+    ldmeq         sp!, {r4-r6}
+    bxeq          lr                             // Zero pixels left
+    adr           r3, .LAlphaIndex
+    ldr           r6, =0x00FFFFFF                // Set up transparency check constant
+    cmp           r2, #1                         // Exit if count is zero
+    vld1.8        {d29}, [r3]                    // Set up alpha index table
+    bhi           .LBlit2
+    b             .LBlit1
+.LBlitSmall:
+    pld           [r1, #0]                       // Pre-load eight source pixels
+    adr           r3, .LAlphaIndex
+    ldr           r6, =0x00FFFFFF                // Set up transparency check constant
+    vld1.8        {d29}, [r3]                    // Set up alpha index table
+    cmp           r2, #1                         // Exit if count is zero
+    vmov.i16      q15, #256                      // Set up alpha constant
+    beq           .LBlit1
+    ldmlt         sp!, {r4-r6}
+    bxlt          lr                             // Zero pixels left
+    /* loop for neon 2-pixel code */
+.LBlit2:
+    ldmia         r1!, {r4, r5}                  // Load two source RGBA pixels
+    sub           r2, r2, #2                     // Decrement loop counter
+    and           r3, r4, r5                     // Check if source alpha is opaque
+    cmp           r3, #0xFF000000                //
+    blo           .LNotOpaque4                   // If not opaque, skip code
+    stmia         r0!, {r4, r5}                  // Store two source RGBA pixels
+    cmp           r2, #1                         // Check count
+    bhi           .LBlit2                        // Still two or more pixels left
+    ldmlt         sp!, {r4-r6}
+    bxlt          lr                             // Zero pixels left
+    b             .LBlit1
+.LNotOpaque4:
+    orr           r3, r4, r5                     // Check if source alpha is fully transparent
+    cmp           r3, r6                         //
+    addls         r0, r0, #8                     // If so, advance destination read pointer
+    bls           .LGoBack4                      // ...and jump to special case handling
+
+    vmov          d0, r4, r5                     // Move pixel to neon
+    vld1.32       {d1}, [r0]                     // Load two destination RGBA pixels
+    vtbl.8        d2, {d0}, d29                  // Spread out alpha to match pixel format
+    vsubw.u8      q2, q15, d2                    // Calculate inverse alpha (scale)
+    vmovl.u8      q3, d1                         // Expand destination to 16-bit
+    vmul.i16      q3, q3, q2                     // Scale pixels
+    vshrn.i16     d1, q3, #8                     // Shift and narrow result
+    vadd.i8       d0, d1                         // Add alpha to results
+    vst1.32       {d0}, [r0]!                    // Store two RGBA pixels
+.LGoBack4:
+    cmp           r2, #1                         // Check count
+    bhi           .LBlit2                        // Still two or more pixels left
+    ldmlt         sp!, {r4-r6}
+    bxlt          lr                             // Zero pixels left
+	/* code to handle any one last pixel */
+.LBlit1:
+    ldr           r4, [r1]                       // Load one source RGBA pixel
+    cmp           r4, #0xFF000000                // Check if source alpha is opaque
+    strhs         r4, [r0]                       // If so, store one RGBA pixel
+    ldmhs         sp!, {r4-r6}
+    bxhs          lr                             // Zero pixels left
+
+    cmp           r4, r6                         // Check if source alpha is fully transparent
+    ldmls         sp!, {r4-r6}
+    bxls          lr                             // Zero pixels left
+
+    vmov.32       d0[0], r4                      // Move pixel to neon
+    vld1.32       {d1[0]}, [r0]                  // Load one destination RGBA pixel
+    vtbl.8        d2, {d0}, d29                  // Spread out alpha to match pixel format
+    vsubw.u8      q2, q15, d2                    // Calculate inverse alpha (scale)
+    vmovl.u8      q3, d1                         // Expand destination to 16-bit
+    vmul.i16      d6, d6, d4                     // Scale pixel
+    vshrn.i16     d1, q3, #8                     // Shift and narrow result
+    vadd.i8       d0, d1                         // Add alpha to results
+    vst1.32       {d0[0]}, [r0]                  // Store one RGBA pixel
+    ldmia         sp!, {r4-r6}
+    bx            lr
+
+    .endfunc
+
+    .align
+.LAlphaIndex:
+    .byte 3, 3, 3, 3, 7, 7, 7, 7
+
+#endif
diff --git a/src/opts/SkBlitRow_opts_arm.cpp b/src/opts/SkBlitRow_opts_arm.cpp
index 61946eb..6dbfcb2 100644
--- a/src/opts/SkBlitRow_opts_arm.cpp
+++ b/src/opts/SkBlitRow_opts_arm.cpp
@@ -364,6 +364,16 @@ static const SkBlitRow::Proc sk_blitrow_platform_565_procs_arm[] = {
     NULL,   // S32A_D565_Blend_Dither
 };
 
+#if defined(__ARM_HAVE_NEON) && defined(SK_CPU_LENDIAN) && defined(ENABLE_OPTIMIZED_S32A_BLITTERS)
+
+/* External function in file S32A_Opaque_BlitRow32_neon.S */
+			extern "C" void S32A_Opaque_BlitRow32_neon(SkPMColor* SK_RESTRICT dst,
+                                           const SkPMColor* SK_RESTRICT src,
+                                           int count, U8CPU alpha);
+
+#define S32A_Opaque_BlitRow32_PROC  S32A_Opaque_BlitRow32_neon
+#endif
+
 static const SkBlitRow::Proc32 sk_blitrow_platform_32_procs_arm[] = {
     NULL,   // S32_Opaque,
     NULL,   // S32_Blend,
-- 
2.5.0

