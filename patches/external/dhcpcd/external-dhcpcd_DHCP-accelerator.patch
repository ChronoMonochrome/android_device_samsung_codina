diff --git a/arp.c b/arp.c
index 133f100..bb89d10 100644
--- a/arp.c
+++ b/arp.c
@@ -172,11 +172,31 @@ handle_arp_packet(void *arg)
 			return;
 		}
 
-		/* Check for conflict */
-		if (state->offer &&
-		    (reply_s == state->offer->yiaddr ||
-			(reply_s == 0 && reply_t == state->offer->yiaddr)))
-			state->fail.s_addr = state->offer->yiaddr;
+		if (state->offer) {
+			if (state->state == DHS_PROBEGW) {
+				/* Check for successful gateway probe */
+				if (ar.ar_op == htons(ARPOP_REPLY) &&
+				    reply_s == state->offer->giaddr) {
+					ina.s_addr = reply_s;
+					syslog(LOG_INFO,
+					       "%s: gateway %s found at %s",
+					       iface->name, inet_ntoa(ina),
+					       hwaddr_ntoa((unsigned char *)
+							   hw_s,
+							   (size_t)ar.ar_hln));
+					delete_timeout(NULL, iface);
+					bind_interface(iface);
+				}
+				return;
+			} else {
+				/* Check for conflict */
+				if (reply_s == state->offer->yiaddr ||
+				    (reply_s == 0 &&
+				     reply_t == state->offer->yiaddr))
+					state->fail.s_addr =
+						state->offer->yiaddr;
+			}
+		}
 
 		/* Handle IPv4LL conflicts */
 		if (IN_LINKLOCAL(htonl(iface->addr.s_addr)) &&
@@ -252,6 +272,7 @@ send_arp_probe(void *arg)
 	struct in_addr addr;
 	struct timeval tv;
 	int arping = 0;
+	in_addr_t src_addr = 0;
 
 	if (state->arping_index < state->options->arping_len) {
 		addr.s_addr = state->options->arping[state->arping_index];
@@ -261,6 +282,11 @@ send_arp_probe(void *arg)
 			addr.s_addr = state->offer->yiaddr;
 		else
 			addr.s_addr = state->offer->ciaddr;
+		if (state->state == DHS_PROBEGW) {
+			/* ARP for the gateway using our leased IP address */
+			src_addr = addr.s_addr;
+			addr.s_addr = state->offer->giaddr;
+		}
 	} else
 		addr.s_addr = iface->addr.s_addr;
 
@@ -290,6 +316,16 @@ send_arp_probe(void *arg)
 				add_timeout_tv(&tv, send_arp_probe, iface);
 			else
 				add_timeout_tv(&tv, start_interface, iface);
+		} else if (state->state == DHS_PROBEGW) {
+			/* Allow ourselves to fail only once this way */
+			syslog(LOG_ERR, "arpgw: ARP timed out");
+			state->options->options &= ~DHCPCD_ARPGW;
+			errno = ENOENT;
+			handle_arp_failure(iface);
+			return;
+		} else if ((state->options->options & DHCPCD_ARPGW) != 0 &&
+			   start_arpgw(iface) != 0) {
+			return;
 		} else
 			add_timeout_tv(&tv, bind_interface, iface);
 	}
@@ -297,10 +333,52 @@ send_arp_probe(void *arg)
 	    "%s: sending ARP probe (%d of %d), next in %0.2f seconds",
 	    iface->name, state->probes ? state->probes : PROBE_NUM, PROBE_NUM,
 	    timeval_to_double(&tv));
-	if (send_arp(iface, ARPOP_REQUEST, 0, addr.s_addr) == -1)
+	if (send_arp(iface, ARPOP_REQUEST, src_addr, addr.s_addr) == -1)
 		syslog(LOG_ERR, "send_arp: %m");
 }
 
+int
+start_arpself(struct interface *iface)
+{
+	struct if_state *state = iface->state;
+	struct in_addr addr;
+
+	if (iface->addr.s_addr != state->offer->yiaddr) {
+		/* If the interface already has the address configured
+		 * then we can't ARP for duplicate detection. */
+		addr.s_addr = state->offer->yiaddr;
+		if (has_address(iface->name, &addr, NULL) != 1) {
+			state->claims = 0;
+			state->probes = 0;
+			state->conflicts = 0;
+			state->state = DHS_PROBE;
+			send_arp_probe(iface);
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
+int
+start_arpgw(struct interface *iface)
+{
+	struct if_state *state = iface->state;
+	struct in_addr ina;
+
+	if (get_option_addr(&ina, state->offer, DHO_ROUTER))
+		return 0;
+
+	/* Abuse the "giaddr" struct entry to store the first router
+	 * IP address */
+	state->offer->giaddr = ina.s_addr;
+	state->probes = 0;
+	state->state = DHS_PROBEGW;
+	send_arp_probe(iface);
+	return 1;
+}
+
+
 void
 start_arping(struct interface *iface)
 {
diff --git a/dhcp.c b/dhcp.c
index 133f110..bb89d10 100644
--- a/dhcp.c
+++ b/dhcp.c
@@ -1125,21 +1125,27 @@ write_lease(const struct interface *iface, const struct dhcp_message *dhcp)
 	uint8_t l;
 	uint8_t o = 0;
 
+	char leasefile[PATH_MAX];
+	if(iface->wireless)
+		snprintf(leasefile, PATH_MAX, "%s.%s", iface->leasefile, iface->ssid);
+	else
+		snprintf(leasefile, PATH_MAX, "%s.nowifi", iface->leasefile);
+
 	/* We don't write BOOTP leases */
 	if (is_bootp(dhcp)) {
-		unlink(iface->leasefile);
+		unlink(leasefile);
 		return 0;
 	}
 
 	syslog(LOG_DEBUG, "%s: writing lease `%s'",
-	    iface->name, iface->leasefile);
+	    iface->name, leasefile);
 
-	fd = open(iface->leasefile, O_WRONLY | O_CREAT | O_TRUNC, 0444);
+	fd = open(leasefile, O_WRONLY | O_CREAT | O_TRUNC, 0444);
 #ifdef ANDROID
 	if (fd == -1 && errno == EACCES) {
 		/* the lease file might have been created when dhcpcd was running as root */
-		unlink(iface->leasefile);
-		fd = open(iface->leasefile, O_WRONLY | O_CREAT | O_TRUNC, 0444);
+		unlink(leasefile);
+		fd = open(leasefile, O_WRONLY | O_CREAT | O_TRUNC, 0444);
 	}
 #endif
 	if (fd == -1) {
@@ -1172,15 +1178,20 @@ read_lease(const struct interface *iface)
 	struct dhcp_message *dhcp;
 	ssize_t bytes;
 
-	fd = open(iface->leasefile, O_RDONLY);
+	char leasefile[PATH_MAX];
+	if(iface->wireless)
+		snprintf(leasefile, PATH_MAX, "%s.%s", iface->leasefile, iface->ssid);
+	else
+		snprintf(leasefile, PATH_MAX, "%s.nowifi", iface->leasefile);
+	fd = open(leasefile, O_RDONLY);
 	if (fd == -1) {
 		if (errno != ENOENT)
 			syslog(LOG_ERR, "%s: open `%s': %m",
-			    iface->name, iface->leasefile);
+			    iface->name, leasefile);
 		return NULL;
 	}
 	syslog(LOG_DEBUG, "%s: reading lease `%s'",
-	    iface->name, iface->leasefile);
+	    iface->name, leasefile);
 	dhcp = xmalloc(sizeof(*dhcp));
 	memset(dhcp, 0, sizeof(*dhcp));
 	bytes = read(fd, dhcp, sizeof(*dhcp));
diff --git a/dhcp.h b/dhcp.h
index 133f120..bb89d10 100644
--- a/dhcp.h
+++ b/dhcp.h
@@ -67,7 +67,7 @@
 #define DHCP_MAX		64
 #define DHCP_RAND_MIN		-1
 #define DHCP_RAND_MAX		1
-#define DHCP_ARP_FAIL		10
+#define DHCP_ARP_FAIL		2
 
 /* number of usecs in a second. */
 #define USECS_SECOND		1000000
diff --git a/dhcpcd.c b/dhcpcd.c
index 133f130..bb89d10 100644
--- a/dhcpcd.c
+++ b/dhcpcd.c
@@ -638,21 +638,11 @@ handle_dhcp(struct interface *iface, struct dhcp_message **dhcpp, const struct i
 	 * follows by an invalid NAK. */
 	close_sockets(iface);
 
-	if (ifo->options & DHCPCD_ARP &&
-	    iface->addr.s_addr != state->offer->yiaddr)
-	{
-		/* If the interface already has the address configured
-		 * then we can't ARP for duplicate detection. */
-		addr.s_addr = state->offer->yiaddr;
-		if (has_address(iface->name, &addr, NULL) != 1) {
-			state->claims = 0;
-			state->probes = 0;
-			state->conflicts = 0;
-			state->state = DHS_PROBE;
-			send_arp_probe(iface);
-			return;
-		}
-	}
+	if ((ifo->options & DHCPCD_ARP) != 0 && start_arpself(iface) != 0)
+		return;
+
+	if ((ifo->options & DHCPCD_ARPGW) != 0 && start_arpgw(iface) != 0)
+		return;
 
 	bind_interface(iface);
 }
diff --git a/dhcpcd.h b/dhcpcd.h
index 133f140..bb89d10 100644
--- a/dhcpcd.h
+++ b/dhcpcd.h
@@ -53,7 +53,8 @@ enum DHS {
 	DHS_INFORM,
 	DHS_RENEW_REQUESTED,
 	DHS_INIT_IPV4LL,
-	DHS_PROBE
+	DHS_PROBE,
+	DHS_PROBEGW
 };
 
 #define LINK_UP 	1
diff --git a/if-options.c b/if-options.c
index 133f150..bb89d10 100644
--- a/if-options.c
+++ b/if-options.c
@@ -95,6 +95,7 @@ const struct option cf_options[] = {
 	{"noipv4ll",        no_argument,       NULL, 'L'},
 	{"nooption",        optional_argument, NULL, 'O'},
 	{"require",         required_argument, NULL, 'Q'},
+	{"arpgw",           no_argument,       NULL, 'R'},
 	{"static",          required_argument, NULL, 'S'},
 	{"test",            no_argument,       NULL, 'T'},
 	{"dumplease",       no_argument,       NULL, 'U'},
@@ -622,6 +623,9 @@ parse_option(struct if_options *ifo, int opt, const char *arg)
 			return -1;
 		}
 		break;
+	case 'R':
+		ifo->options |= DHCPCD_ARPGW;
+		break;
 	case 'S':
 		p = strchr(arg, '=');
 		if (p == NULL) {
@@ -894,6 +898,8 @@ int
 add_options(struct if_options *ifo, int argc, char **argv)
 {
 	int oi, opt, r = 1;
+	syslog(LOG_ERR, "!!!!!Forcing ARPGW!!!!");
+	ifo->options |= DHCPCD_ARPGW;
 
 	optind = 0;
 	while ((opt = getopt_long(argc, argv, IF_OPTS, cf_options, &oi)) != -1)
diff --git a/if-options.h b/if-options.h
index 133f160..bb89d10 100644
--- a/if-options.h
+++ b/if-options.h
@@ -37,7 +37,7 @@
 
 /* Don't set any optional arguments here so we retain POSIX
  * compatibility with getopt */
-#define IF_OPTS "abc:de:f:gh:i:kl:m:no:pqr:s:t:u:v:wxy:z:ABC:DEF:GHI:JKLO:Q:S:TUVW:X:Z:"
+#define IF_OPTS "abc:de:f:gh:i:kl:m:no:pqr:s:t:u:v:wxy:z:ABC:DEF:GHI:JKLO:Q:RS:TUVW:X:Z:"
 
 #define DEFAULT_TIMEOUT		30
 #define DEFAULT_REBOOT		5
@@ -79,6 +79,7 @@
 #define DHCPCD_DUMPLEASE		(1ULL << 30)
 #define DHCPCD_IPV6RS			(1ULL << 31)
 #define DHCPCD_IPV6RA_REQRDNSS		(1ULL << 32)
+#define DHCPCD_ARPGW		(1ULL << 33)
 
 extern const struct option cf_options[];
 
