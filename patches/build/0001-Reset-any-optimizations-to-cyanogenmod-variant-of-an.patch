From 7ce4735541ff498a8cdd51486772f1025fd42974 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 5 Jun 2015 06:16:14 +0300
Subject: [PATCH 1/4] Reset any optimizations to cyanogenmod variant of
 android_build

Change-Id: Ia75d9129a2ac64b39e4b4dcba26f5b838bf0de43
---
 core/binary.mk                 |  60 +----------------
 core/combo/TARGET_linux-arm.mk | 142 +++++++----------------------------------
 core/combo/select.mk           |  44 ++-----------
 3 files changed, 28 insertions(+), 218 deletions(-)
 mode change 100755 => 100644 core/binary.mk
 mode change 100755 => 100644 core/combo/TARGET_linux-arm.mk

diff --git a/core/binary.mk b/core/binary.mk
old mode 100755
new mode 100644
index 7dd094c..8ce874e
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -111,18 +111,6 @@ ifeq ($(strip $(WITHOUT_CLANG)),true)
   LOCAL_CLANG :=
 endif
 
-ifneq ($(TARGET_CLANG_VERSION),)
-ifeq ($(strip $(LOCAL_CLANG)),true)
-ifeq ($(strip $(LOCAL_IS_HOST_MODULE)),)
-        LOCAL_CC :=  prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/bin/clang$(HOST_EXECUTABLE_SUFFIX)
-        LOCAL_CXX := prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/bin/clang++$(HOST_EXECUTABLE_SUFFIX)
-        LLVM_AS := prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/bin/llvm-as$(HOST_EXECUTABLE_SUFFIX)
-        LLVM_LINK := prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/bin/llvm-link$(HOST_EXECUTABLE_SUFFIX)
-        CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES :=  prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/lib/clang/$(TARGET_CLANG_VERSION)/include
-endif
-endif
-endif
-
 # Add in libcompiler_rt for all regular device builds
 ifeq (,$(LOCAL_SDK_VERSION)$(LOCAL_IS_HOST_MODULE)$(WITHOUT_LIBCOMPILER_RT))
   LOCAL_STATIC_LIBRARIES += $(COMPILER_RT_CONFIG_EXTRA_STATIC_LIBRARIES)
@@ -137,17 +125,6 @@ ifeq ($(strip $(LOCAL_CLANG)),true)
 endif
 
 ####################################################
-## GRAPHITE loop transformation
-####################################################
-
-ifeq ($(strip $(ENABLE_GRAPHITE)),true)
-  ifeq ($(strip $(LOCAL_DISABLE_GRAPHITE)$(LOCAL_CLANG)$(LOCAL_IS_HOST_MODULE)),)
-    LOCAL_CFLAGS += -floop-interchange -ftree-loop-distribution -floop-strip-mine -floop-block
-    LOCAL_CPPFLAGS += -floop-interchange -ftree-loop-distribution -floop-strip-mine -floop-block
-  endif
-endif
-
-####################################################
 ## Add FDO flags if FDO is turned on and supported
 ####################################################
 ifeq ($(strip $(LOCAL_NO_FDO_SUPPORT)),)
@@ -165,21 +142,6 @@ ifeq ($(strip $(LOCAL_ENABLE_APROF)),true)
   LOCAL_CPPFLAGS += -fno-omit-frame-pointer -fno-function-sections -pg
 endif
 
-####################################################
-## Add LTO flags if LTO is turned on, supported,
-# clang is not used for the module, and the module
-# is a target module
-####################################################
-ifeq ($(strip $(LOCAL_NO_LTO_SUPPORT)),)
-  ifeq ($(strip $(LOCAL_STOCK_CLANG)),)
-    ifeq ($(strip $(LOCAL_IS_HOST_MODULE)),)
-      LOCAL_CFLAGS += $(TARGET_LTO_CFLAGS)
-      LOCAL_CPPFLAGS += $(TARGET_LTO_CFLAGS)
-      LOCAL_LDFLAGS += $(TARGET_LTO_CFLAGS)
-    endif
-  endif
-endif
-
 ###########################################################
 ## Explicitly declare assembly-only __ASSEMBLY__ macro for
 ## assembly source
@@ -197,23 +159,12 @@ my_target_project_includes := $(TARGET_PROJECT_INCLUDES)
 my_target_c_includes := $(TARGET_C_INCLUDES)
 endif # LOCAL_SDK_VERSION
 
-ifneq ($(TARGET_CLANG_VERSION),)
-  ifeq ($(LOCAL_CLANG),true)
-    my_target_global_cflags := $(TARGET_GLOBAL_CLANG_FLAGS)
-    my_target_c_includes += $(CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES)
-    else
-    my_target_global_cflags := $(TARGET_GLOBAL_CFLAGS)
-  endif
-endif
-
-ifeq ($(TARGET_CLANG_VERSION),)
 ifeq ($(LOCAL_CLANG),true)
 my_target_global_cflags := $(TARGET_GLOBAL_CLANG_FLAGS)
 my_target_c_includes += $(CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES)
 else
 my_target_global_cflags := $(TARGET_GLOBAL_CFLAGS)
-endif
-endif
+endif # LOCAL_CLANG
 
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_PROJECT_INCLUDES := $(my_target_project_includes)
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_C_INCLUDES := $(my_target_c_includes)
@@ -326,17 +277,10 @@ renderscript_flags := -Wall -Werror
 renderscript_flags += $(LOCAL_RENDERSCRIPT_FLAGS)
 
 LOCAL_RENDERSCRIPT_INCLUDES := \
+    $(TOPDIR)external/clang/lib/Headers \
     $(TOPDIR)frameworks/rs/scriptc \
     $(LOCAL_RENDERSCRIPT_INCLUDES)
 
-ifeq ($(TARGET_CLANG_VERSION),)
-LOCAL_RENDERSCRIPT_INCLUDES += \
-    $(TOPDIR)external/clang/lib/Headers
-else
-LOCAL_RENDERSCRIPT_INCLUDES += \
-    $(CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES)
-endif
-
 ifneq ($(LOCAL_RENDERSCRIPT_INCLUDES_OVERRIDE),)
 LOCAL_RENDERSCRIPT_INCLUDES := $(LOCAL_RENDERSCRIPT_INCLUDES_OVERRIDE)
 endif
diff --git a/core/combo/TARGET_linux-arm.mk b/core/combo/TARGET_linux-arm.mk
old mode 100755
new mode 100644
index 9c20e7c..3497662
--- a/core/combo/TARGET_linux-arm.mk
+++ b/core/combo/TARGET_linux-arm.mk
@@ -34,13 +34,10 @@ ifeq ($(strip $(TARGET_ARCH_VARIANT)),)
 TARGET_ARCH_VARIANT := armv5te
 endif
 
-# default target GCC version
-ifneq ($(strip $(BONE_STOCK)),)
+ifeq ($(strip $(TARGET_GCC_VERSION_EXP)),)
 TARGET_GCC_VERSION := 4.7
 else
-ifeq ($(strip $(TARGET_GCC_VERSION)),)
-TARGET_GCC_VERSION := 4.8-linaro
-endif
+TARGET_GCC_VERSION := $(TARGET_GCC_VERSION_EXP)
 endif
 
 TARGET_ARCH_SPECIFIC_MAKEFILE := $(BUILD_COMBOS)/arch/$(TARGET_ARCH)/$(TARGET_ARCH_VARIANT).mk
@@ -48,36 +45,6 @@ ifeq ($(strip $(wildcard $(TARGET_ARCH_SPECIFIC_MAKEFILE))),)
 $(error Unknown ARM architecture version: $(TARGET_ARCH_VARIANT))
 endif
 
-ifeq ($(strip $(DONT_WARN_STRICT_ALIASING)),)
-STRICT_ALIASING_WARNINGS := \
-                        -Wstrict-aliasing=2 \
-                        -Werror=strict-aliasing
-else
-STRICT_ALIASING_WARNINGS := \
-                        -Wno-strict-aliasing
-endif
-
-ifeq ($(strip $(BONE_STOCK)),)
-TARGET_ARM_O := 3
-TARGET_THUMB_O := s
-TARGET_THUMB_STRICT := \
-    -fstrict-aliasing
-# aosp gcc 4.7 barfs with ftree-vectorize
-ifneq ($(filter 4.7 4.7.%, $(shell $(TARGET_CC) --version)),)
-TARGET_EXTRA_BULLSHIT_1 += \
-                       -ftree-vectorize
-endif
-TARGET_EXTRA_BULLSHIT_2 += \
-                       -funsafe-loop-optimizations
-TARGET_THUMB_BULLSHIT += \
-                       -funsafe-math-optimizations
-else
-TARGET_ARM_O := 2
-TARGET_THUMB_O := s
-TARGET_THUMB_STRICT := \
-    -fno-strict-aliasing
-endif
-
 include $(TARGET_ARCH_SPECIFIC_MAKEFILE)
 
 # You can set TARGET_TOOLS_PREFIX to get gcc from somewhere else
@@ -101,49 +68,21 @@ endif
 
 TARGET_NO_UNDEFINED_LDFLAGS := -Wl,--no-undefined
 
-# ARM specific
-TARGET_arm_CFLAGS :=    -O$(TARGET_ARM_O) \
+TARGET_arm_CFLAGS :=    -O2 \
                         -fomit-frame-pointer \
-                        -fstrict-aliasing $(TARGET_EXTRA_BULLSHIT_1) \
-                        -funswitch-loops $(TARGET_EXTRA_BULLSHIT_2)
-
-TARGET_arm_CFLAGS += \
-                        $(STRICT_ALIASING_WARNINGS) $(DEBUG_SYMBOL_FLAGS)
+                        -fstrict-aliasing    \
+                        -funswitch-loops
 
-# THUMB2 specific
+# Modules can choose to compile some source as thumb.
 TARGET_thumb_CFLAGS :=  -mthumb \
-                        -O$(TARGET_THUMB_O) \
-                        -fomit-frame-pointer $(TARGET_THUMB_BULLSHIT) \
-                        $(TARGET_THUMB_STRICT) $(STRICT_ALIASING_WARNINGS) $(DEBUG_SYMBOL_FLAGS)
-
-#SHUT THE F$#@ UP!
-TARGET_arm_CFLAGS +=    -Wno-unused-parameter \
-                        -Wno-unused-value \
-                        -Wno-unused-function
-
-TARGET_thumb_CFLAGS +=  -Wno-unused-parameter \
-                        -Wno-unused-value \
-                        -Wno-unused-function
-
-# Global defines for skia neon optimization
-ifeq ($(ARCH_ARM_HAVE_NEON),true)
-  TARGET_GLOBAL_CFLAGS += -DSKPAINTOPTIONS_OPT
-  TARGET_GLOBAL_CPPFLAGS += -DSKPAINTOPTIONS_OPT
-endif
-
-# Turn off strict-aliasing if we're building an AOSP variant without the
-# patchset...
-ifeq ($(strip $(BONE_STOCK)),)
-ifeq ($(DEBUG_NO_STRICT_ALIASING),yes)
-TARGET_arm_CFLAGS += -fno-strict-aliasing -Wno-error=strict-aliasing
-TARGET_thumb_CFLAGS += -fno-strict-aliasing -Wno-error=strict-aliasing
-endif   
-endif
+                        -Os \
+                        -fomit-frame-pointer \
+                        -fno-strict-aliasing
 
 # Set FORCE_ARM_DEBUGGING to "true" in your buildspec.mk
 # or in your environment to force a full arm build, even for
 # files that are normally built as thumb; this can make
-# gdb debugging easier. Don't forget to do a clean build.
+# gdb debugging easier.  Don't forget to do a clean build.
 #
 # NOTE: if you try to build a -O0 build with thumb, several
 # of the libraries (libpv, libwebcore, libkjs) need to be built
@@ -161,13 +100,8 @@ else
    PIE_GLOBAL_CFLAGS := -fPIE
    PIE_EXECUTABLE_TRANSFORM := -fPIE -pie
 endif
-android_config_h := $(call select-android-config-h,linux-arm)
 
-NO_CANONICAL_SYSTEM_HEADERS :=
-ifeq ($(filter 4.6 4.6.% 4.7 4.7.%, $(shell $(TARGET_CC) --version)),)
-NO_CANONICAL_SYSTEM_HEADERS := \
-			-fno-canonical-system-headers
-endif
+android_config_h := $(call select-android-config-h,linux-arm)
 
 TARGET_GLOBAL_CFLAGS += \
 			-msoft-float -fpic $(PIE_GLOBAL_CFLAGS) \
@@ -177,37 +111,19 @@ TARGET_GLOBAL_CFLAGS += \
 			-fstack-protector \
 			-Wa,--noexecstack \
 			-Werror=format-security \
-			-D_FORTIFY_SOURCE=0 \
-			-fstrict-aliasing \
+			-D_FORTIFY_SOURCE=2 \
 			-fno-short-enums \
-			-pipe \
-			-no-canonical-prefixes $(NO_CANONICAL_SYSTEM_HEADERS)\
 			$(arch_variant_cflags) \
 			-include $(android_config_h) \
-			-I $(dir $(android_config_h)) \
-			$(STRICT_ALIASING_WARNINGS) $(DEBUG_SYMBOL_FLAGS) $(DEBUG_FRAME_POINTER_FLAGS)
-
-TARGET_GLOBAL_CPPFLAGS += \
-			$(arch_variant_cflags)
-
-android_config_h := $(call select-android-config-h,linux-arm)
-TARGET_ANDROID_CONFIG_CFLAGS := -include $(android_config_h) -I $(dir $(android_config_h))
-TARGET_GLOBAL_CFLAGS += $(TARGET_ANDROID_CONFIG_CFLAGS)
+			-I $(dir $(android_config_h))
 
 # This warning causes dalvik not to build with gcc 4.6+ and -Werror.
 # We cannot turn it off blindly since the option is not available
 # in gcc-4.4.x.  We also want to disable sincos optimization globally
 # by turning off the builtin sin function.
-ifneq ($(filter 4.6 4.6.% 4.7 4.7.% 4.8 4.8.% 4.9 4.9.%, $(shell $(TARGET_CC) --version)),)
+ifneq ($(filter 4.6 4.6.% 4.7 4.7.%, $(TARGET_GCC_VERSION)),)
 TARGET_GLOBAL_CFLAGS += -Wno-unused-but-set-variable -fno-builtin-sin \
 			-fno-strict-volatile-bitfields
-ifneq ($(filter 4.8 4.8.% 4.9 4.9.%, $(shell $(TARGET_CC) --version)),)
-gcc_variant_ldflags := \
-			-Wl,--enable-new-dtags
-else
-gcc_variant_ldflags := \
-			-Wl,--icf=safe
-endif
 endif
 
 # This is to avoid the dreaded warning compiler message:
@@ -226,25 +142,22 @@ TARGET_GLOBAL_LDFLAGS += \
 			-Wl,-z,now \
 			-Wl,--warn-shared-textrel \
 			-Wl,--fatal-warnings \
-			$(arch_variant_ldflags) $(gcc_variant_ldflags)
+			-Wl,--icf=safe \
+			$(arch_variant_ldflags)
 
-ifeq ($(TARGET_CLANG_VERSION),msm-%)
-	TARGET_GLOBAL_LDFLAGS += \
-	    -no-canonical-prefixes
-endif
-
-# more always true garglemesh:
 TARGET_GLOBAL_CFLAGS += -mthumb-interwork
+
 TARGET_GLOBAL_CPPFLAGS += -fvisibility-inlines-hidden
 
 # More flags/options can be added here
-TARGET_RELEASE_CFLAGS += \
+TARGET_RELEASE_CFLAGS := \
 			-DNDEBUG \
-                        -g \
+			-g \
+			-Wstrict-aliasing=2 \
 			-fgcse-after-reload \
 			-frerun-cse-after-loop \
-			-frename-registers \
-			-pipe $(DEBUG_SYMBOL_FLAGS) $(DEBUG_FRAME_POINTER_FLAGS)
+			-frename-registers
+
 libc_root := bionic/libc
 libm_root := bionic/libm
 libstdc++_root := bionic/libstdc++
@@ -261,17 +174,6 @@ target_libgcov := $(shell $(TARGET_CC) $(TARGET_GLOBAL_CFLAGS) \
         -print-file-name=libgcov.a)
 endif
 
-# Define LTO (Link Time Optimization options)
-
-ifeq ($(strip $(TARGET_ENABLE_LTO)),true)
-# Enable global LTO if TARGET_ENABLE_LTO is set.
-TARGET_LTO_CFLAGS := -flto \
-                    -fno-toplevel-reorder \
-                    -fno-section-anchors \
-                    -flto-compression-level=5 \
-                    -fuse-linker-plugin
-endif
-
 # Define FDO (Feedback Directed Optimization) options.
 
 TARGET_FDO_CFLAGS:=
diff --git a/core/combo/select.mk b/core/combo/select.mk
index 06f511f..d5f7379 100644
--- a/core/combo/select.mk
+++ b/core/combo/select.mk
@@ -23,21 +23,8 @@
 # Build a target string like "linux-arm" or "darwin-x86".
 combo_os_arch := $($(combo_target)OS)-$($(combo_target)ARCH)
 
-
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-TARGET_NEEDS_EXTRA_DEBUGGING := true
-endif
-
-# Include TARGET_NEEDS_EXTRA_DEBUGGING in your BoardConfig.mk to include GDB
-# and assertion macro debugging, and to summon the tooth fairy (not your mom... the real one)
-ifneq ($(TARGET_NEEDS_EXTRA_DEBUGGING),true)
-DEBUG_SYMBOL_FLAGS := -g0 -DNDEBUG
-DEBUG_FRAME_POINTER_FLAGS := -fomit-frame-pointer
-else
-DEBUG_SYMBOL_FLAGS := -g
-endif
-
 # Set reasonable defaults for the various variables
+
 $(combo_target)CC := $(CC)
 $(combo_target)CXX := $(CXX)
 $(combo_target)AR := $(AR)
@@ -60,31 +47,8 @@ $(combo_target)HAVE_STRLCAT := 0
 $(combo_target)HAVE_KERNEL_MODULES := 0
 
 $(combo_target)GLOBAL_CFLAGS := -fno-exceptions -Wno-multichar
-ifeq ($(strip $(BONE_STOCK)),)
-ifeq ($(DONT_WARN_STRICT_ALIASING),)
-$(combo_target)RELEASE_CFLAGS := -O3 $(DEBUG_SYMBOL_FLAGS)
-ifneq ($(strip $(combo_target)),HOST_)
-$(combo_target)RELEASE_CFLAGS += -Wstrict-aliasing=2 -Werror=strict-aliasing
-else
-$(combo_target)RELEASE_CFLAGS += -Wno-error=strict-aliasing -Wno-strict-aliasing
-endif
-else
-$(combo_target)RELEASE_CFLAGS := -O3 $(DEBUG_SYMBOL_FLAGS)
-ifneq ($(strip $(combo_target)),HOST_)
-$(combo_target)RELEASE_CFLAGS += -Wno-strict-aliasing
-endif
-endif
-# Turn off strict-aliasing if we're building an AOSP variant without the
-# patchset...
-ifeq ($(DEBUG_NO_STRICT_ALIASING),yes)
-$(combo_target)RELEASE_CFLAGS += -fno-strict-aliasing -Wno-error=strict-aliasing
-endif
-$(combo_target)GLOBAL_LDFLAGS := -Wl,-O2 -Wl,--sort-common -s
-else
-$(warning USING BONE STOCK CFLAGS)
 $(combo_target)RELEASE_CFLAGS := -O2 -g -fno-strict-aliasing
 $(combo_target)GLOBAL_LDFLAGS :=
-endif
 $(combo_target)GLOBAL_ARFLAGS := crsP
 
 $(combo_target)EXECUTABLE_SUFFIX :=
@@ -111,9 +75,9 @@ ifneq ($(USE_CCACHE),)
   # We don't really use system headers much so the rootdir is
   # fine; ensures these paths are relative for all Android trees
   # on a workstation.
-ifeq ($(CCACHE_BASEDIR),)
-  export CCACHE_BASEDIR := /
-endif
+  ifeq ($(CCACHE_BASEDIR),)
+    export CCACHE_BASEDIR := $(ANDROID_BUILD_TOP)
+  endif
 
   CCACHE_HOST_TAG := $(HOST_PREBUILT_TAG)
   # If we are cross-compiling Windows binaries on Linux
-- 
1.9.1

