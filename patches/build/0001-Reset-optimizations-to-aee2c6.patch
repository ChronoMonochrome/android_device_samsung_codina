From fe3a31aed61a151ca5c6447cdd56bf818d76662c Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 23 Jan 2016 23:59:56 +0700
Subject: [PATCH 1/4] Reset optimizations to aee2c6~

Change-Id: Ic70c906a65c41b8fadd1e958ee3c0b85df33856f
---
 core/combo/arch/arm/armv7-a-neon.mk | 17 +++++++-------
 core/llvm_config.mk                 | 44 ++++---------------------------------
 2 files changed, 13 insertions(+), 48 deletions(-)

diff --git a/core/combo/arch/arm/armv7-a-neon.mk b/core/combo/arch/arm/armv7-a-neon.mk
index f63f2c6..9296348 100644
--- a/core/combo/arch/arm/armv7-a-neon.mk
+++ b/core/combo/arch/arm/armv7-a-neon.mk
@@ -7,24 +7,24 @@ ARCH_ARM_HAVE_VFP_D32           := true
 ARCH_ARM_HAVE_NEON              := true
 
 ifeq ($(TARGET_CPU_VARIANT),$(filter $(TARGET_CPU_VARIANT),cortex-a15 krait))
-	arch_variant_cflags := -mcpu=cortex-a15 -mfpu=neon-vfpv4
+	arch_variant_cflags := -mcpu=cortex-a15
 else
 ifeq ($(strip $(TARGET_CPU_VARIANT)),cortex-a9)
-	arch_variant_cflags := -mcpu=cortex-a9 -mfpu=neon
+	arch_variant_cflags := -mcpu=cortex-a9
 else
 ifeq ($(strip $(TARGET_CPU_VARIANT)),cortex-a8)
-	arch_variant_cflags := -mcpu=cortex-a8 -mfpu=neon
+	arch_variant_cflags := -mcpu=cortex-a8
 else
 ifeq ($(strip $(TARGET_CPU_VARIANT)),cortex-a7)
-	arch_variant_cflags := -mcpu=cortex-a7 -mfpu=neon-vfpv4
+	arch_variant_cflags := -mcpu=cortex-a7
 else
 ifeq ($(strip $(TARGET_CPU_VARIANT)),cortex-a5)
-	arch_variant_cflags := -mcpu=cortex-a5 -mfpu=neon-vfpv4
+	arch_variant_cflags := -mcpu=cortex-a5
 else
 ifeq ($(strip $(TARGET_CPU_VARIANT)),scorpion)
-	arch_variant_cflags := -mcpu=cortex-a8 -mfpu=neon
+	arch_variant_cflags := -mcpu=cortex-a8
 else
-	arch_variant_cflags := -march=armv7-a -mfpu=neon
+	arch_variant_cflags := -march=armv7-a
 endif
 endif
 endif
@@ -33,7 +33,8 @@ endif
 endif
 
 arch_variant_cflags += \
-    -mfloat-abi=softfp
+    -mfloat-abi=softfp \
+    -mfpu=neon
 
 arch_variant_ldflags := \
 	-Wl,--fix-cortex-a8
diff --git a/core/llvm_config.mk b/core/llvm_config.mk
index cd47e1b..18e689e 100644
--- a/core/llvm_config.mk
+++ b/core/llvm_config.mk
@@ -12,23 +12,12 @@ define clang-flags-subst
   $(eval $(call do-clang-flags-subst,$(1),$(2)))
 endef
 
+
 CLANG_CONFIG_EXTRA_CFLAGS := \
-  -O3 \
   -D__compiler_offsetof=__builtin_offsetof \
-  $(TARGET_THUMB_STRICT) $(DEBUG_SYMBOL_FLAGS) $(DEBUG_FRAME_POINTER_FLAGS)
 
 CLANG_CONFIG_UNKNOWN_CFLAGS := \
-  -funswitch-loops \
-  -funsafe-loop-optimizations \
-  -fno-canonical-system-headers
-
-ifeq ($(TARGET_ENABLE_LTO),true)
-CLANG_CONFIG_UNKNOWN_CFLAGS += \
-  -fno-toplevel-reorder \
-  -flto-compression-level=5 \
-  -fuse-linker-plugin \
-  -fno-section-anchors
-endif
+  -funswitch-loops
 
 ifeq ($(TARGET_ARCH),arm)
   RS_TRIPLE := armv7-none-linux-gnueabi
@@ -37,7 +26,7 @@ ifeq ($(TARGET_ARCH),arm)
     -nostdlibinc \
     -B$(TARGET_TOOLCHAIN_ROOT)/arm-linux-androideabi/bin
   CLANG_CONFIG_EXTRA_CFLAGS += \
-   $(CLANG_CONFIG_EXTRA_ASFLAGS) \
+    $(CLANG_CONFIG_EXTRA_ASFLAGS) \
     -mllvm -arm-enable-ehabi
   CLANG_CONFIG_EXTRA_LDFLAGS += \
     -target arm-linux-androideabi \
@@ -95,15 +84,7 @@ ifeq ($(TARGET_ARCH),x86)
     -mbionic
 endif
 
-ifneq ($(TARGET_CLANG_VERSION),)
-ifeq (,$(filter-out msm-%,$(TARGET_CLANG_VERSION)))
-CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES := prebuilts/clang/$(BUILD_OS)-x86/host/$(TARGET_CLANG_VERSION)/lib/clang/$(TARGET_CLANG_VERSION)/include
-else
-$(error unknown TARGET_CLANG_VERSION specified - $(TARGET_CLANG_VERSION))
-endif
-else
 CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES := external/clang/lib/include $(TARGET_OUT_HEADERS)/clang
-endif
 
 # remove unknown flags to define CLANG_FLAGS
 TARGET_GLOBAL_CLANG_FLAGS += $(filter-out $(CLANG_CONFIG_UNKNOWN_CFLAGS),$(TARGET_GLOBAL_CFLAGS))
@@ -112,38 +93,21 @@ HOST_GLOBAL_CLANG_FLAGS += $(filter-out $(CLANG_CONFIG_UNKNOWN_CFLAGS),$(HOST_GL
 TARGET_arm_CLANG_CFLAGS += $(filter-out $(CLANG_CONFIG_UNKNOWN_CFLAGS),$(TARGET_arm_CFLAGS))
 TARGET_thumb_CLANG_CFLAGS += $(filter-out $(CLANG_CONFIG_UNKNOWN_CFLAGS),$(TARGET_thumb_CFLAGS))
 
-CLANG_CONFIG_EXTRA_CFLAGS += $(CLANG_MSM_EXTRA_CFLAGS)
-CLANG_CONFIG_EXTRA_ASFLAGS += $(CLANG_MSM_EXTRA_CFLAGS)
-CLANG_CONFIG_EXTRA_LDFLAGS += $(CLANG_MSM_EXTRA_CFLAGS)
-
 # llvm does not yet support -march=armv5e nor -march=armv5te, fall back to armv5 or armv5t
 $(call clang-flags-subst,-march=armv5te,-march=armv5t)
 $(call clang-flags-subst,-march=armv5e,-march=armv5)
 
-# clang does not support -Wno-psabi, -Wno-unused-but-set-variable, and
-# -Wno-unused-but-set-parameter
+# clang does not support -Wno-psabi and -Wno-unused-but-set-variable
 $(call clang-flags-subst,-Wno-psabi,)
 $(call clang-flags-subst,-Wno-unused-but-set-variable,)
-$(call clang-flags-subst,-Wno-unused-but-set-parameter,)
 
-ifeq ($(TARGET_CLANG_VERSION),)
 # clang does not support -mcpu=cortex-a15 yet - fall back to armv7-a for now
 $(call clang-flags-subst,-mcpu=cortex-a15,-march=armv7-a)
-endif
-
-ifneq ($(MAXIMUM_OVERDRIVE),true)
-# GCC uses clang's address sanitizer to detect memory errors in the program through debugging tools like gdb. They do this
-# using an extra instrumentation module llvm pass during compilation and a runtime library that replaces the malloc function.
-#
-# Output code performance can be effected if a "hot" function that is known to speed up the code gets flagged during the extra
-# compiler pass but the primary benefit of turning it off is greatly speeding up your build time.   If you choose to add this
-# you should still compile without it occassionally to verify the code for your build is still sound.
 
 ADDRESS_SANITIZER_CONFIG_EXTRA_CFLAGS := -fsanitize=address
 ADDRESS_SANITIZER_CONFIG_EXTRA_LDFLAGS := -Wl,-u,__asan_preinit
 ADDRESS_SANITIZER_CONFIG_EXTRA_SHARED_LIBRARIES := libdl libasan_preload
 ADDRESS_SANITIZER_CONFIG_EXTRA_STATIC_LIBRARIES := libasan
-endif
 
 # This allows us to use the superset of functionality that compiler-rt
 # provides to Clang (for supporting features like -ftrapv).
-- 
2.5.0

