From e4e7beb3285d402da96c96a9b86263259873693b Mon Sep 17 00:00:00 2001
From: djeman <djemouli@gmail.com>
Date: Tue, 24 Oct 2017 02:11:37 +0200
Subject: [PATCH] libril: fix old libril test
 Fix invalid response NULL old ril

diff --git a/libril/ril_service.cpp b/libril/ril_service.cpp
index d91f9cd..495c3e0 100644
--- a/libril/ril_service.cpp
+++ b/libril/ril_service.cpp
@@ -2986,7 +2986,7 @@
         // Earlier RILs did not send a response for some cases although the interface
         // expected an integer as response. Do not return error if response is empty. Instead
         // Return -1 in those cases to maintain backward compatibility.
-    } else if (response == NULL || responseLen != sizeof(int)) {
+    } else if (response == NULL || responseLen % sizeof(int) != 0) {
         RLOGE("responseIntOrEmpty: Invalid response");
         if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
     } else {
@@ -3001,7 +3001,7 @@
     populateResponseInfo(responseInfo, serial, responseType, e);
     int ret = -1;
 
-    if (response == NULL || responseLen != sizeof(int)) {
+    if (response == NULL || responseLen % sizeof(int) != 0) {
         RLOGE("responseInt: Invalid response");
         if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
     } else {
@@ -3450,13 +3450,13 @@
         if (response == NULL) {
             RLOGE("getCurrentCallsResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
-        } else if (responseLen == sizeof(int)) {
-            int *pInt = (int *) response;
-            info.causeCode = (LastCallFailCause) pInt[0];
         } else if (responseLen == sizeof(RIL_LastCallFailCauseInfo))  {
             RIL_LastCallFailCauseInfo *pFailCauseInfo = (RIL_LastCallFailCauseInfo *) response;
             info.causeCode = (LastCallFailCause) pFailCauseInfo->cause_code;
             //info.vendorCause = convertCharPtrToHidlString(pFailCauseInfo->vendor_cause);
+        } else if (responseLen % sizeof(int) != 0) {
+            int *pInt = (int *) response;
+            info.causeCode = (LastCallFailCause) pInt[0];
         } else {
             RLOGE("getCurrentCallsResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
@@ -4193,7 +4193,7 @@
         populateResponseInfo(responseInfo, serial, responseType, e);
         int n = -1, m = -1;
         int numInts = responseLen / sizeof(int);
-        if (response == NULL || numInts != 2) {
+        if (response == NULL || numInts < 2) {
             RLOGE("getClirResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -4305,7 +4305,7 @@
         bool enable = false;
         int serviceClass = -1;
         int numInts = responseLen / sizeof(int);
-        if (response == NULL || numInts != 2) {
+        if (response == NULL || numInts < 2) {
             RLOGE("getCallWaitingResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -4482,7 +4482,7 @@
         RadioResponseInfo responseInfo = {};
         populateResponseInfo(responseInfo, serial, responseType, e);
         bool manual = false;
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("getNetworkSelectionModeResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -4573,7 +4573,7 @@
         populateResponseInfo(responseInfo, serial, responseType, e);
         hidl_vec<OperatorInfo> networks;
         if ((response == NULL && responseLen != 0)
-                || responseLen % (mqanelements * sizeof(char *))!= 0) {
+                || responseLen % (mqanelements * sizeof(char *)) != 0) {
             RLOGE("getAvailableNetworksResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -4717,7 +4717,7 @@
         RadioResponseInfo responseInfo = {};
         populateResponseInfo(responseInfo, serial, responseType, e);
         bool enable = false;
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("getMuteResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -5234,7 +5234,7 @@
         populateResponseInfo(responseInfo, serial, responseType, e);
         bool enable = false;
         int numInts = responseLen / sizeof(int);
-        if (response == NULL || numInts != 1) {
+        if (response == NULL || numInts < 1) {
             RLOGE("getPreferredVoicePrivacyResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -5520,7 +5520,7 @@
 
         int numStrings = responseLen / sizeof(char *);
         hidl_string emptyString;
-        if (response == NULL || numStrings != 5) {
+        if (response == NULL || numStrings < 5) {
             RLOGE("getOperatorResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             Return<void> retStatus
@@ -5600,7 +5600,7 @@
 
         int numStrings = responseLen / sizeof(char *);
         hidl_string emptyString;
-        if (response == NULL || numStrings != 4) {
+        if (response == NULL || numStrings < 4) {
             RLOGE("getDeviceIdentityResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             Return<void> retStatus
@@ -5931,7 +5931,7 @@
         bool isRegistered = false;
         int ratFamily = 0;
         int numInts = responseLen / sizeof(int);
-        if (response == NULL || numInts != 2) {
+        if (response == NULL || numInts < 2) {
             RLOGE("getImsRegistrationStateResponse Invalid response: NULL");
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
@@ -6969,7 +6969,7 @@
 int radio::newSmsOnSimInd(int slotId, int indicationType,
                           int token, RIL_Errno e, void *response, size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("newSmsOnSimInd: invalid response");
             return 0;
         }
@@ -6990,7 +6990,7 @@
 int radio::onUssdInd(int slotId, int indicationType,
                      int token, RIL_Errno e, void *response, size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != 2 * sizeof(char *)) {
+        if (response == NULL || responseLen < 2 * sizeof(char *)) {
             RLOGE("onUssdInd: invalid response");
             return 0;
         }
@@ -7366,7 +7366,7 @@
 int radio::stkCallSetupInd(int slotId, int indicationType,
                            int token, RIL_Errno e, void *response, size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("stkCallSetupInd: invalid response");
             return 0;
         }
@@ -7577,7 +7577,7 @@
                                      int indicationType, int token, RIL_Errno e, void *response,
                                      size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("restrictedStateChangedInd: invalid response");
             return 0;
         }
@@ -7651,7 +7651,7 @@
                                      int indicationType, int token, RIL_Errno e, void *response,
                                      size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("cdmaOtaProvisionStatusInd: invalid response");
             return 0;
         }
@@ -7864,7 +7864,7 @@
                                    int indicationType, int token, RIL_Errno e, void *response,
                                    size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("indicateRingbackToneInd: invalid response");
             return 0;
         }
@@ -7903,7 +7903,7 @@
                                             int indicationType, int token, RIL_Errno e,
                                             void *response, size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("cdmaSubscriptionSourceChangedInd: invalid response");
             return 0;
         }
@@ -7927,7 +7927,7 @@
                              int indicationType, int token, RIL_Errno e, void *response,
                              size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("cdmaPrlChangedInd: invalid response");
             return 0;
         }
@@ -7982,7 +7982,7 @@
                                     int indicationType, int token, RIL_Errno e, void *response,
                                     size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("voiceRadioTechChangedInd: invalid response");
             return 0;
         }
@@ -8193,7 +8193,7 @@
                                         int indicationType, int token, RIL_Errno e, void *response,
                                         size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("subscriptionStatusChangedInd: invalid response");
             return 0;
         }
@@ -8216,7 +8216,7 @@
                                int indicationType, int token, RIL_Errno e, void *response,
                                size_t responseLen) {
     if (radioService[slotId] != NULL && radioService[slotId]->mRadioIndication != NULL) {
-        if (response == NULL || responseLen != sizeof(int)) {
+        if (response == NULL || responseLen % sizeof(int) != 0) {
             RLOGE("srvccStateNotifyInd: invalid response");
             return 0;
         }
