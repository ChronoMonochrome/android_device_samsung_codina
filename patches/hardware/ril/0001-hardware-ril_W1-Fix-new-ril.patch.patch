From df2c6b6c39e2160d6fb0498b9f6fb4e7ae982bec Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Tue, 16 May 2017 11:18:48 +0300
Subject: [PATCH 1/3] hardware-ril_W1-Fix-new-ril.patch

Change-Id: Ib3607646ed1ca36c7192dcd929d3e142b6961bbc
---
 libril/ril.cpp        | 94 +++++++++++++++++++++++++++++++++++++--------------
 libril/ril_commands.h |  4 +--
 libril/ril_event.cpp  |  4 +++
 rild/rild.c           | 21 ++++++++++++
 4 files changed, 95 insertions(+), 28 deletions(-)

diff --git a/libril/ril.cpp b/libril/ril.cpp
index b173b1f..e7977b7 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -251,7 +251,7 @@ static size_t s_lastNITZTimeDataSize;
 #endif
 
 /*******************************************************************/
-static int sendResponse (Parcel &p, RIL_SOCKET_ID socket_id);
+static int sendResponse (Parcel &p, RIL_SOCKET_ID socket_id, int unsolRes);
 
 static void dispatchVoid (Parcel& p, RequestInfo *pRI);
 static void dispatchString (Parcel& p, RequestInfo *pRI);
@@ -312,6 +312,7 @@ static int responseHardwareConfig(Parcel &p, void *response, size_t responselen)
 static int responseDcRtInfo(Parcel &p, void *response, size_t responselen);
 static int responseRadioCapability(Parcel &p, void *response, size_t responselen);
 static int responseSSData(Parcel &p, void *response, size_t responselen);
+static int responseIntsGetPreferredNetworkType(Parcel &p, void *response, size_t responselen);
 static int responseLceStatus(Parcel &p, void *response, size_t responselen);
 static int responseLceData(Parcel &p, void *response, size_t responselen);
 static int responseActivityData(Parcel &p, void *response, size_t responselen);
@@ -362,6 +363,10 @@ static UnsolResponseInfo s_unsolResponses[] = {
 #include "ril_unsol_commands.h"
 };
 
+static UnsolResponseInfo s_unsolResponses_v[] = {
+#include "ril_unsol_commands_vendor.h"
+};
+
 /* For older RILs that do not support new commands RIL_REQUEST_VOICE_RADIO_TECH and
    RIL_UNSOL_VOICE_RADIO_TECH_CHANGED messages, decode the voice radio tech from
    radio state message and store it. Every time there is a change in Radio State
@@ -551,7 +556,7 @@ processCommandBuffer(void *buffer, size_t buflen, RIL_SOCKET_ID socket_id) {
         pErr.writeInt32 (token);
         pErr.writeInt32 (RIL_E_GENERIC_FAILURE);
 
-        sendResponse(pErr, socket_id);
+        sendResponse(pErr, socket_id, 0);
         return 0;
     }
 
@@ -2327,9 +2332,9 @@ sendResponseRaw (const void *data, size_t dataSize, RIL_SOCKET_ID socket_id) {
 
     return 0;
 }
-
+int temp = 0;
 static int
-sendResponse (Parcel &p, RIL_SOCKET_ID socket_id) {
+sendResponse (Parcel &p, RIL_SOCKET_ID socket_id, int unsolRes) {
     printResponse;
     return sendResponseRaw(p.data(), p.dataSize(), socket_id);
 }
@@ -2367,6 +2372,41 @@ responseInts(Parcel &p, void *response, size_t responselen) {
     return 0;
 }
 
+static int
+responseIntsGetPreferredNetworkType(Parcel &p, void *response, size_t responselen) {
+    int numInts;
+
+    if (response == NULL && responselen != 0) {
+        RLOGE("invalid response: NULL");
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+    if (responselen % sizeof(int) != 0) {
+        RLOGE("responseInts: invalid response length %d expected multiple of %d\n",
+            (int)responselen, (int)sizeof(int));
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+
+    int *p_int = (int *) response;
+
+    numInts = responselen / sizeof(int);
+    p.writeInt32 (numInts);
+
+    /* each int*/
+    startResponse;
+    for (int i = 0 ; i < numInts ; i++) {
+        if (i == 0 && p_int[0] == 7) {
+            RLOGD("REQUEST_GET_PREFERRED_NETWORK_TYPE: NETWORK_MODE_GLOBAL => NETWORK_MODE_WCDMA_PREF");
+            p_int[0] = 0;
+        }
+        appendPrintBuf("%s%d,", printBuf, p_int[i]);
+        p.writeInt32(p_int[i]);
+    }
+    removeLastChar;
+    closeResponse;
+
+    return 0;
+}
+
 // Response is an int or RIL_LastCallFailCauseInfo.
 // Currently, only Shamu plans to use RIL_LastCallFailCauseInfo.
 // TODO(yjl): Let all implementations use RIL_LastCallFailCauseInfo.
@@ -2494,21 +2534,13 @@ static int responseCallList(Parcel &p, void *response, size_t responselen) {
         p.writeInt32(p_cur->als);
         p.writeInt32(p_cur->isVoice);
         p.writeInt32(p_cur->isVoicePrivacy);
+        p.writeInt32(0); /* chrono: send an extra zero before we send the number */
         writeStringToParcel(p, p_cur->number);
-        p.writeInt32(p_cur->numberPresentation);
-        writeStringToParcel(p, p_cur->name);
-        p.writeInt32(p_cur->namePresentation);
-        // Remove when partners upgrade to version 3
-        if ((s_callbacks.version < 3) || (p_cur->uusInfo == NULL || p_cur->uusInfo->uusData == NULL)) {
-            p.writeInt32(0); /* UUS Information is absent */
-        } else {
-            RIL_UUS_Info *uusInfo = p_cur->uusInfo;
-            p.writeInt32(1); /* UUS Information is present */
-            p.writeInt32(uusInfo->uusType);
-            p.writeInt32(uusInfo->uusDcs);
-            p.writeInt32(uusInfo->uusLength);
-            p.write(uusInfo->uusData, uusInfo->uusLength);
-        }
+        p.writeInt32(1); /* numberPresentation */
+        writeStringToParcel(p, NULL); /* name */
+        p.writeInt32(0); /* namePresentation */
+        p.writeInt32(0); /* UUS Information is absent */
+
         appendPrintBuf("%s[id=%d,%s,toa=%d,",
             printBuf,
             p_cur->index,
@@ -3836,10 +3868,10 @@ static int responseSimStatus(Parcel &p, void *response, size_t responselen) {
     if (s_callbacks.version <= LAST_IMPRECISE_RIL_VERSION) {
         if (responselen == sizeof (RIL_CardStatus_v6)) {
             responseSimStatusV6(p, response);
-        } else if (responselen == sizeof (RIL_CardStatus_v5)) {
+        } else if (responselen == sizeof (RIL_CardStatus_v5) || responselen == 436) {
             responseSimStatusV5(p, response);
         } else {
-            RLOGE("responseSimStatus: A RilCardStatus_v6 or _v5 expected\n");
+            RLOGE("responseSimStatus: A RilCardStatus_v6: %d or _v5:%d expected: %d\n", sizeof(RIL_CardStatus_v6),sizeof(RIL_CardStatus_v5),responselen);
             return RIL_ERRNO_INVALID_RESPONSE;
         }
     } else { // RIL version >= 13
@@ -5032,6 +5064,11 @@ RIL_onRequestAck(RIL_Token t) {
         return;
     }
 
+    if(pRI->pCI->requestNumber == 91) {
+        RLOGE("Avoid unknown");
+        return;
+    }
+
     socket_id = pRI->socket_id;
     fd = findFd(socket_id);
 
@@ -5051,14 +5088,14 @@ RIL_onRequestAck(RIL_Token t) {
             RLOGD ("RIL onRequestComplete: Command channel closed");
         }
 
-        sendResponse(p, socket_id);
+        sendResponse(p, socket_id, 0);
     }
 }
 
 extern "C" void
 RIL_onRequestComplete(RIL_Token t, RIL_Errno e, void *response, size_t responselen) {
     RequestInfo *pRI;
-    int ret;
+    int ret, request;
     int fd;
     size_t errorOffset;
     RIL_SOCKET_ID socket_id = RIL_SOCKET_1;
@@ -5070,11 +5107,16 @@ RIL_onRequestComplete(RIL_Token t, RIL_Errno e, void *response, size_t responsel
         return;
     }
 
+    if(pRI->pCI->requestNumber == 91) {
+        RLOGE("Avoid unknown");
+        return;
+    }
+
     socket_id = pRI->socket_id;
     fd = findFd(socket_id);
 
 #if VDBG
-    RLOGD("RequestComplete, %s", rilSocketIdToString(socket_id));
+    RLOGD("RequestComplete, socketid = %s requestNumber = %s", rilSocketIdToString(socket_id),requestToString(pRI->pCI->requestNumber));
 #endif
 
     if (pRI->local > 0) {
@@ -5123,7 +5165,7 @@ RIL_onRequestComplete(RIL_Token t, RIL_Errno e, void *response, size_t responsel
         if (fd < 0) {
             RLOGD ("RIL onRequestComplete: Command channel closed");
         }
-        sendResponse(p, socket_id);
+        sendResponse(p, socket_id, 0);
     }
 
 done:
@@ -5439,7 +5481,7 @@ void RIL_onUnsolicitedResponse(int unsolResponse, const void *data,
 #if VDBG
     RLOGI("%s UNSOLICITED: %s length:%d", rilSocketIdToString(soc_id), requestToString(unsolResponse), p.dataSize());
 #endif
-    ret = sendResponse(p, soc_id);
+    ret = sendResponse(p, soc_id, unsolResponse);
     if (ret != 0 && unsolResponse == RIL_UNSOL_NITZ_TIME_RECEIVED) {
 
         // Unfortunately, NITZ time is not poll/update like everything
@@ -5822,7 +5864,7 @@ requestToString(int request) {
         case RIL_UNSOL_RADIO_CAPABILITY: return "RIL_UNSOL_RADIO_CAPABILITY";
         case RIL_RESPONSE_ACKNOWLEDGEMENT: return "RIL_RESPONSE_ACKNOWLEDGEMENT";
         case RIL_UNSOL_PCO_DATA: return "RIL_UNSOL_PCO_DATA";
-        default: return "<unknown request>";
+        default: RLOGE("unknown request %d",request); return "<unknown request>";
     }
 }
 
diff --git a/libril/ril_commands.h b/libril/ril_commands.h
index 8d02c39..43570aa 100644
--- a/libril/ril_commands.h
+++ b/libril/ril_commands.h
@@ -32,7 +32,7 @@
     {RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, dispatchVoid, responseVoid},
     {RIL_REQUEST_CONFERENCE, dispatchVoid, responseVoid},
     {RIL_REQUEST_UDUB, dispatchVoid, responseVoid},
-    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseFailCause},
+    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseInts},
     {RIL_REQUEST_SIGNAL_STRENGTH, dispatchVoid, responseRilSignalStrength},
     {RIL_REQUEST_VOICE_REGISTRATION_STATE, dispatchVoid, responseStrings},
     {RIL_REQUEST_DATA_REGISTRATION_STATE, dispatchVoid, responseStrings},
@@ -88,7 +88,7 @@
     {RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM, dispatchInts, responseVoid},
     {RIL_REQUEST_EXPLICIT_CALL_TRANSFER, dispatchVoid, responseVoid},
     {RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE, dispatchInts, responseVoid},
-    {RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, dispatchVoid, responseInts},
+    {RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, dispatchVoid, responseIntsGetPreferredNetworkType},
     {RIL_REQUEST_GET_NEIGHBORING_CELL_IDS, dispatchVoid, responseCellList},
     {RIL_REQUEST_SET_LOCATION_UPDATES, dispatchInts, responseVoid},
     {RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE, dispatchInts, responseVoid},
diff --git a/libril/ril_event.cpp b/libril/ril_event.cpp
index 84b8b72..b8b9a46 100644
--- a/libril/ril_event.cpp
+++ b/libril/ril_event.cpp
@@ -95,10 +95,14 @@ static void dump_event(struct ril_event * ev)
 
 static void getNow(struct timeval * tv)
 {
+#ifdef STE_POSIX_CLOCKS
     struct timespec ts;
     clock_gettime(CLOCK_MONOTONIC, &ts);
     tv->tv_sec = ts.tv_sec;
     tv->tv_usec = ts.tv_nsec/1000;
+#else
+    gettimeofday(tv, NULL);
+#endif
 }
 
 static void init_list(struct ril_event * list)
diff --git a/rild/rild.c b/rild/rild.c
index 7dc7a34..ba98cf4 100644
--- a/rild/rild.c
+++ b/rild/rild.c
@@ -48,7 +48,9 @@ static void usage(const char *argv0) {
     exit(EXIT_FAILURE);
 }
 
+#ifdef QCOM_HARDWARE
 extern char rild[MAX_SOCKET_NAME_LENGTH] __attribute__((weak));
+#endif
 
 extern void RIL_register (const RIL_RadioFunctions *callbacks);
 
@@ -177,6 +179,7 @@ int main(int argc, char **argv) {
         }
     }
 
+#ifdef QCOM_HARDWARE
     if (clientId == NULL) {
         clientId = "0";
     } else if (atoi(clientId) >= MAX_RILDS) {
@@ -191,6 +194,7 @@ int main(int argc, char **argv) {
             RLOGE("Trying to instantiate multiple rild sockets without a compatible libril!");
         }
     }
+#endif
 
     if (rilLibPath == NULL) {
         if ( 0 == property_get(LIB_PATH_PROPERTY, libPath, NULL)) {
@@ -319,6 +323,8 @@ int main(int argc, char **argv) {
 
             RLOGD("overriding with %s %s", arg_overrides[1], arg_overrides[2]);
         }
+
+        RLOGD("arg_device: %s",arg_device);
     }
 OpenLib:
 #endif
@@ -364,9 +370,11 @@ OpenLib:
         argc = make_argv(args, rilArgv);
     }
 
+#ifdef QCOM_HARDWARE
     rilArgv[argc++] = "-c";
     rilArgv[argc++] = clientId;
     RLOGD("RIL_Init argc = %d clientId = %s", argc, rilArgv[argc-1]);
+#endif
 
     // Make sure there's a reasonable argv[0]
     rilArgv[0] = argv[0];
@@ -374,6 +382,19 @@ OpenLib:
     funcs = rilInit(&s_rilEnv, argc, rilArgv);
     RLOGD("RIL_Init rilInit completed");
 
+#ifdef QCOM_HARDWARE
+    if (funcs == NULL) {
+        /* Pre-multi-client qualcomm vendor libraries won't support "-c" either, so
+         * try again without it. This should only happen on ancient qcoms, so raise
+         * a big fat warning
+         */
+        argc -= 2;
+        RLOGE("============= Retrying RIL_Init without a client id. This is only required for very old versions,");
+        RLOGE("============= and you're likely to have more radio breakage elsewhere!");
+        funcs = rilInit(&s_rilEnv, argc, rilArgv);
+    }
+#endif
+
     RIL_register(funcs);
 
     RLOGD("RIL_Init RIL_register completed");
-- 
2.5.0

