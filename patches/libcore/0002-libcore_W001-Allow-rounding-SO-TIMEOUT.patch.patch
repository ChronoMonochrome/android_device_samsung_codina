From c79ef030c96f79bab0ccdc1124a1e57bbf2b559c Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 21 May 2016 03:06:45 +0700
Subject: [PATCH 2/2] libcore_W001-Allow-rounding-SO-TIMEOUT.patch

Change-Id: I249fe385e7b39c5fc12ede9771ae9e05e5dc0853
---
 .../apache/harmony/tests/java/net/DatagramSocketTest.java  |  7 +++++--
 .../apache/harmony/tests/java/net/ServerSocketTest.java    | 14 ++++++++++----
 .../java/org/apache/harmony/tests/java/net/SocketTest.java | 14 ++++++++++----
 .../test/java/libcore/java/net/OldServerSocketTest.java    | 10 +++++-----
 luni/src/test/java/libcore/java/net/OldSocketTest.java     |  8 +++-----
 .../src/test/java/libcore/javax/net/ssl/SSLSocketTest.java |  5 +++--
 6 files changed, 36 insertions(+), 22 deletions(-)

diff --git a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/DatagramSocketTest.java b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/DatagramSocketTest.java
index d9f3d91..33e0223 100644
--- a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/DatagramSocketTest.java
+++ b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/DatagramSocketTest.java
@@ -390,8 +390,11 @@ public class DatagramSocketTest extends junit.framework.TestCase {
 
     public void test_getSoTimeout() throws Exception {
         DatagramSocket ds = new DatagramSocket();
-        ds.setSoTimeout(100);
-        assertEquals("Returned incorrect timeout", 100, ds.getSoTimeout());
+        final int timeoutSet = 100;
+        ds.setSoTimeout(timeoutSet);
+        int actualTimeout = ds.getSoTimeout();
+        // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+        assertTrue("Returned incorrect timeout", Math.abs(actualTimeout - timeoutSet) <= 10);
     }
 
     static final class TestDatagramSocketImpl extends DatagramSocketImpl {
diff --git a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/ServerSocketTest.java b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/ServerSocketTest.java
index d7ef745..f42ba24 100644
--- a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/ServerSocketTest.java
+++ b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/ServerSocketTest.java
@@ -296,9 +296,12 @@ public class ServerSocketTest extends junit.framework.TestCase {
      */
     public void test_getSoTimeout() throws IOException {
         s = new ServerSocket(0);
+        final int timeoutSet = 100;
         try {
-            s.setSoTimeout(100);
-            assertEquals("Returned incorrect sotimeout", 100, s.getSoTimeout());
+            s.setSoTimeout(timeoutSet);
+            int actualTimeout = s.getSoTimeout();
+            // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+            assertTrue("Returned incorrect sotimeout", Math.abs(timeoutSet - actualTimeout) <= 10);
         } finally {
             s.close();
         }
@@ -340,12 +343,15 @@ public class ServerSocketTest extends junit.framework.TestCase {
      */
     public void test_setSoTimeoutI() throws IOException {
         // Timeout should trigger and throw InterruptedIOException
+        final int timeoutSet = 100;
         try {
             s = new ServerSocket(0);
-            s.setSoTimeout(100);
+            s.setSoTimeout(timeoutSet);
             s.accept();
         } catch (InterruptedIOException e) {
-            assertEquals("Set incorrect sotimeout", 100, s.getSoTimeout());
+            int actualSoTimeout = s.getSoTimeout();
+            // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+            assertTrue("Set incorrect sotimeout", Math.abs(timeoutSet - actualSoTimeout) <= 10);
             return;
         }
 
diff --git a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/SocketTest.java b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/SocketTest.java
index 4df92e2..0915a27 100644
--- a/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/SocketTest.java
+++ b/harmony-tests/src/test/java/org/apache/harmony/tests/java/net/SocketTest.java
@@ -967,8 +967,11 @@ public class SocketTest extends junit.framework.TestCase {
     public void test_getSoTimeout() throws Exception {
         ServerSocket server = new ServerSocket(0);
         Socket client = new Socket(InetAddress.getLocalHost(), server.getLocalPort());
-        client.setSoTimeout(100);
-        assertEquals("Returned incorrect sotimeout", 100, client.getSoTimeout());
+        final int timeoutSet = 100;
+        client.setSoTimeout(timeoutSet);
+        int actualTimeout = client.getSoTimeout();
+        // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+        assertTrue("Returned incorrect sotimeout", Math.abs(timeoutSet - actualTimeout) <= 10);
         client.close();
         server.close();
     }
@@ -1492,8 +1495,11 @@ public class SocketTest extends junit.framework.TestCase {
     public void test_setSoTimeoutI() throws Exception {
         ServerSocket server = new ServerSocket(0);
         Socket client = new Socket(InetAddress.getLocalHost(), server.getLocalPort());
-        client.setSoTimeout(100);
-        assertEquals("Set incorrect sotimeout", 100, client.getSoTimeout());
+        final int timeoutSet = 100;
+        client.setSoTimeout(timeoutSet);
+        int actualTimeout = client.getSoTimeout();
+        // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+        assertTrue("Set incorrect sotimeout", Math.abs(timeoutSet - actualTimeout) <= 10);
         client.close();
         server.close();
     }
diff --git a/luni/src/test/java/libcore/java/net/OldServerSocketTest.java b/luni/src/test/java/libcore/java/net/OldServerSocketTest.java
index 6518897..8588144 100644
--- a/luni/src/test/java/libcore/java/net/OldServerSocketTest.java
+++ b/luni/src/test/java/libcore/java/net/OldServerSocketTest.java
@@ -238,11 +238,11 @@ public class OldServerSocketTest extends OldSocketTestCase {
     public void test_getSoTimeout_setSoTimeout() throws Exception {
         // TODO: a useful test would check that setSoTimeout actually causes timeouts!
         ServerSocket s = new ServerSocket();
-        s.setSoTimeout(1500);
-        int ms = s.getSoTimeout();
-        if (ms < 1500-10 || ms > 1500+10) {
-            fail("suspicious timeout: " + ms);
-        }
+        final int timeoutSet = 1500;
+        s.setSoTimeout(timeoutSet);
+        int actualTimeout = s.getSoTimeout();
+        // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+        assertTrue("suspicious timeout: " + actualTimeout, Math.abs(actualTimeout - timeoutSet) <= 10);
         s.close();
         try {
             s.getSoTimeout();
diff --git a/luni/src/test/java/libcore/java/net/OldSocketTest.java b/luni/src/test/java/libcore/java/net/OldSocketTest.java
index ded5802..4254516 100644
--- a/luni/src/test/java/libcore/java/net/OldSocketTest.java
+++ b/luni/src/test/java/libcore/java/net/OldSocketTest.java
@@ -389,9 +389,7 @@ public class OldSocketTest extends OldSocketTestCase {
         Socket s = new Socket();
         s.setSoTimeout(1500);
         int ms = s.getSoTimeout();
-        if (ms < 1500-10 || ms > 1500+10) {
-            fail("suspicious timeout: " + ms);
-        }
+        assertTrue("suspicious timeout: " + ms, Math.abs(ms - 1500) <= 10);
         s.close();
         try {
             s.getSoTimeout();
@@ -1384,10 +1382,10 @@ public class OldSocketTest extends OldSocketTestCase {
         connector.start();
         theSocket.setSoTimeout(1000);
         Thread.sleep(10);
-        assertEquals("Socket option not set during connect: 10 ", 1000, theSocket.getSoTimeout());
+        assertTrue("Socket option not set during connect: 10 ", Math.abs(1000 - theSocket.getSoTimeout()) <= 10);
         Thread.sleep(50);
         theSocket.setSoTimeout(2000);
-        assertEquals("Socket option not set during connect: 50 ", 2000, theSocket.getSoTimeout());
+        assertTrue("Socket option not set during connect: 50 ", Math.abs(2000 - theSocket.getSoTimeout()) <= 10);
         Thread.sleep(5000);
         theSocket.close();
 
diff --git a/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java b/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java
index 11dfb3d..274712f 100644
--- a/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java
+++ b/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java
@@ -1206,8 +1206,9 @@ public class SSLSocketTest extends TestCase {
         // setting wrapper sets underlying and ...
         int expectedTimeoutMillis = 1000;  // 10 was too small because it was affected by rounding
         wrapping.setSoTimeout(expectedTimeoutMillis);
-        assertEquals(expectedTimeoutMillis, wrapping.getSoTimeout());
-        assertEquals(expectedTimeoutMillis, underlying.getSoTimeout());
+        // The kernel can round the requested value based on the HZ setting. We allow up to 10ms.
+        assertTrue(Math.abs(expectedTimeoutMillis - wrapping.getSoTimeout()) <= 10);
+        assertTrue(Math.abs(expectedTimeoutMillis - underlying.getSoTimeout()) <= 10);
 
         // ... getting wrapper inspects underlying
         underlying.setSoTimeout(0);
-- 
2.5.0

