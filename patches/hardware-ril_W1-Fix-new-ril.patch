diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99526..d49d5dd 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -251,7 +251,7 @@
 #endif
 
 /*******************************************************************/
-static int sendResponse (Parcel &p, RIL_SOCKET_ID socket_id);
+static int sendResponse (Parcel &p, RIL_SOCKET_ID socket_id, int unsolRes);
 
 static void dispatchVoid (Parcel& p, RequestInfo *pRI);
 static void dispatchString (Parcel& p, RequestInfo *pRI);
@@ -551,7 +551,7 @@
         pErr.writeInt32 (token);
         pErr.writeInt32 (RIL_E_GENERIC_FAILURE);
 
-        sendResponse(pErr, socket_id);
+        sendResponse(pErr, socket_id, 0);
         return 0;
     }
 
@@ -2327,9 +2327,9 @@
 
     return 0;
 }
-
+int temp = 0;
 static int
-sendResponse (Parcel &p, RIL_SOCKET_ID socket_id) {
+sendResponse (Parcel &p, RIL_SOCKET_ID socket_id, int unsolRes) {
     printResponse;
     return sendResponseRaw(p.data(), p.dataSize(), socket_id);
 }
@@ -5070,11 +5070,16 @@
         return;
     }
 
+    if(pRI->pCI->requestNumber == 91) {
+        RLOGE("Avoid unknown");
+        return;
+    }
+
     socket_id = pRI->socket_id;
     fd = findFd(socket_id);
 
 #if VDBG
-    RLOGD("RequestComplete, %s", rilSocketIdToString(socket_id));
+    RLOGD("RequestComplete, socketid = %s requestNumber = %s", rilSocketIdToString(socket_id),requestToString(pRI->pCI->requestNumber));
 #endif
 
     if (pRI->local > 0) {
@@ -5123,7 +5128,7 @@
         if (fd < 0) {
             RLOGD ("RIL onRequestComplete: Command channel closed");
         }
-        sendResponse(p, socket_id);
+        sendResponse(p, socket_id, 0);
     }
 
 done:
@@ -5439,7 +5444,7 @@
 #if VDBG
     RLOGI("%s UNSOLICITED: %s length:%d", rilSocketIdToString(soc_id), requestToString(unsolResponse), p.dataSize());
 #endif
-    ret = sendResponse(p, soc_id);
+    ret = sendResponse(p, soc_id, unsolResponse);
     if (ret != 0 && unsolResponse == RIL_UNSOL_NITZ_TIME_RECEIVED) {
 
         // Unfortunately, NITZ time is not poll/update like everything
@@ -5822,7 +5827,7 @@
         case RIL_UNSOL_RADIO_CAPABILITY: return "RIL_UNSOL_RADIO_CAPABILITY";
         case RIL_RESPONSE_ACKNOWLEDGEMENT: return "RIL_RESPONSE_ACKNOWLEDGEMENT";
         case RIL_UNSOL_PCO_DATA: return "RIL_UNSOL_PCO_DATA";
-        default: return "<unknown request>";
+        default: RLOGE("unknown request %d",request); return "<unknown request>";
     }
 }
 
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99526..d49d5d0 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -3836,10 +3836,10 @@
     if (s_callbacks.version <= LAST_IMPRECISE_RIL_VERSION) {
         if (responselen == sizeof (RIL_CardStatus_v6)) {
             responseSimStatusV6(p, response);
-        } else if (responselen == sizeof (RIL_CardStatus_v5)) {
+        } else if (responselen == sizeof (RIL_CardStatus_v5) || responselen == 436) {
             responseSimStatusV5(p, response);
         } else {
-            RLOGE("responseSimStatus: A RilCardStatus_v6 or _v5 expected\n");
+            RLOGE("responseSimStatus: A RilCardStatus_v6: %d or _v5:%d expected: %d\n", sizeof(RIL_CardStatus_v6),sizeof(RIL_CardStatus_v5),responselen);
             return RIL_ERRNO_INVALID_RESPONSE;
         }
     } else { // RIL version >= 13
diff --git a/libril/ril_event.cpp b/libril/ril_event.cpp
index acbd6ba..141d412 100644
--- a/libril/ril_event.cpp
+++ b/libril/ril_event.cpp
@@ -95,10 +95,14 @@
 
 static void getNow(struct timeval * tv)
 {
+#ifdef STE_POSIX_CLOCKS
     struct timespec ts;
     clock_gettime(CLOCK_MONOTONIC, &ts);
     tv->tv_sec = ts.tv_sec;
     tv->tv_usec = ts.tv_nsec/1000;
+#else
+    gettimeofday(tv, NULL);
+#endif
 }
 
 static void init_list(struct ril_event * list)
diff --git a/rild/rild.c b/rild/rild.c
index c63da38..42ea12c 100644
--- a/rild/rild.c
+++ b/rild/rild.c
@@ -48,7 +48,9 @@
     exit(EXIT_FAILURE);
 }
 
-extern char rild[MAX_SOCKET_NAME_LENGTH] __attribute__((weak));
+#ifdef QCOM_HARDWARE
+extern char rild[MAX_SOCKET_NAME_LENGTH] __attribute__((weak));
+#endif
 
 extern void RIL_register (const RIL_RadioFunctions *callbacks);
 
@@ -177,6 +179,7 @@
         }
     }
 
+#ifdef QCOM_HARDWARE
     if (clientId == NULL) {
         clientId = "0";
     } else if (atoi(clientId) >= MAX_RILDS) {
@@ -191,6 +194,7 @@
             RLOGE("Trying to instantiate multiple rild sockets without a compatible libril!");
         }
     }
+#endif
 
     if (rilLibPath == NULL) {
         if ( 0 == property_get(LIB_PATH_PROPERTY, libPath, NULL)) {
@@ -319,6 +323,8 @@
 
             RLOGD("overriding with %s %s", arg_overrides[1], arg_overrides[2]);
         }
+
+        RLOGD("arg_device: %s",arg_device);
     }
 OpenLib:
 #endif
@@ -364,9 +370,11 @@
         argc = make_argv(args, rilArgv);
     }
 
+#ifdef QCOM_HARDWARE
     rilArgv[argc++] = "-c";
     rilArgv[argc++] = clientId;
     RLOGD("RIL_Init argc = %d clientId = %s", argc, rilArgv[argc-1]);
+#endif
 
     // Make sure there's a reasonable argv[0]
     rilArgv[0] = argv[0];
@@ -374,6 +382,19 @@
     funcs = rilInit(&s_rilEnv, argc, rilArgv);
     RLOGD("RIL_Init rilInit completed");
 
+#ifdef QCOM_HARDWARE
+    if (funcs == NULL) {
+        /* Pre-multi-client qualcomm vendor libraries won't support "-c" either, so
+         * try again without it. This should only happen on ancient qcoms, so raise
+         * a big fat warning
+         */
+        argc -= 2;
+        RLOGE("============= Retrying RIL_Init without a client id. This is only required for very old versions,");
+        RLOGE("============= and you're likely to have more radio breakage elsewhere!");
+        funcs = rilInit(&s_rilEnv, argc, rilArgv);
+    }
+#endif
+
     RIL_register(funcs);
 
     RLOGD("RIL_Init RIL_register completed");
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99520..d49d5dd 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -286,6 +286,8 @@
 static int responseInts(Parcel &p, void *response, size_t responselen);
 static int responseFailCause(Parcel &p, void *response, size_t responselen);
 static int responseStrings(Parcel &p, void *response, size_t responselen);
+static int responseStrings(Parcel &p, void *response, size_t responselen, bool network_search);
+static int responseStringsNetworks(Parcel &p, void *response, size_t responselen);
 static int responseString(Parcel &p, void *response, size_t responselen);
 static int responseVoid(Parcel &p, void *response, size_t responselen);
 static int responseCallList(Parcel &p, void *response, size_t responselen);
@@ -312,6 +314,7 @@
 static int responseDcRtInfo(Parcel &p, void *response, size_t responselen);
 static int responseRadioCapability(Parcel &p, void *response, size_t responselen);
 static int responseSSData(Parcel &p, void *response, size_t responselen);
+static int responseIntsGetPreferredNetworkType(Parcel &p, void *response, size_t responselen);
 static int responseLceStatus(Parcel &p, void *response, size_t responselen);
 static int responseLceData(Parcel &p, void *response, size_t responselen);
 static int responseActivityData(Parcel &p, void *response, size_t responselen);
@@ -2367,6 +2370,88 @@
     return 0;
 }
 
+static int
+responseIntsGetPreferredNetworkType(Parcel &p, void *response, size_t responselen) {
+    int numInts;
+
+    if (response == NULL && responselen != 0) {
+        RLOGE("invalid response: NULL");
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+    if (responselen % sizeof(int) != 0) {
+        RLOGE("responseInts: invalid response length %d expected multiple of %d\n",
+            (int)responselen, (int)sizeof(int));
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+
+    int *p_int = (int *) response;
+
+    numInts = responselen / sizeof(int);
+    p.writeInt32 (numInts);
+
+    /* each int*/
+    startResponse;
+    for (int i = 0 ; i < numInts ; i++) {
+        if (i == 0 && p_int[0] == 7) {
+            RLOGD("REQUEST_GET_PREFERRED_NETWORK_TYPE: NETWORK_MODE_GLOBAL => NETWORK_MODE_WCDMA_PREF");
+            p_int[0] = 0;
+        }
+        appendPrintBuf("%s%d,", printBuf, p_int[i]);
+        p.writeInt32(p_int[i]);
+    }
+    removeLastChar;
+    closeResponse;
+
+    return 0;
+}
+
+/** response is a char **, pointing to an array of char *'s */
+static int responseStrings(Parcel &p, void *response, size_t responselen, bool network_search) {
+    int numStrings;
+
+    if (response == NULL && responselen != 0) {
+        RLOGE("invalid response: NULL");
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+    if (responselen % sizeof(char *) != 0) {
+        RLOGE("responseStrings: invalid response length %d expected multiple of %d\n",
+            (int)responselen, (int)sizeof(char *));
+        return RIL_ERRNO_INVALID_RESPONSE;
+    }
+
+    if (response == NULL) {
+        p.writeInt32 (0);
+    } else {
+        char **p_cur = (char **) response;
+
+        numStrings = responselen / sizeof(char *);
+        if (network_search) {
+            int32_t QANElements;
+
+            /*
+             * This needs to be set to same value as mQANElements in the RIL
+             * Telephony class.
+             */
+            QANElements = property_get_int32(PROPERTY_QAN_ELEMENTS, 4);
+            p.writeInt32 ((numStrings / 5) * QANElements);
+        } else {
+            p.writeInt32 (numStrings);
+        }
+
+        /* each string*/
+        startResponse;
+        for (int i = 0 ; i < numStrings ; i++) {
+            if (network_search && ((i + 1) % 5 == 0))
+                continue;
+            appendPrintBuf("%s%s,", printBuf, (char*)p_cur[i]);
+            writeStringToParcel (p, p_cur[i]);
+        }
+        removeLastChar;
+        closeResponse;
+    }
+    return 0;
+}
+
 // Response is an int or RIL_LastCallFailCauseInfo.
 // Currently, only Shamu plans to use RIL_LastCallFailCauseInfo.
 // TODO(yjl): Let all implementations use RIL_LastCallFailCauseInfo.
@@ -2408,6 +2493,10 @@
     return responseStrings(p, response, responselen);
 }
 
+static int responseStringsNetworks(Parcel &p, void *response, size_t responselen) {
+    return responseStrings(p, response, responselen, true);
+}
+
 /** response is a char **, pointing to an array of char *'s */
 static int responseStrings(Parcel &p, void *response, size_t responselen) {
     int numStrings;
@@ -5058,7 +5147,7 @@
 extern "C" void
 RIL_onRequestComplete(RIL_Token t, RIL_Errno e, void *response, size_t responselen) {
     RequestInfo *pRI;
-    int ret;
+    int ret, request;
     int fd;
     size_t errorOffset;
     RIL_SOCKET_ID socket_id = RIL_SOCKET_1;
diff --git a/libril/ril_commands.h b/libril/ril_commands.h
index 0c99521..d49d5dd 100644
--- a/libril/ril_commands.h
+++ b/libril/ril_commands.h
@@ -32,7 +32,7 @@
     {RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, dispatchVoid, responseVoid},
     {RIL_REQUEST_CONFERENCE, dispatchVoid, responseVoid},
     {RIL_REQUEST_UDUB, dispatchVoid, responseVoid},
-    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseFailCause},
+    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseInts},
     {RIL_REQUEST_SIGNAL_STRENGTH, dispatchVoid, responseRilSignalStrength},
     {RIL_REQUEST_VOICE_REGISTRATION_STATE, dispatchVoid, responseStrings},
     {RIL_REQUEST_DATA_REGISTRATION_STATE, dispatchVoid, responseStrings},
@@ -62,7 +62,7 @@
     {RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, dispatchVoid, responseInts},
     {RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, dispatchVoid, responseVoid},
     {RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, dispatchString, responseVoid},
-    {RIL_REQUEST_QUERY_AVAILABLE_NETWORKS , dispatchVoid, responseStrings},
+    {RIL_REQUEST_QUERY_AVAILABLE_NETWORKS , dispatchVoid, responseStringsNetworks},
     {RIL_REQUEST_DTMF_START, dispatchString, responseVoid},
     {RIL_REQUEST_DTMF_STOP, dispatchVoid, responseVoid},
     {RIL_REQUEST_BASEBAND_VERSION, dispatchVoid, responseString},
@@ -88,7 +88,7 @@
     {RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM, dispatchInts, responseVoid},
     {RIL_REQUEST_EXPLICIT_CALL_TRANSFER, dispatchVoid, responseVoid},
     {RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE, dispatchInts, responseVoid},
-    {RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, dispatchVoid, responseInts},
+    {RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, dispatchVoid, responseIntsGetPreferredNetworkType},
     {RIL_REQUEST_GET_NEIGHBORING_CELL_IDS, dispatchVoid, responseCellList},
     {RIL_REQUEST_SET_LOCATION_UPDATES, dispatchInts, responseVoid},
     {RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE, dispatchInts, responseVoid},
diff --git a/libril/ril_unsol_commands_vendor.h b/libril/ril_unsol_commands_vendor.h
new file mode 100644
index 0c99522..d49d5dd
--- /dev/null
+++ b/libril/ril_unsol_commands_vendor.h
@@ -0,0 +1,42 @@
+/* //device/libs/telephony/ril_unsol_commands.h
+**
+*/
+    {SAMSUNG_UNSOL_RESPONSE_BASE, NULL, WAKE_PARTIAL},
+    {RIL_UNSOL_RELEASE_COMPLETE_MESSAGE, responseVoid, WAKE_PARTIAL}, // 11001
+    {RIL_UNSOL_STK_SEND_SMS_RESULT, responseInts, WAKE_PARTIAL}, // 11002
+    {RIL_UNSOL_STK_CALL_CONTROL_RESULT, responseVoid, WAKE_PARTIAL}, // 11003
+    {RIL_UNSOL_DUN_CALL_STATUS, responseVoid, WAKE_PARTIAL}, // 11004
+    {11005, NULL, WAKE_PARTIAL},
+    {11006, NULL, WAKE_PARTIAL},
+    {RIL_UNSOL_O2_HOME_ZONE_INFO, responseVoid, WAKE_PARTIAL}, // 11007
+    {RIL_UNSOL_DEVICE_READY_NOTI, responseVoid, WAKE_PARTIAL}, // 11008
+    {RIL_UNSOL_GPS_NOTI, responseVoid, WAKE_PARTIAL}, // 11009
+    {RIL_UNSOL_AM, responseString, WAKE_PARTIAL}, // 11010
+    {RIL_UNSOL_DUN_PIN_CONTROL_SIGNAL, responseVoid, WAKE_PARTIAL}, // 11011
+    {RIL_UNSOL_DATA_SUSPEND_RESUME, responseInts, WAKE_PARTIAL}, // 11012
+    {RIL_UNSOL_SAP, responseVoid, WAKE_PARTIAL}, // 11013
+    {11014, NULL, WAKE_PARTIAL},
+    {RIL_UNSOL_SIM_SMS_STORAGE_AVAILALE, responseVoid, WAKE_PARTIAL}, // 11015
+    {RIL_UNSOL_HSDPA_STATE_CHANGED, responseVoid, WAKE_PARTIAL}, // 11016
+    {RIL_UNSOL_WB_AMR_STATE, responseInts, WAKE_PARTIAL}, // 11017
+    {RIL_UNSOL_TWO_MIC_STATE, responseInts, WAKE_PARTIAL}, // 11018
+    {RIL_UNSOL_DHA_STATE, responseVoid, WAKE_PARTIAL}, // 11019
+    {RIL_UNSOL_UART, responseVoid, WAKE_PARTIAL}, // 11020
+    {RIL_UNSOL_RESPONSE_HANDOVER, responseVoid, WAKE_PARTIAL}, // 11021
+    {RIL_UNSOL_IPV6_ADDR, responseVoid, WAKE_PARTIAL}, // 11022
+    {RIL_UNSOL_NWK_INIT_DISC_REQUEST, responseVoid, WAKE_PARTIAL}, // 11023
+    {RIL_UNSOL_RTS_INDICATION, responseVoid, WAKE_PARTIAL}, // 11024
+    {RIL_UNSOL_OMADM_SEND_DATA, responseVoid, WAKE_PARTIAL}, // 11025
+    {RIL_UNSOL_DUN, responseVoid, WAKE_PARTIAL}, // 11026
+    {RIL_UNSOL_SYSTEM_REBOOT, responseVoid, WAKE_PARTIAL}, // 11027
+    {RIL_UNSOL_VOICE_PRIVACY_CHANGED, responseVoid, WAKE_PARTIAL}, // 11028
+    {RIL_UNSOL_UTS_GETSMSCOUNT, responseVoid, WAKE_PARTIAL}, // 11029
+    {RIL_UNSOL_UTS_GETSMSMSG, responseVoid, WAKE_PARTIAL}, // 11030
+    {RIL_UNSOL_UTS_GET_UNREAD_SMS_STATUS, responseVoid, WAKE_PARTIAL}, // 11031
+    {RIL_UNSOL_MIP_CONNECT_STATUS, responseVoid, WAKE_PARTIAL}, // 11032
+#ifdef RIL_UNSOL_SNDMGR_WB_AMR_REPORT
+    {RIL_UNSOL_SNDMGR_WB_AMR_REPORT, responseInts, WAKE_PARTIAL}, // 20017
+#endif
+#ifdef RIL_UNSOL_SNDMGR_CLOCK_CTRL
+    {RIL_UNSOL_SNDMGR_CLOCK_CTRL, responseInts, WAKE_PARTIAL}, // 20022
+#endif
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99523..d49d5dd 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -365,6 +365,10 @@
 #include "ril_unsol_commands.h"
 };
 
+static UnsolResponseInfo s_unsolResponses_v[] = {
+#include "ril_unsol_commands_vendor.h"
+};
+
 /* For older RILs that do not support new commands RIL_REQUEST_VOICE_RADIO_TECH and
    RIL_UNSOL_VOICE_RADIO_TECH_CHANGED messages, decode the voice radio tech from
    radio state message and store it. Every time there is a change in Radio State
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99524..d49d5dd 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -2587,21 +2587,13 @@ static int responseCallList(Parcel &p, void *response, size_t responselen) {
         p.writeInt32(p_cur->als);
         p.writeInt32(p_cur->isVoice);
         p.writeInt32(p_cur->isVoicePrivacy);
+        p.writeInt32(0); /* chrono: send an extra zero before we send the number */
         writeStringToParcel(p, p_cur->number);
-        p.writeInt32(p_cur->numberPresentation);
-        writeStringToParcel(p, p_cur->name);
-        p.writeInt32(p_cur->namePresentation);
-        // Remove when partners upgrade to version 3
-        if ((s_callbacks.version < 3) || (p_cur->uusInfo == NULL || p_cur->uusInfo->uusData == NULL)) {
-            p.writeInt32(0); /* UUS Information is absent */
-        } else {
-            RIL_UUS_Info *uusInfo = p_cur->uusInfo;
-            p.writeInt32(1); /* UUS Information is present */
-            p.writeInt32(uusInfo->uusType);
-            p.writeInt32(uusInfo->uusDcs);
-            p.writeInt32(uusInfo->uusLength);
-            p.write(uusInfo->uusData, uusInfo->uusLength);
-        }
+        p.writeInt32(1); /* numberPresentation */
+        writeStringToParcel(p, NULL); /* name */
+        p.writeInt32(0); /* namePresentation */
+        p.writeInt32(0); /* UUS Information is absent */
+
         appendPrintBuf("%s[id=%d,%s,toa=%d,",
             printBuf,
             p_cur->index,
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99524..d49d5d0 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -71,6 +71,7 @@ namespace android {
 #define ANDROID_WAKE_LOCK_USECS 200000
 
 #define PROPERTY_RIL_IMPL "gsm.version.ril-impl"
+#define PROPERTY_QAN_ELEMENTS "ro.ril.telephony.mqanelements"
 
 // match with constant in RIL.java
 #define MAX_COMMAND_BYTES (8 * 1024)
diff --git a/libril/ril.cpp b/libril/ril.cpp
index 0c99524..d49d5d9 100644
--- a/libril/ril.cpp
+++ b/libril/ril.cpp
@@ -5117,6 +5117,11 @@
         RLOGE ("RIL_onRequestAck: invalid RIL_Token");
         return;
     }
+
+    if(pRI->pCI->requestNumber == 91) {
+        RLOGE("Avoid unknown");
+        return;
+    }
 
     socket_id = pRI->socket_id;
     fd = findFd(socket_id);
@@ -5137,7 +5142,7 @@
             RLOGD ("RIL onRequestComplete: Command channel closed");
         }
 
-        sendResponse(p, socket_id);
+        sendResponse(p, socket_id, 0);
     }
 }
 
