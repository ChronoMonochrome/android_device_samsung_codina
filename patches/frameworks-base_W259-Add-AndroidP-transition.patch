Subject: [PATCH] frameworks: Add Android P transition

diff --git a/core/java/android/view/animation/AnimationUtils.java b/core/java/android/view/animation/AnimationUtils.java
index f5c36139df0..01d98c1da98 100644
--- a/core/java/android/view/animation/AnimationUtils.java
+++ b/core/java/android/view/animation/AnimationUtils.java
@@ -26,6 +26,7 @@
 import android.os.SystemClock;
 import android.util.AttributeSet;
 import android.util.Xml;
+import android.util.PathParser;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -102,6 +103,187 @@ public static long currentAnimationTimeMillis() {
     public static Animation loadAnimation(Context context, @AnimRes int id)
             throws NotFoundException {
 
+        String name = context.getResources().getResourceEntryName(id);
+        switch(name) {
+            case "activity_open_enter" : return getActivityOpenEnterAnim();
+            case "activity_open_exit" : return getActivityOpenExitAnim();
+            case "activity_close_enter" : return getActivityCloseEnterAnim();
+            case "activity_close_exit" : return getActivityCloseExitAnim();
+            case "task_open_enter" : return getTaskOpenEnterAnim();
+            case "task_open_exit" : return getTaskOpenExitAnim();
+            case "task_close_enter" : return getTaskCloseEnterAnim();
+            case "task_close_exit" : return getTaskCloseExitAnim();
+            default: return loadAnimationFromXml(context,id);
+        }
+    }
+
+    private static Animation getActivityOpenEnterAnim() {
+        AnimationSet animationSet = new AnimationSet(false);
+        animationSet.setZAdjustment(Animation.ZORDER_TOP);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.04100001f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setInterpolator(fastOutSlowIn());
+        translateAnimation.setDuration(425L);
+        animationSet.addAnimation(translateAnimation);
+        ClipRectAnimation clipRectAnimation = new ClipRectAnimation(0.0f, 0.959f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f);
+        clipRectAnimation.setDuration(425L);
+        clipRectAnimation.setInterpolator(fastOutExtraSlowIn());
+        animationSet.addAnimation(clipRectAnimation);
+        return animationSet;
+    }
+
+    private static Animation getActivityOpenExitAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -0.019999981f);
+        translateAnimation.setDuration(425L);
+        translateAnimation.setInterpolator(fastOutSlowIn());
+        animationSet.addAnimation(translateAnimation);
+        AlphaAnimation alphaAnimation = new AlphaAnimation(1.0f,0.9f);
+        alphaAnimation.setDuration(117L);
+        alphaAnimation.setInterpolator(new LinearInterpolator());
+        animationSet.addAnimation(alphaAnimation);
+        return animationSet;
+    }
+
+    private static Animation getActivityCloseEnterAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -0.019999981f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setDuration(425L);
+        translateAnimation.setInterpolator(fastOutSlowIn());
+        animationSet.addAnimation(translateAnimation);
+        AlphaAnimation alphaAnimation = new AlphaAnimation(0.9f,1.0f);
+        alphaAnimation.setDuration(425L);
+        alphaAnimation.setStartOffset(0);
+        alphaAnimation.setInterpolator(activityCloseDim());
+        animationSet.addAnimation(alphaAnimation);
+        return animationSet;
+    }
+
+    private static Animation getActivityCloseExitAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.04100001f);
+        translateAnimation.setDuration(425L);
+        translateAnimation.setInterpolator(fastOutSlowIn());
+        animationSet.addAnimation(translateAnimation);
+        ClipRectAnimation clipRectAnimation = new ClipRectAnimation(0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.959f, 1.0f, 1.0f);
+        clipRectAnimation.setDuration(425L);
+        clipRectAnimation.setInterpolator(fastOutExtraSlowIn());
+        animationSet.addAnimation(clipRectAnimation);
+        return animationSet;
+    }
+
+    private static Animation getTaskOpenEnterAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, -1.0499878f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setDuration(383L);
+        translateAnimation.setStartOffset(50);
+        translateAnimation.setInterpolator(aggressiveEase());
+        translateAnimation.setFillEnabled(true);
+        translateAnimation.setFillBefore(true);
+        translateAnimation.setFillAfter(true);
+        animationSet.addAnimation(translateAnimation);
+        ScaleAnimation scaleAnimation = new ScaleAnimation(1.0526f, 1.0f, 1.0526f, 1.0f,Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation.setDuration(283L);
+        scaleAnimation.setInterpolator(fastOutSlowIn());
+        scaleAnimation.setFillEnabled(true);
+        scaleAnimation.setFillBefore(true);
+        scaleAnimation.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation);
+        ScaleAnimation scaleAnimation2 = new ScaleAnimation(0.95f, 1.0f, 0.95f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation2.setDuration(317L);
+        scaleAnimation2.setStartOffset(283);
+        scaleAnimation2.setInterpolator(fastOutSlowIn());
+        scaleAnimation2.setFillEnabled(true);
+        scaleAnimation2.setFillBefore(true);
+        scaleAnimation2.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation2);
+        return animationSet;
+    }
+
+    private static Animation getTaskOpenExitAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0499878f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setDuration(383L);
+        translateAnimation.setStartOffset(50);
+        translateAnimation.setInterpolator(aggressiveEase());
+        translateAnimation.setFillEnabled(true);
+        translateAnimation.setFillBefore(true);
+        translateAnimation.setFillAfter(true);
+        animationSet.addAnimation(translateAnimation);
+        ScaleAnimation scaleAnimation = new ScaleAnimation(1.0f, 0.95f, 1.0f, 0.95f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation.setDuration(283L);
+        scaleAnimation.setInterpolator(fastOutSlowIn());
+        scaleAnimation.setFillEnabled(true);
+        scaleAnimation.setFillBefore(true);
+        scaleAnimation.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation);
+        return animationSet;
+    }
+
+    private static Animation getTaskCloseEnterAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 1.0499878f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setDuration(383L);
+        translateAnimation.setStartOffset(50);
+        translateAnimation.setInterpolator(aggressiveEase());
+        translateAnimation.setFillEnabled(true);
+        translateAnimation.setFillBefore(true);
+        translateAnimation.setFillAfter(true);
+        animationSet.addAnimation(translateAnimation);
+        ScaleAnimation scaleAnimation = new ScaleAnimation(1.0526f, 1.0f, 1.0526f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation.setDuration(283);
+        scaleAnimation.setInterpolator(fastOutSlowIn());
+        scaleAnimation.setFillEnabled(true);
+        scaleAnimation.setFillBefore(true);
+        scaleAnimation.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation);
+        ScaleAnimation scaleAnimation2 = new ScaleAnimation(0.95f, 1.0f, 0.95f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation2.setDuration(317L);
+        scaleAnimation2.setStartOffset(283);
+        scaleAnimation2.setInterpolator(fastOutSlowIn());
+        scaleAnimation2.setFillEnabled(true);
+        scaleAnimation2.setFillBefore(true);
+        scaleAnimation2.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation2);
+        return animationSet;
+    }
+
+    private static Animation getTaskCloseExitAnim(){
+        AnimationSet animationSet = new AnimationSet(false);
+        TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -1.0499878f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f);
+        translateAnimation.setDuration(383L);
+        translateAnimation.setStartOffset(50);
+        translateAnimation.setInterpolator(aggressiveEase());
+        translateAnimation.setFillEnabled(true);
+        translateAnimation.setFillBefore(true);
+        translateAnimation.setFillAfter(true);
+        animationSet.addAnimation(translateAnimation);
+        ScaleAnimation scaleAnimation = new ScaleAnimation(1.0f, 0.95f, 1.0f, 0.95f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+        scaleAnimation.setDuration(283);
+        scaleAnimation.setInterpolator(fastOutSlowIn());
+        scaleAnimation.setFillEnabled(true);
+        scaleAnimation.setFillBefore(true);
+        scaleAnimation.setFillAfter(true);
+        animationSet.addAnimation(scaleAnimation);
+        return animationSet;
+    }
+
+    private static Interpolator fastOutSlowIn() {
+        return new PathInterpolator(0.4F, 0.0F, 0.2F, 1.0F);
+    }
+
+    private static Interpolator activityCloseDim() {
+        return new PathInterpolator(0.33f, 0.0f, 1.0f, 1.0f);
+    }
+
+    private static Interpolator aggressiveEase() {
+        return new PathInterpolator(0.2f, 0.0f, 0.0f, 1.0f);
+    }
+
+    private static Interpolator fastOutExtraSlowIn() {
+        return new PathInterpolator(PathParser.createPathFromPathData("M 0,0 C 0.05, 0, 0.133333, 0.06, 0.166666, 0.4 C 0.208333, 0.82, 0.25, 1, 1, 1"));
+    }
+
+    private static Animation loadAnimationFromXml(Context context,int id) {
         XmlResourceParser parser = null;
         try {
             parser = context.getResources().getAnimation(id);
diff --git a/core/java/android/view/animation/ClipRectAnimation.java b/core/java/android/view/animation/ClipRectAnimation.java
index e194927e830..c0ae43f6a44 100644
--- a/core/java/android/view/animation/ClipRectAnimation.java
+++ b/core/java/android/view/animation/ClipRectAnimation.java
@@ -17,6 +17,7 @@
 package android.view.animation;
 
 import android.graphics.Rect;
+import android.graphics.RectF;
 
 /**
  * An animation that controls the clip of an object. See the
@@ -26,8 +27,12 @@
  * @hide
  */
 public class ClipRectAnimation extends Animation {
+    protected RectF mFromRectF = new RectF();
+    protected RectF mToRectF = new RectF();
     protected Rect mFromRect = new Rect();
     protected Rect mToRect = new Rect();
+    protected Rect mResolvedFrom = new Rect();
+    protected Rect mResolvedTo = new Rect();
 
     /**
      * Constructor to use when building a ClipRectAnimation from code
@@ -50,14 +55,35 @@ public ClipRectAnimation(int fromL, int fromT, int fromR, int fromB,
             int toL, int toT, int toR, int toB) {
         mFromRect.set(fromL, fromT, fromR, fromB);
         mToRect.set(toL, toT, toR, toB);
+        mFromRectF.set(1.0f, 1.0f, 1.0f, 1.0f);
+        mToRectF.set(1.0f, 1.0f, 1.0f, 1.0f);
+    }
+
+    public ClipRectAnimation(float fromL, float fromT, float fromR, float fromB,
+                             float toL, float toT, float toR, float toB) {
+        mFromRectF.set(fromL, fromT, fromR, fromB);
+        mToRectF.set(toL, toT, toR, toB);
+    }
+
+    @Override
+    public void initialize(int width, int height, int parentWidth, int parentHeight) {
+        super.initialize(width, height, parentWidth, parentHeight);
+        mResolvedFrom.left = (int) resolveSize(RELATIVE_TO_SELF, mFromRectF.left, width, parentWidth);
+        mResolvedFrom.top = (int) resolveSize(RELATIVE_TO_SELF, mFromRectF.top, height, parentHeight);
+        mResolvedFrom.right = (int) resolveSize(RELATIVE_TO_SELF, mFromRectF.right, width, parentWidth);
+        mResolvedFrom.bottom = (int) resolveSize(RELATIVE_TO_SELF, mFromRectF.bottom, height, parentHeight);
+        mResolvedTo.left = (int) resolveSize(RELATIVE_TO_SELF, mToRectF.left, width, parentWidth);
+        mResolvedTo.top = (int) resolveSize(RELATIVE_TO_SELF, mToRectF.top, height, parentHeight);
+        mResolvedTo.right = (int) resolveSize(RELATIVE_TO_SELF, mToRectF.right, width, parentWidth);
+        mResolvedTo.bottom = (int) resolveSize(RELATIVE_TO_SELF, mToRectF.bottom, height, parentHeight);
     }
 
     @Override
     protected void applyTransformation(float it, Transformation tr) {
-        int l = mFromRect.left + (int) ((mToRect.left - mFromRect.left) * it);
-        int t = mFromRect.top + (int) ((mToRect.top - mFromRect.top) * it);
-        int r = mFromRect.right + (int) ((mToRect.right - mFromRect.right) * it);
-        int b = mFromRect.bottom + (int) ((mToRect.bottom - mFromRect.bottom) * it);
+        int l = mResolvedFrom.left + (int) ((mResolvedTo.left - mResolvedFrom.left) * it);
+        int t = mResolvedFrom.top + (int) ((mResolvedTo.top - mResolvedFrom.top) * it);
+        int r = mResolvedFrom.right + (int) ((mResolvedTo.right - mResolvedFrom.right) * it);
+        int b = mResolvedFrom.bottom + (int) ((mResolvedTo.bottom - mResolvedFrom.bottom) * it);
         tr.setClipRect(l, t, r, b);
     }
 
