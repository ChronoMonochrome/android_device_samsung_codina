From 71263d08d986c8fb7ea6b9981da6263a9e9d5475 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 5 Nov 2015 21:48:19 +0200
Subject: [PATCH] screenrecord: try to fix it

- use 400x240 resolution to avoid gralloc running out of memory
- force audio mic as source (we don't support AUDIO_SOURCE_REMOTE_SUBMIX source at all)
- lower bitrate

changing resolution seems to not work (?)

I/OMXClient( 3225): Using client-side OMX mux.
D/        ( 1757): In STEOMXCodecsPlugin:: makeComponentInstance
D/        ( 1757):  OMX.ST.VFM.H264Enc
I/OmxILOsalProperty( 1757): GetProperty ste.video.dec.out.reorder =>
I/OmxILOsalProperty( 1757): GetProperty ste.video.dec.recycle.delay => 1
W/ste-syslog-mediaserver( 1757): Initializing ste-syslog
I/ste-syslog-mediaserver( 1757): Logging to logcat messages from priority 5 (ANDROID_LOG_WARN)
I/ste-syslog-mediaserver( 1757): Re-arming watch on '/data/ste-debug/dump/mediaserver'
I/ste-syslog-mediaserver( 1757): Opening '/data/ste-debug/dump/mediaserver' under lock
I/ste-syslog-mediaserver( 1757): Re-armed watch on '/data/ste-debug/dump/mediaserver'
I/ste-syslog-mediaserver( 1757): Entering inotify thread wait loop, monitoring actions in /data/ste-debug/dump/mediaserver
I/OmxILOsalProperty( 1757): GetProperty ste.video.decoder.h264.max.lev =>
I/OmxILOsalProperty( 1757): GetProperty ste.video.enc.out.buffercnt => 5
I/ENSWrapper( 1757): initOMXWrapperServices
I/ENSWrapper( 1757): ASIC_ID=2
I/ENSWrapper( 1757): initOMXWrapperServices Done
I/ENSWrapper( 1757): initENSWrapperServices
I/ENSWrapper( 1757): initNMFWrapperServices
I/ENSWrapper( 1757): initNMFWrapperServices: Enabling CM ULP mode
I/ENSWrapper( 1757): initNMFWrapperServices Done
I/ENSWrapper( 1757): initENSWrapperServices Done
I/OmxILOsalProductId( 1757): PRODUCT_ID_8500A
I/OmxILOsalProductId( 1757): PRODUCT_ID_8500A
I/OmxILOsalProductId( 1757): PRODUCT_ID_8500A
I/ACodec  ( 3225): setupVideoEncoder succeeded
D/MMHWBuffer( 1757): Open (aComponent=0x40006c50, aIndex=0x7fff0000)
E/VFM     ( 1757):  ! setParameter RETURN_OMX_ERROR_IF_ERROR, condition=ENS_Component::setParameter(nParamIndex, pt), error=-2147479526(0x8000101a)(_error) /hom
e/se.infra/jenkins1/workspace/HUDSON_SNMC_JELLYBEAN_STEM-CODINA_EUR/android/vendor/st-ericsson/variant/multimedia/video/vfm/src/VFM_Component.cpp:272
E/OSI-Trace( 1757):  ! setParameter RETURN_OMX_ERROR_IF_ERROR, condition=VFM_Component::setParameter(nParamIndex, pt), error=-2147479526(0x8000101a)(_error) /ho
me/se.infra/jenkins1/workspace/HUDSON_SNMC_JELLYBEAN_STEM-CODINA_EUR/android/vendor/st-ericsson/variant/multimedia/video/components/h264enc/proxy_ddep/src/H264Enc_Proxy.cpp:235
E/ENSWrapper( 1757): return OMX_ErrorUnsupportedIndex - SetParameter OMX.ST.VFM.H264Enc h=0x40006c50
E/OMXNodeInstance( 1757): OMX_EnableAndroidNativeBuffers failed with error -2147479526 (0x8000101a)
D/MMHWBuffer( 1757): Create (iBuffers=2, iSize=12, iAlignment=256, iCacheAttr=2, aComponent=0x40006c50)
D/MMHWBuffer( 1757): Create returns bHandle=0x4009fc90 bPool=0x4009fc38
D/MMHWBuffer( 1757): Create (iBuffers=5, iSize=192000, iAlignment=256, iCacheAttr=1, aComponent=0x40006c50)
D/MMHWBuffer( 1757): Create returns bHandle=0x400806b8 bPool=0x40080660
V/OmxILOsalPrm( 1757): ChangeResourceState(0, 100, 0x424fc078)
V/OmxILOsalPrm( 1757): updateSocDvfsOpp 100
V/OmxILOsalPrm( 1757): ChangeResourceState(1, 100, 0x424fc078)
V/OmxILOsalPrm( 1757): updateDDROpp 100
V/OmxILOsalPrm( 1757): ChangeResourceState(2, 20, 0x424fc008)
W/OmxILOsalPrm( 1757): updatePwrResLatency not implemented
E/gralloc ( 1754): gralloc_alloc: gralloc_alloc_framebuffer (google) failed, Out of memory
E/FramebufferNativeWindow( 1754): fb buffer 0 allocation failed w=480, h=800, err=Out of memory
I/sec_anm_ahi( 1757): getInputBufferSize() samplerate 48000, format 1, channels2 - returned buffer size = 3840
V/AudioPolicyManagerBase( 1757): getDeviceForInputSource()input source 1, device 00100000
V/AudioPolicyManagerBase( 1757): getInput() inputSource 1, samplingRate 48000, format 1, channelMask c, acoustics 0
I/sec_anm_ahi( 1757): Enter openInputStream() - format 1, channels 0x0000000C (2), samplerate 48000
I/sec_anm_ahi_input( 1757): AudioStreamInANM created.
V/sec_anm_ahi( 1757): lock()
I/sec_anm_ahi_input( 1757): setup() format 1, channels c (2), samplerate 48000
I/sec_anm_ahi_input( 1757): adm_api: ste_adm_client_connect(): 32
I/sec_anm_ahi_input( 1757): setMicMute(false)
I/sec_anm_ahi_input( 1757): [0] updateState(-1 -> 0)
I/sec_anm_ahi_input( 1757): [0] changeDevice state(-1->0) inputSource(0->0) device(00100000->00100000) deviceChanged(1, 1) notify(0)
I/sec_anm_ahi_input( 1757): [0] updateDeviceList(0)
I/sec_anm_ahi( 1757): Successfully set up input stream
I/sec_anm_ahi( 1757): Exit openInputStream() - format 1, channels 0x0000000C (2), samplerate 48000
V/sec_anm_ahi( 1757): unlock()
I/sec_anm_ahi_input( 1757): bufferSize() 960
I/sec_anm_ahi_input( 1757): [0] standby() called
I/sec_anm_ahi_input( 1757): [0] standby() called
V/AudioPolicyManagerBase( 1757): startInput() input 8
V/AudioPolicyManagerBase( 1757): getDeviceForInputSource()input source 1, device 00100000
V/AudioPolicyManagerBase( 1757): AudioPolicyManager::startInput() input source = 1
I/sec_anm_ahi_input( 1757): [0] openDevices()
I/sec_anm_organ_switcher( 1757): adm_api: ste_adm_client_set_toplevel_map(Mic, REF_Mic_Main_Recording)
I/sec_anm_ahi_input( 1757): adm_api: [0] ste_adm_client_open_device(Mic)
D/MMHWBuffer( 1757): Create (iBuffers=25, iSize=160, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x4002fb38 bPool=0x4002fae0
D/MMHWBuffer( 1757): Create (iBuffers=12, iSize=320, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x4002fc18 bPool=0x4002fbc0
D/MMHWBuffer( 1757): Create (iBuffers=32, iSize=32, iAlignment=8, iCacheAttr=2,aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x4002fcf8 bPool=0x4002fca0
D/MMHWBuffer( 1757): Create (iBuffers=32, iSize=16, iAlignment=8, iCacheAttr=2,aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x4002fe10 bPool=0x4002fdb8
D/MMHWBuffer( 1757): Create (iBuffers=2, iSize=1600, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x4002fef0 bPool=0x4002fe98
D/MMHWBuffer( 1757): Create (iBuffers=1, iSize=13920, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x42b40f18 bPool=0x4002ff78
D/MMHWBuffer( 1757): Create (iBuffers=1, iSize=64000, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x425efa18 bPool=0x425ef9c0
D/MMHWBuffer( 1757): Destroy (bHandle=0x425efa18)
D/MMHWBuffer( 1757): Create (iBuffers=1, iSize=64000, iAlignment=8, iCacheAttr=2, aComponent=0x00000000)
D/MMHWBuffer( 1757): Create returns bHandle=0x425efa18 bPool=0x425ef9c0
D/MMHWBuffer( 1757): Destroy (bHandle=0x425efa18)
I/sec_anm_ahi_input( 1757): adm_api: opened device. bufsz=960 num_bufs=3 bufp=400C3000
I/OMXClient( 3225): Using client-side OMX mux.
D/        ( 3225): In STEOMXCodecsPlugin:: Constructor
D/        ( 3225): In STEOMXCodecsPlugin:: dlopen passed
I/ENSLoader( 3225): Scanning directory /system/lib/ste_omxcomponents/ for STE EN
S based components
E/ENSLoader( 3225): failed to load /system/lib/ste_omxcomponents/libste_cscall.so: dlopen failed: could not load library libste_dec_amr.so needed by libste_c

Change-Id: Iaf85624705079de02d88d72f32337382b65384cb
---
 cmds/screenrecord/screenrecord.cpp | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/cmds/screenrecord/screenrecord.cpp b/cmds/screenrecord/screenrecord.cpp
index e851412..824b1674 100644
--- a/cmds/screenrecord/screenrecord.cpp
+++ b/cmds/screenrecord/screenrecord.cpp
@@ -70,8 +70,8 @@ using namespace android;
 static const uint32_t kMinBitRate = 100000;         // 0.1Mbps
 static const uint32_t kMaxBitRate = 100 * 1000000;  // 100Mbps
 static const uint32_t kMaxTimeLimitSec = 30*60;     // 30 minutes
-static const uint32_t kFallbackWidth = 1280;        // 720p
-static const uint32_t kFallbackHeight = 720;
+static const uint32_t kFallbackWidth = 800;        // 480p
+static const uint32_t kFallbackHeight = 480;
 
 // Build-time parameters.
 #ifdef LANDSCAPE_ONLY
@@ -84,10 +84,11 @@ static bool gLandscapeOnly = false;
 static bool gVerbose = false;               // chatty on stdout
 static bool gRotate = false;                // rotate 90 degrees
 static bool gSizeSpecified = false;         // was size explicitly requested?
-static uint32_t gVideoWidth = 0;            // default width+height
-static uint32_t gVideoHeight = 0;
-static uint32_t gBitRate = 4000000;         // 4Mbps
+static uint32_t gVideoWidth = 400;            // default width+height
+static uint32_t gVideoHeight = 240;
+static uint32_t gBitRate = 1000000;         // 1Mbps
 static uint32_t gTimeLimitSec = kMaxTimeLimitSec;
+#define DEVICE_FORCE_AUDIO_MIC
 #ifdef DEVICE_FORCE_AUDIO_MIC
 static audio_source_t gAudioInput = AUDIO_SOURCE_MIC;
 #else
@@ -343,12 +344,12 @@ static status_t prepareVirtualDisplay(const DisplayInfo& mainDpyInfo,
     bool deviceRotated = isDeviceRotated(mainDpyInfo.orientation);
     uint32_t sourceWidth, sourceHeight;
     if (!deviceRotated) {
-        sourceWidth = mainDpyInfo.w;
-        sourceHeight = mainDpyInfo.h;
+        sourceWidth = 240;
+        sourceHeight = 400;
     } else {
         ALOGV("using rotated width/height");
-        sourceHeight = mainDpyInfo.w;
-        sourceWidth = mainDpyInfo.h;
+        sourceHeight = 240;
+        sourceWidth = 400;
     }
     Rect layerStackRect(sourceWidth, sourceHeight);
 
@@ -650,16 +651,16 @@ static status_t recordScreen(const char* fileName) {
     }
     if (gVerbose) {
         printf("Main display is %dx%d @%.2ffps (orientation=%u)\n",
-                mainDpyInfo.w, mainDpyInfo.h, mainDpyInfo.fps,
+                240, 400, mainDpyInfo.fps,
                 mainDpyInfo.orientation);
     }
 
     bool rotated = isDeviceRotated(mainDpyInfo.orientation);
     if (gVideoWidth == 0) {
-        gVideoWidth = rotated ? mainDpyInfo.h : mainDpyInfo.w;
+        gVideoWidth = rotated ? 400 : 240;
     }
     if (gVideoHeight == 0) {
-        gVideoHeight = rotated ? mainDpyInfo.w : mainDpyInfo.h;
+        gVideoHeight = rotated ? 240 : 400;
     }
 
     // Some devices cannot handle encoding tall height (> 720), so we
@@ -684,7 +685,7 @@ static status_t recordScreen(const char* fileName) {
         uint32_t newWidth = needSwap ? kFallbackHeight : kFallbackWidth;
         uint32_t newHeight = needSwap ? kFallbackWidth : kFallbackHeight;
         if (gVideoWidth != newWidth && gVideoHeight != newHeight) {
-            ALOGV("Retrying with 720p");
+            ALOGV("Retrying with 480p");
             fprintf(stderr, "WARNING: failed at %dx%d, retrying at %dx%d\n",
                     gVideoWidth, gVideoHeight, newWidth, newHeight);
             gVideoWidth = newWidth;
@@ -718,7 +719,6 @@ static status_t recordScreen(const char* fileName) {
     if (gRotate) {
         muxer->setOrientationHint(autoRotated ? 270 : 90);
     }
-
     // Main encoder loop.
     err = runEncoder(encoder, audioEncoder, audioSource, audioEncoderInBuf, muxer);
     if (err != NO_ERROR) {
-- 
1.9.1

