From 6959d0db922f448d9646cbbdf485e5ea50099198 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Tue, 20 Oct 2015 11:07:25 +0300
Subject: [PATCH 08/10] Revert "av fix"

This reverts commit 1c932100a8304e9696c6bfb14741a003fd64536c.
---
 include/media/stagefright/ColorConverter.h         |   5 -
 include/media/stagefright/MediaDefs.h              |   6 -
 include/media/stagefright/OMXCodec.h               |   7 -
 media/libstagefright/ACodec.cpp                    |   0
 media/libstagefright/CameraSource.cpp              |  30 +----
 media/libstagefright/MediaDefs.cpp                 |   6 -
 media/libstagefright/OMXCodec.cpp                  |  42 ------
 .../colorconversion/ColorConverter.cpp             | 145 ---------------------
 8 files changed, 7 insertions(+), 234 deletions(-)
 mode change 100755 => 100644 media/libstagefright/ACodec.cpp

diff --git a/include/media/stagefright/ColorConverter.h b/include/media/stagefright/ColorConverter.h
index e34791c..85ba920 100644
--- a/include/media/stagefright/ColorConverter.h
+++ b/include/media/stagefright/ColorConverter.h
@@ -72,11 +72,6 @@ private:
 
     status_t convertQCOMYUV420SemiPlanar(
             const BitmapParams &src, const BitmapParams &dst);
-			
-#ifdef STE_HARDWARE
-    status_t convertSTEYUV420PackedSemiPlanarMB(
-            const BitmapParams &src, const BitmapParams &dst);
-#endif
 
     status_t convertYUV420SemiPlanar(
             const BitmapParams &src, const BitmapParams &dst);
diff --git a/include/media/stagefright/MediaDefs.h b/include/media/stagefright/MediaDefs.h
index 7bcca80..21eb04a 100644
--- a/include/media/stagefright/MediaDefs.h
+++ b/include/media/stagefright/MediaDefs.h
@@ -28,14 +28,8 @@ extern const char *MEDIA_MIMETYPE_VIDEO_AVC;
 extern const char *MEDIA_MIMETYPE_VIDEO_HEVC;
 extern const char *MEDIA_MIMETYPE_VIDEO_MPEG4;
 extern const char *MEDIA_MIMETYPE_VIDEO_H263;
-#ifdef STE_HARDWARE
-extern const char *MEDIA_MIMETYPE_VIDEO_H263_SW;
-#endif
 extern const char *MEDIA_MIMETYPE_VIDEO_MPEG2;
 extern const char *MEDIA_MIMETYPE_VIDEO_RAW;
-#ifdef STE_HARDWARE
-extern const char *MEDIA_MIMETYPE_VIDEO_VC1;
-#endif
 
 extern const char *MEDIA_MIMETYPE_AUDIO_AMR_NB;
 extern const char *MEDIA_MIMETYPE_AUDIO_AMR_WB;
diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index 1b9cb16..7fabcb3 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -86,10 +86,6 @@ struct OMXCodec : public MediaSource,
     // from MediaBufferObserver
     virtual void signalBufferReturned(MediaBuffer *buffer);
 
-#ifdef STE_HARDWARE
-    static uint32_t OmxToHALFormat(OMX_COLOR_FORMATTYPE omxValue);
-#endif
-
     enum Quirks {
         kNeedsFlushBeforeDisable              = 1,
         kWantsNALFragments                    = 2,
@@ -104,9 +100,6 @@ struct OMXCodec : public MediaSource,
         kSupportsMultipleFramesPerInputBuffer = 1024,
         kRequiresLargerEncoderOutputBuffer    = 2048,
         kOutputBuffersAreUnreadable           = 4096,
-#ifdef STE_HARDWARE
-        kRequiresStoreMetaDataBeforeIdle      = 16384,
-#endif
     };
 
     struct CodecNameAndQuirks {
diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
old mode 100755
new mode 100644
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
index 5645d42..66280da 100644
--- a/media/libstagefright/CameraSource.cpp
+++ b/media/libstagefright/CameraSource.cpp
@@ -122,12 +122,6 @@ static int32_t getColorFormat(const char* colorFormat) {
        return OMX_TI_COLOR_FormatYUV420PackedSemiPlanar;
     }
 
-#ifdef STE_HARDWARE
-    if (!strcmp(colorFormat, CameraParameters::PIXEL_FORMAT_YUV420MB)) {
-       return OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB;
-    }
-#endif
-
     if (!strcmp(colorFormat, CameraParameters::PIXEL_FORMAT_ANDROID_OPAQUE)) {
         return OMX_COLOR_FormatAndroidOpaque;
     }
@@ -573,23 +567,13 @@ status_t CameraSource::initWithCameraAccess(
 
     // XXX: query camera for the stride and slice height
     // when the capability becomes available.
-#ifdef STE_HARDWARE
-    int stride = newCameraParams.getInt(CameraParameters::KEY_RECORD_STRIDE);
-    int sliceHeight = newCameraParams.getInt(CameraParameters::KEY_RECORD_SLICE_HEIGHT);
-#endif
-     mMeta = new MetaData;
-     mMeta->setCString(kKeyMIMEType,  MEDIA_MIMETYPE_VIDEO_RAW);
-     mMeta->setInt32(kKeyColorFormat, mColorFormat);
-     mMeta->setInt32(kKeyWidth,       mVideoSize.width);
-     mMeta->setInt32(kKeyHeight,      mVideoSize.height);
-#ifdef STE_HARDWARE
-    mMeta->setInt32(kKeyStride,      stride != -1 ? stride : mVideoSize.width);
-    mMeta->setInt32(kKeySliceHeight, sliceHeight != -1 ? sliceHeight : mVideoSize.height);
-#else
-     mMeta->setInt32(kKeyStride,      mVideoSize.width);
-     mMeta->setInt32(kKeySliceHeight, mVideoSize.height);
-#endif
-
+    mMeta = new MetaData;
+    mMeta->setCString(kKeyMIMEType,  MEDIA_MIMETYPE_VIDEO_RAW);
+    mMeta->setInt32(kKeyColorFormat, mColorFormat);
+    mMeta->setInt32(kKeyWidth,       mVideoSize.width);
+    mMeta->setInt32(kKeyHeight,      mVideoSize.height);
+    mMeta->setInt32(kKeyStride,      mVideoSize.width);
+    mMeta->setInt32(kKeySliceHeight, mVideoSize.height);
     mMeta->setInt32(kKeyFrameRate,   mVideoFrameRate);
     return OK;
 }
diff --git a/media/libstagefright/MediaDefs.cpp b/media/libstagefright/MediaDefs.cpp
index 2c8d54d..2a50692 100644
--- a/media/libstagefright/MediaDefs.cpp
+++ b/media/libstagefright/MediaDefs.cpp
@@ -26,14 +26,8 @@ const char *MEDIA_MIMETYPE_VIDEO_AVC = "video/avc";
 const char *MEDIA_MIMETYPE_VIDEO_HEVC = "video/hevc";
 const char *MEDIA_MIMETYPE_VIDEO_MPEG4 = "video/mp4v-es";
 const char *MEDIA_MIMETYPE_VIDEO_H263 = "video/3gpp";
-#ifdef STE_HARDWARE
-const char *MEDIA_MIMETYPE_VIDEO_H263_SW = "video/3gpp-sw";
-#endif
 const char *MEDIA_MIMETYPE_VIDEO_MPEG2 = "video/mpeg2";
 const char *MEDIA_MIMETYPE_VIDEO_RAW = "video/raw";
-#ifdef STE_HARDWARE
-const char *MEDIA_MIMETYPE_VIDEO_VC1 = "video/vc1";
-#endif
 
 const char *MEDIA_MIMETYPE_AUDIO_AMR_NB = "audio/3gpp";
 const char *MEDIA_MIMETYPE_AUDIO_AMR_WB = "audio/amr-wb";
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index b5e34e8..b1dde80 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -195,20 +195,6 @@ static int CompareSoftwareCodecsFirst(
     return 0;
 }
 
-#ifdef STE_HARDWARE
-uint32_t OMXCodec::OmxToHALFormat(OMX_COLOR_FORMATTYPE omxValue) {
-    switch (omxValue) {
-        case OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB:
-            return HAL_PIXEL_FORMAT_YCBCR42XMBN;
-        case OMX_COLOR_FormatYUV420Planar:
-            return HAL_PIXEL_FORMAT_YCbCr_420_P;
-        default:
-            ALOGI("Unknown OMX pixel format (0x%X), passing it on unchanged", omxValue);
-            return omxValue;
-    }
-}
-#endif
-
 // static
 void OMXCodec::findMatchingCodecs(
         const char *mime,
@@ -279,11 +265,6 @@ uint32_t OMXCodec::getComponentQuirks(
         quirks |= kOutputBuffersAreUnreadable;
     }
 
-#ifdef STE_HARDWARE
-    if (info->hasQuirk("requires-store-metadata-before-idle")) {
-      quirks |= kRequiresStoreMetaDataBeforeIdle;
-    }
-#endif
     return quirks;
 }
 
@@ -830,10 +811,6 @@ static size_t getFrameSize(
         case OMX_COLOR_FormatYUV420Planar:
         case OMX_COLOR_FormatYUV420SemiPlanar:
         case OMX_TI_COLOR_FormatYUV420PackedSemiPlanar:
-#ifdef STE_HARDWARE
-        case OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB:
-#endif
-
         /*
         * FIXME: For the Opaque color format, the frame size does not
         * need to be (w*h*3)/2. It just needs to
@@ -1519,10 +1496,6 @@ void OMXCodec::setComponentRole(
             "video_decoder.mpeg4", "video_encoder.mpeg4" },
         { MEDIA_MIMETYPE_VIDEO_H263,
             "video_decoder.h263", "video_encoder.h263" },
-#ifdef STE_HARDWARE
-        { MEDIA_MIMETYPE_VIDEO_VC1,
-            "video_decoder.vc1", "video_encoder.vc1" },
-#endif
         { MEDIA_MIMETYPE_VIDEO_VP8,
             "video_decoder.vp8", "video_encoder.vp8" },
         { MEDIA_MIMETYPE_VIDEO_VP9,
@@ -1606,16 +1579,6 @@ status_t OMXCodec::init() {
     CHECK_EQ((int)mState, (int)LOADED);
 
     status_t err;
-#ifdef STE_HARDWARE
-    if ((mQuirks & kRequiresStoreMetaDataBeforeIdle)
-        && (mFlags & kStoreMetaDataInVideoBuffers)) {
-        err = mOMX->storeMetaDataInBuffers(mNode, kPortIndexInput, OMX_TRUE);
-        if (err != OK) {
-            ALOGE("Storing meta data in video buffers is not supported");
-            return err;
-        }
-    }
-#endif
     if (!(mQuirks & kRequiresLoadedToIdleAfterAllocation)) {
         err = mOMX->sendCommand(mNode, OMX_CommandStateSet, OMX_StateIdle);
         CHECK_EQ(err, (status_t)OK);
@@ -1671,12 +1634,7 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
     }
 
     status_t err = OK;
-#ifdef STE_HARDWARE
-    if (!(mQuirks & kRequiresStoreMetaDataBeforeIdle)
-            && (mFlags & kStoreMetaDataInVideoBuffers)
-#else
     if ((mFlags & kStoreMetaDataInVideoBuffers)
-#endif
             && portIndex == kPortIndexInput) {
         err = mOMX->storeMetaDataInBuffers(mNode, kPortIndexInput, OMX_TRUE);
         if (err != OK) {
diff --git a/media/libstagefright/colorconversion/ColorConverter.cpp b/media/libstagefright/colorconversion/ColorConverter.cpp
index a85ad72..597167f 100644
--- a/media/libstagefright/colorconversion/ColorConverter.cpp
+++ b/media/libstagefright/colorconversion/ColorConverter.cpp
@@ -47,9 +47,6 @@ bool ColorConverter::isValid() const {
         case OMX_QCOM_COLOR_FormatYVU420SemiPlanar:
         case OMX_COLOR_FormatYUV420SemiPlanar:
         case OMX_TI_COLOR_FormatYUV420PackedSemiPlanar:
-#ifdef STE_HARDWARE
-        case OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB:
-#endif
             return true;
 
         default:
@@ -125,12 +122,6 @@ status_t ColorConverter::convert(
             err = convertTIYUV420PackedSemiPlanar(src, dst);
             break;
 
-#ifdef STE_HARDWARE
-        case OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB:
-            err = convertSTEYUV420PackedSemiPlanarMB(src, dst);
-            break;
-#endif
-
         default:
         {
             CHECK(!"Should not be here. Unknown color conversion.");
@@ -515,142 +506,6 @@ status_t ColorConverter::convertTIYUV420PackedSemiPlanar(
     return OK;
 }
 
-#ifdef STE_HARDWARE
-status_t ColorConverter::convertSTEYUV420PackedSemiPlanarMB(
-        const BitmapParams &src, const BitmapParams &dst) {
-
-    if (!((dst.mWidth & 1) == 0
-            && src.mCropLeft == 0
-            && src.mCropTop == 0
-            && src.cropWidth() == dst.cropWidth()
-            && src.cropHeight() == dst.cropHeight())) {
-        return ERROR_UNSUPPORTED;
-    }
-
-    OMX_U32 mx = src.mWidth / 16;
-    OMX_U32 my = src.mHeight / 16;
-    OMX_U32 lx, ly;
-    OMX_U32 *pChroma, *pLuma = (OMX_U32 *)src.mBits;
-
-    pChroma = (OMX_U32 *)src.mBits + mx * my * 64;
-    for (ly = 0; ly < my; ly++) {
-        for (lx = 0; lx < mx; lx++) {
-            OMX_U32 col, row, lumaWord, chromaWord1 = 0, rgbWord, i;
-            OMX_U8 y[4], cb[4], cr[4], r[4], g[4], b[4];
-            OMX_U32 *dstBuf, *locBuf;
-            OMX_U32 *pBurstLuma = 0, *pBurstChroma = 0;
-            OMX_U32 *pWordLuma = 0, *pWordChroma = 0;
-            OMX_U8 nbOfBlock;
-
-            dstBuf = ((OMX_U32 *)dst.mBits) + (ly * 16) * dst.mWidth / 2;
-            dstBuf += (lx * 16) / 2;
-
-            pBurstLuma = pLuma;
-            pBurstChroma = pChroma;
-
-            for (col = 0; col < 2; col++) {
-                // conversion of a macroblock
-                for (nbOfBlock = 0; nbOfBlock < 2; nbOfBlock++) {
-                    locBuf = dstBuf + 4 * col + 2 * nbOfBlock;
-                    OMX_U32 dstRowOrigo = ly * 16 * dst.mWidth;
-
-                    switch (nbOfBlock) {
-                    case 0:
-                        pWordLuma = pBurstLuma;
-                        pWordChroma = pBurstChroma;
-                        break;
-                    case 1:
-                        pWordLuma = pBurstLuma + 1;
-                        pWordChroma = pBurstChroma + 1;
-                        break;
-                    }
-                    for (row = 0; row < 16; row++) {
-                        // Check for cropping on the y axis
-                        if (ly * 16 + row >= dst.mHeight) {
-                            break;
-                        }
-
-                        lumaWord = *pWordLuma;
-                        pWordLuma += 2;
-                        if (row % 2 == 0) {
-                            chromaWord1 = *pWordChroma;
-                            pWordChroma += 2;
-                        }
-
-                        y[3] = ((lumaWord >> 24) & 0xff);
-                        y[2] = ((lumaWord >> 16) & 0xff);
-                        y[1] = ((lumaWord >>  8) & 0xff);
-                        y[0] = ((lumaWord >>  0) & 0xff);
-
-                        cb[0] = cb[1] = ((chromaWord1 >>  0) & 0xff);
-                        cb[2] = cb[3] = ((chromaWord1 >> 16) & 0xff);
-                        cr[0] = cr[1] = ((chromaWord1 >>  8) & 0xff);
-                        cr[2] = cr[3] = ((chromaWord1 >> 24) & 0xff);
-
-                        for (i = 0; i < 4; i++) {
-                            int32_t rW,gW,bW;
-
-                            rW = 298 * y[i] + 408 * cr[i] - 57059;
-                            gW = 298 * y[i] - 100 * cb[i] - 208 * cr[i] + 34713;
-                            bW = 298 * y[i] + 516 * cb[i] - 70887;
-
-                            if (rW < 0) {
-                                r[i] = 0;
-                            } else if (rW >= 65536) {
-                                r[i] = 255;
-                            } else {
-                                r[i] = (rW >> 8);
-                            }
-                            if (gW < 0) {
-                                g[i] = 0;
-                            } else if (gW >= 65536) {
-                                g[i] = 255;
-                            } else {
-                                g[i] = (gW >> 8);
-                            }
-                            if (bW < 0) {
-                                b[i] = 0;
-                            } else if (bW >= 65536) {
-                                b[i] = 255;
-                            } else {
-                                b[i] = (bW >> 8);
-                            }
-                            r[i] >>= 3;
-                            g[i] >>= 2;
-                            b[i] >>= 3;
-                        }
-                        for (i = 0; i < 4; i += 2) {
-                            // Check for cropping on the x axis
-                            OMX_U32 rowPos = (locBuf - (OMX_U32 *)dst.mBits) * 2 - dstRowOrigo;
-                            if (rowPos >= dst.mWidth) {
-                                locBuf++;
-                                continue;
-                            }
-
-                            rgbWord = (r[i + 1] << 27) +
-                                (g[i + 1] << 21) +
-                                (b[i + 1] << 16) +
-                                (r[i] << 11) +
-                                (g[i] << 5) +
-                                (b[i] << 0);
-                            *locBuf++ = rgbWord;
-                        }
-                        locBuf += dst.mWidth / 2 - 2;
-                        dstRowOrigo += dst.mWidth;
-                    } //end of for 16 loop
-                }  //end of 2 block loop
-                pBurstLuma += 32;
-                pBurstChroma += 16;
-            } // end of 2 col loop
-            pLuma   += 64;
-            pChroma += 32;
-        }
-    }
-
-    return OK;
-}
-#endif
-
 uint8_t *ColorConverter::initClip() {
     static const signed kClipMin = -278;
     static const signed kClipMax = 535;
-- 
1.9.1

