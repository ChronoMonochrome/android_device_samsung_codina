Subject: [PATCH] OMXCodec: fix compile error
 OMXCodec: adapt to the upstream API changes

diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 6a932cf..4188908 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -363,7 +363,9 @@ sp<IMediaSource> OMXCodec::Create(
             }
         }
 
-        status_t err = omx->allocateNode(componentName, observer, &node);
+        status_t err = omx->allocateNode(componentName, observer,
+		NULL /* nodeBinder */, &node);
+
         if (err == OK) {
             ALOGV("Successfully allocated OMX node '%s'", componentName);
 
@@ -1693,6 +1695,8 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
     size_t totalSize = def.nBufferCountActual * def.nBufferSize;
     mDealer[portIndex] = new MemoryDealer(totalSize, "OMXCodec");
 
+    sp<NativeHandle> native_handle;
+
     for (OMX_U32 i = 0; i < def.nBufferCountActual; ++i) {
         sp<IMemory> mem = mDealer[portIndex]->allocate(def.nBufferSize);
         CHECK(mem.get() != NULL);
@@ -1708,9 +1712,9 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
             if (mOMXLivesLocally) {
                 mem.clear();
 
-                err = mOMX->allocateBuffer(
+                err = mOMX->allocateSecureBuffer(
                         mNode, portIndex, def.nBufferSize, &buffer,
-                        &info.mData);
+                        &info.mData, &native_handle);
             } else {
                 err = mOMX->allocateBufferWithBackup(
                         mNode, portIndex, mem, &buffer, mem->size());
@@ -1720,9 +1724,9 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
             if (mOMXLivesLocally) {
                 mem.clear();
 
-                err = mOMX->allocateBuffer(
+                err = mOMX->allocateSecureBuffer(
                         mNode, portIndex, def.nBufferSize, &buffer,
-                        &info.mData);
+                        &info.mData, &native_handle);
             } else {
                 err = mOMX->allocateBufferWithBackup(
                         mNode, portIndex, mem, &buffer, mem->size());
@@ -1857,7 +1861,8 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
             def.format.video.eColorFormat,
 #endif
             rotationDegrees,
-            usage | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP);
+            usage | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP,
+            false /* reconnect */);
     if (err != 0) {
         return err;
     }
@@ -4050,7 +4055,7 @@ status_t OMXCodec::initNativeWindow() {
     // Enable use of a GraphicBuffer as the output for this node.  This must
     // happen before getting the IndexParamPortDefinition parameter because it
     // will affect the pixel format that the node reports.
-    status_t err = mOMX->enableGraphicBuffers(mNode, kPortIndexOutput, OMX_TRUE);
+    status_t err = mOMX->enableNativeBuffers(mNode, kPortIndexOutput, OMX_TRUE);
     if (err != 0) {
         return err;
     }
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 4188908..120a48e 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -4054,7 +4054,8 @@ status_t OMXCodec::initNativeWindow() {
     // Enable use of a GraphicBuffer as the output for this node.  This must
     // happen before getting the IndexParamPortDefinition parameter because it
     // will affect the pixel format that the node reports.
-    status_t err = mOMX->enableNativeBuffers(mNode, kPortIndexOutput, OMX_TRUE);
+    status_t err = mOMX->enableNativeBuffers(mNode, kPortIndexOutput, OMX_TRUE /* graphic */,
+		 OMX_TRUE /* enable */);
     if (err != 0) {
         return err;
     }
@@ -4345,7 +4346,8 @@ status_t QueryCodec(
 
     sp<OMXCodecObserver> observer = new OMXCodecObserver;
     IOMX::node_id node;
-    status_t err = omx->allocateNode(componentName, observer, &node);
+    status_t err = omx->allocateNode(componentName, observer,
+			NULL /* nodeBinder */, &node);
 
     if (err != OK) {
         return err;
