From 41a0bd26177810213e78ccb9ebbc351dcc90cb95 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 29 Dec 2016 02:00:33 +0700
Subject: [PATCH 06/46] av: Add support for CameraSource as metadata type

*NativeHandleSource isn't supported by pre-N camera halv1.
*Add support To Use CameraSource as metadata type.
*Also add support for Cameraserver to run as mediaserver which is needed by pre-N camera halv1.
*Fixes Video Recording.
*To enable this hack:
TARGET_HAS_LEGACY_CAMERA_HAL1 := true
BOARD_GLOBAL_CFLAGS += -DMETADATA_CAMERA_SOURCE
media.stagefright.legacyencoder=true
media.stagefright.less-secure=true

[Hamster Tian]: Spotted out the changes required
[Ashwin Ramesh]: properly ifdef the changes and adapt it for CM frameworks_av.
xyyx : some fixes in IOMX.h and MediaCodecSource.h. For AOSP you need to patch build for support BOARD_GLOBAL_CFLAGS - https://github.com/nitrogen-project/android_build/commit/d71af15f04819bc676ee68e8c2c3f269a1fb6618

Change-Id: I321defb215920c41160a59c4fe003c5329746490
---
 cmds/stagefright/Android.mk                        | 12 +++-
 include/media/IOMX.h                               | 10 +++
 include/media/stagefright/CameraSource.h           | 14 +++++
 include/media/stagefright/MediaCodecSource.h       |  2 +
 include/media/stagefright/SurfaceMediaSource.h     | 10 +++
 media/libmedia/IOMX.cpp                            |  9 ++-
 media/libmediaplayerservice/Android.mk             |  8 ++-
 .../libmediaplayerservice/StagefrightRecorder.cpp  | 17 ++++-
 media/libmediaplayerservice/StagefrightRecorder.h  |  7 +++
 media/libstagefright/ACodec.cpp                    | 73 +++++++++++++++++++++-
 media/libstagefright/CameraSource.cpp              | 11 ++++
 media/libstagefright/MediaCodecSource.cpp          |  6 ++
 media/libstagefright/SurfaceMediaSource.cpp        | 42 +++++++++++++
 media/libstagefright/omx/OMXNodeInstance.cpp       | 23 +++++++
 media/libstagefright/tests/Android.mk              |  8 ++-
 media/libstagefright/wifi-display/Android.mk       |  6 +-
 .../wifi-display/source/PlaybackSession.cpp        |  6 ++
 media/mediaserver/main_mediaserver.cpp             |  3 +
 18 files changed, 256 insertions(+), 11 deletions(-)

diff --git a/cmds/stagefright/Android.mk b/cmds/stagefright/Android.mk
index d6626c8..fa8e354 100644
--- a/cmds/stagefright/Android.mk
+++ b/cmds/stagefright/Android.mk
@@ -39,8 +39,12 @@ LOCAL_SHARED_LIBRARIES := \
 
 LOCAL_C_INCLUDES:= \
 	frameworks/av/media/libstagefright \
-	$(TOP)/frameworks/native/include/media/openmax \
+	$(TOP)/frameworks/native/include/media/openmax
+
+ifneq ($(TARGET_HAS_LEGACY_CAMERA_HAL1), true)
+LOCAL_C_INCLUDES += \
 	$(TOP)/frameworks/native/include/media/hardware
+endif
 
 LOCAL_CFLAGS += -Wno-multichar -Werror -Wall
 LOCAL_CLANG := true
@@ -64,8 +68,12 @@ LOCAL_SHARED_LIBRARIES := \
 
 LOCAL_C_INCLUDES:= \
 	frameworks/av/media/libstagefright \
-	$(TOP)/frameworks/native/include/media/openmax \
+	$(TOP)/frameworks/native/include/media/openmax
+
+ifneq ($(TARGET_HAS_LEGACY_CAMERA_HAL1), true)
+LOCAL_C_INCLUDES += \
 	$(TOP)/frameworks/native/include/media/hardware
+endif
 
 LOCAL_CFLAGS += -Wno-multichar -Werror -Wall
 LOCAL_CLANG := true
diff --git a/include/media/IOMX.h b/include/media/IOMX.h
index 1c39b9c..4985a3f 100644
--- a/include/media/IOMX.h
+++ b/include/media/IOMX.h
@@ -278,18 +278,28 @@ struct CodecProfileLevel {
     OMX_U32 mLevel;
 };
 
+#ifdef METADATA_CAMERA_SOURCE
+}   // namespace android
+
+inline static const char *asString(android::MetadataBufferType i, const char *def = "??") {
+#else
 inline static const char *asString(MetadataBufferType i, const char *def = "??") {
+#endif
     using namespace android;
     switch (i) {
         case kMetadataBufferTypeCameraSource:   return "CameraSource";
         case kMetadataBufferTypeGrallocSource:  return "GrallocSource";
         case kMetadataBufferTypeANWBuffer:      return "ANWBuffer";
+#ifndef METADATA_CAMERA_SOURCE
         case kMetadataBufferTypeNativeHandleSource: return "NativeHandleSource";
+#endif
         case kMetadataBufferTypeInvalid:        return "Invalid";
         default:                                return def;
     }
 }
 
+#ifndef METADATA_CAMERA_SOURCE
 }  // namespace android
+#endif // METADATA_CAMERA_SOURCE
 
 #endif  // ANDROID_IOMX_H_
diff --git a/include/media/stagefright/CameraSource.h b/include/media/stagefright/CameraSource.h
index c2e75a6..19449ba 100644
--- a/include/media/stagefright/CameraSource.h
+++ b/include/media/stagefright/CameraSource.h
@@ -28,7 +28,9 @@
 #include <utils/List.h>
 #include <utils/RefBase.h>
 #include <utils/String16.h>
+#ifndef METADATA_CAMERA_SOURCE
 #include <MetadataBufferType.h>
+#endif
 
 namespace android {
 
@@ -115,6 +117,7 @@ public:
      */
     virtual sp<MetaData> getFormat();
 
+#ifndef METADATA_CAMERA_SOURCE
     /**
      * Tell whether this camera source stores meta data or real YUV
      * frame data in video buffers.
@@ -124,6 +127,17 @@ public:
      *      the video buffers.
      */
     MetadataBufferType metaDataStoredInVideoBuffers() const;
+#else
+    /**
+     * Tell whether this camera source stores meta data or real YUV
+     * frame data in video buffers.
+     *
+     * @return true if meta data is stored in the video
+     *      buffers; false if real YUV data is stored in
+     *      the video buffers.
+     */
+    bool isMetaDataStoredInVideoBuffers() const;
+#endif
 
     virtual void signalBufferReturned(MediaBuffer* buffer);
 
diff --git a/include/media/stagefright/MediaCodecSource.h b/include/media/stagefright/MediaCodecSource.h
index 1044ee4..25e6f58 100644
--- a/include/media/stagefright/MediaCodecSource.h
+++ b/include/media/stagefright/MediaCodecSource.h
@@ -37,7 +37,9 @@ struct MediaCodecSource : public MediaSource,
                           public MediaBufferObserver {
     enum FlagBits {
         FLAG_USE_SURFACE_INPUT      = 1,
+#ifdef METADATA_CAMERA_SOURCE
         FLAG_USE_METADATA_INPUT     = 2,
+#endif
         FLAG_PREFER_SOFTWARE_CODEC  = 4,  // used for testing only
     };
 
diff --git a/include/media/stagefright/SurfaceMediaSource.h b/include/media/stagefright/SurfaceMediaSource.h
index 1657a38..236f3e5 100644
--- a/include/media/stagefright/SurfaceMediaSource.h
+++ b/include/media/stagefright/SurfaceMediaSource.h
@@ -25,7 +25,9 @@
 #include <media/stagefright/MediaSource.h>
 #include <media/stagefright/MediaBuffer.h>
 
+#ifndef METADATA_CAMERA_SOURCE
 #include <media/hardware/MetadataBufferType.h>
+#endif
 
 #include "foundation/ABase.h"
 
@@ -111,9 +113,15 @@ public:
     void dump(String8& result, const char* prefix, char* buffer,
                                                     size_t SIZE) const;
 
+#ifndef METADATA_CAMERA_SOURCE
     // metaDataStoredInVideoBuffers tells the encoder what kind of metadata
     // is passed through the buffers. Currently, it is set to ANWBuffer
     MetadataBufferType metaDataStoredInVideoBuffers() const;
+#else
+    // isMetaDataStoredInVideoBuffers tells the encoder whether we will
+    // pass metadata through the buffers. Currently, it is force set to true
+    bool isMetaDataStoredInVideoBuffers() const;
+#endif
 
     sp<IGraphicBufferProducer> getProducer() const { return mProducer; }
 
@@ -236,8 +244,10 @@ private:
 
     Condition mMediaBuffersAvailableCondition;
 
+#ifndef METADATA_CAMERA_SOURCE
     // Allocate and return a new MediaBuffer and pass the ANW buffer as metadata into it.
     void passMetadataBuffer_l(MediaBuffer **buffer, ANativeWindowBuffer *bufferHandle) const;
+#endif
 
     // Avoid copying and equating and default constructor
     DISALLOW_EVIL_CONSTRUCTORS(SurfaceMediaSource);
diff --git a/media/libmedia/IOMX.cpp b/media/libmedia/IOMX.cpp
index 1b4a6e2..aca61b1 100644
--- a/media/libmedia/IOMX.cpp
+++ b/media/libmedia/IOMX.cpp
@@ -438,9 +438,12 @@ public:
         data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
         data.writeInt32((int32_t)node);
         data.writeInt32(port_index);
+#ifndef METADATA_CAMERA_SOURCE
         data.writeInt32((int32_t)enable);
         data.writeInt32(type == NULL ? kMetadataBufferTypeANWBuffer : *type);
-
+#else
+        data.writeInt32((uint32_t)enable);
+#endif
         remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);
 
         // read type even storeMetaDataInBuffers failed
@@ -1050,7 +1053,11 @@ status_t BnOMX::onTransact(
             OMX_U32 port_index = data.readInt32();
             OMX_BOOL enable = (OMX_BOOL)data.readInt32();
 
+#ifndef METADATA_CAMERA_SOURCE
             MetadataBufferType type = (MetadataBufferType)data.readInt32();
+#else
+            MetadataBufferType type = kMetadataBufferTypeInvalid;
+#endif
             status_t err = storeMetaDataInBuffers(node, port_index, enable, &type);
 
             reply->writeInt32(type);
diff --git a/media/libmediaplayerservice/Android.mk b/media/libmediaplayerservice/Android.mk
index b175453..41f762f 100644
--- a/media/libmediaplayerservice/Android.mk
+++ b/media/libmediaplayerservice/Android.mk
@@ -54,13 +54,17 @@ LOCAL_C_INCLUDES :=                                                 \
     $(TOP)/frameworks/av/include/media                              \
     $(TOP)/frameworks/av/include/camera                             \
     $(TOP)/frameworks/native/include/media/openmax                  \
-    $(TOP)/frameworks/native/include/media/hardware                 \
     $(TOP)/external/tremolo/Tremolo                                 \
     libcore/include                                                 \
     $(TOP)/frameworks/av/media/libavextensions                      \
     $(TOP)/frameworks/av/media/libstagefright/mpeg2ts               \
 
-LOCAL_CFLAGS += -Werror -Wno-error=deprecated-declarations -Wall
+LOCAL_CFLAGS += -Wno-error=deprecated-declarations -Wall
+
+ifneq ($(TARGET_HAS_LEGACY_CAMERA_HAL1), true)
+LOCAL_C_INCLUDES += \
+    $(TOP)/frameworks/native/include/media/hardware
+endif
 LOCAL_CLANG := true
 
 LOCAL_MODULE:= libmediaplayerservice
diff --git a/media/libmediaplayerservice/StagefrightRecorder.cpp b/media/libmediaplayerservice/StagefrightRecorder.cpp
index 9758e17..b1fb825 100644
--- a/media/libmediaplayerservice/StagefrightRecorder.cpp
+++ b/media/libmediaplayerservice/StagefrightRecorder.cpp
@@ -1537,8 +1537,13 @@ status_t StagefrightRecorder::setupCameraSource(
 
     CHECK(mFrameRate != -1);
 
+#ifndef METADATA_CAMERA_SOURCE
     mMetaDataStoredInVideoBuffers =
         (*cameraSource)->metaDataStoredInVideoBuffers();
+#else
+    mIsMetaDataStoredInVideoBuffers =
+        (*cameraSource)->isMetaDataStoredInVideoBuffers();
+#endif
 
     return OK;
 }
@@ -1665,11 +1670,17 @@ status_t StagefrightRecorder::setupVideoEncoder(
         format->setInt32("android._prefer-b-frames", preferBFrames);
     }
 
+    uint32_t flags = 0;
+#ifndef METADATA_CAMERA_SOURCE
     if (mMetaDataStoredInVideoBuffers != kMetadataBufferTypeInvalid) {
         format->setInt32("android._input-metadata-buffer-type", mMetaDataStoredInVideoBuffers);
     }
+#else
+    if (mIsMetaDataStoredInVideoBuffers) {
+        flags |= MediaCodecSource::FLAG_USE_METADATA_INPUT;
+    }
+#endif
 
-    uint32_t flags = 0;
     if (cameraSource == NULL) {
         flags |= MediaCodecSource::FLAG_USE_SURFACE_INPUT;
     } else {
@@ -1990,7 +2001,11 @@ status_t StagefrightRecorder::reset() {
     mCaptureFps = 0.0f;
     mTimeBetweenCaptureUs = -1;
     mCameraSourceTimeLapse = NULL;
+#ifndef METADATA_CAMERA_SOURCE
     mMetaDataStoredInVideoBuffers = kMetadataBufferTypeInvalid;
+#else
+    mIsMetaDataStoredInVideoBuffers = false;
+#endif
     mEncoderProfiles = MediaProfiles::getInstance();
     mRotationDegrees = 0;
     mLatitudex10000 = -3600000;
diff --git a/media/libmediaplayerservice/StagefrightRecorder.h b/media/libmediaplayerservice/StagefrightRecorder.h
index 87f9462..f7279cc 100644
--- a/media/libmediaplayerservice/StagefrightRecorder.h
+++ b/media/libmediaplayerservice/StagefrightRecorder.h
@@ -24,7 +24,9 @@
 #include <media/stagefright/MediaSource.h>
 #include <system/audio.h>
 
+#ifndef METADATA_CAMERA_SOURCE
 #include <MetadataBufferType.h>
+#endif
 
 namespace android {
 
@@ -124,7 +126,12 @@ protected:
 
     String8 mParams;
 
+#ifndef METADATA_CAMERA_SOURCE
     MetadataBufferType mMetaDataStoredInVideoBuffers;
+#else
+    bool mIsMetaDataStoredInVideoBuffers;
+#endif
+
     MediaProfiles *mEncoderProfiles;
 
     int64_t mPauseStartTimeUs;
diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index b0f6349..578689e 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -816,10 +816,18 @@ status_t ACodec::allocateBuffersOnPort(OMX_U32 portIndex) {
             MetadataBufferType type =
                 portIndex == kPortIndexOutput ? mOutputMetadataType : mInputMetadataType;
             size_t bufSize = def.nBufferSize;
+#ifndef METADATA_CAMERA_SOURCE
             if (type == kMetadataBufferTypeANWBuffer) {
+#else
+            if (type == kMetadataBufferTypeGrallocSource) {
+                bufSize = sizeof(VideoGrallocMetadata);
+            } else if (type == kMetadataBufferTypeANWBuffer) {
+#endif
                 bufSize = sizeof(VideoNativeMetadata);
+#ifndef METADATA_CAMERA_SOURCE
             } else if (type == kMetadataBufferTypeNativeHandleSource) {
                 bufSize = sizeof(VideoNativeHandleMetadata);
+#endif
             }
 
             // If using gralloc or native source input metadata buffers, allocate largest
@@ -827,7 +835,11 @@ status_t ACodec::allocateBuffersOnPort(OMX_U32 portIndex) {
             // may require gralloc source. For camera source, allocate at least enough
             // size for native metadata buffers.
             size_t allottedSize = bufSize;
+#ifndef METADATA_CAMERA_SOURCE
             if (portIndex == kPortIndexInput && type == kMetadataBufferTypeANWBuffer) {
+#else
+            if (portIndex == kPortIndexInput && type >= kMetadataBufferTypeGrallocSource) {
+#endif
                 bufSize = max(sizeof(VideoGrallocMetadata), sizeof(VideoNativeMetadata));
             } else if (portIndex == kPortIndexInput && type == kMetadataBufferTypeCameraSource) {
                 bufSize = max(bufSize, sizeof(VideoNativeMetadata));
@@ -1825,22 +1837,38 @@ status_t ACodec::configureCodec(
     }
 
     int32_t storeMeta;
+#ifndef METADATA_CAMERA_SOURCE
     if (encoder
             && msg->findInt32("android._input-metadata-buffer-type", &storeMeta)
             && storeMeta != kMetadataBufferTypeInvalid) {
         mInputMetadataType = (MetadataBufferType)storeMeta;
         err = mOMX->storeMetaDataInBuffers(
                 mNode, kPortIndexInput, OMX_TRUE, &mInputMetadataType);
+#else
+    if (encoder
+            && msg->findInt32("store-metadata-in-buffers", &storeMeta)
+            && storeMeta != 0) {
+        err = mOMX->storeMetaDataInBuffers(mNode, kPortIndexInput, OMX_TRUE, &mInputMetadataType);
+#endif
         if (err != OK) {
             ALOGE("[%s] storeMetaDataInBuffers (input) failed w/ err %d",
                     mComponentName.c_str(), err);
 
             return err;
-        } else if (storeMeta == kMetadataBufferTypeANWBuffer
+        }
+#ifndef METADATA_CAMERA_SOURCE
+        else if (storeMeta == kMetadataBufferTypeANWBuffer
                 && mInputMetadataType == kMetadataBufferTypeGrallocSource) {
             // IOMX translates ANWBuffers to gralloc source already.
             mInputMetadataType = (MetadataBufferType)storeMeta;
         }
+#else
+        // For this specific case we could be using camera source even if storeMetaDataInBuffers
+        // returns Gralloc source. Pretend that we are; this will force us to use nBufferSize.
+        if (mInputMetadataType == kMetadataBufferTypeGrallocSource) {
+            mInputMetadataType = kMetadataBufferTypeCameraSource;
+        }
+#endif
 
         uint32_t usageBits;
         if (mOMX->getParameter(
@@ -1885,10 +1913,16 @@ status_t ACodec::configureCodec(
     mIsVideo = video;
     if (encoder && video) {
         OMX_BOOL enable = (OMX_BOOL) (prependSPSPPS
+#ifndef METADATA_CAMERA_SOURCE
             && msg->findInt32("android._store-metadata-in-buffers-output", &storeMeta)
+#else
+            && msg->findInt32("store-metadata-in-buffers-output", &storeMeta)
+#endif
             && storeMeta != 0);
 
+#ifndef METADATA_CAMERA_SOURCE
         mOutputMetadataType = kMetadataBufferTypeNativeHandleSource;
+#endif
         err = mOMX->storeMetaDataInBuffers(mNode, kPortIndexOutput, enable, &mOutputMetadataType);
         if (err != OK) {
             ALOGE("[%s] storeMetaDataInBuffers (output) failed w/ err %d",
@@ -2017,7 +2051,9 @@ status_t ACodec::configureCodec(
             }
 
             // Always try to enable dynamic output buffers on native surface
+#ifndef METADATA_CAMERA_SOURCE
             mOutputMetadataType = kMetadataBufferTypeANWBuffer;
+#endif
             err = mOMX->storeMetaDataInBuffers(
                     mNode, kPortIndexOutput, OMX_TRUE, &mOutputMetadataType);
             if (err != OK) {
@@ -6167,6 +6203,9 @@ void ACodec::BaseState::onInputBufferFilled(const sp<AMessage> &msg) {
 
                 status_t err2 = OK;
                 switch (metaType) {
+#ifdef METADATA_CAMERA_SOURCE
+                case kMetadataBufferTypeCameraSource:
+#endif
                 case kMetadataBufferTypeInvalid:
                     break;
 #ifndef OMX_ANDROID_COMPILE_AS_32BIT_ON_64BIT_PLATFORMS
@@ -6397,15 +6436,29 @@ bool ACodec::BaseState::onOMXFillBufferDone(
 
             if (mCodec->usingMetadataOnEncoderOutput()) {
                 native_handle_t *handle = NULL;
+#ifndef METADATA_CAMERA_SOURCE
                 VideoNativeHandleMetadata &nativeMeta =
                     *(VideoNativeHandleMetadata *)info->mData->data();
                 if (info->mData->size() >= sizeof(nativeMeta)
                         && nativeMeta.eType == kMetadataBufferTypeNativeHandleSource) {
+#else
+                VideoGrallocMetadata &grallocMeta = *(VideoGrallocMetadata *)info->mData->data();
+                VideoNativeMetadata &nativeMeta = *(VideoNativeMetadata *)info->mData->data();
+                if (info->mData->size() >= sizeof(grallocMeta)
+                        && grallocMeta.eType == kMetadataBufferTypeGrallocSource) {
+                    handle = (native_handle_t *)(uintptr_t)grallocMeta.pHandle;
+                } else if (info->mData->size() >= sizeof(nativeMeta)
+                        && nativeMeta.eType == kMetadataBufferTypeANWBuffer) {
+#endif
 #ifdef OMX_ANDROID_COMPILE_AS_32BIT_ON_64BIT_PLATFORMS
-                    // handle is only valid on 32-bit/mediaserver process
+                    // handle/ANativeWindowBuffer is only valid on 32-bit/mediaserver process
                     handle = NULL;
 #else
+#ifndef METADATA_CAMERA_SOURCE
                     handle = (native_handle_t *)nativeMeta.pHandle;
+#else
+                    handle = (native_handle_t *)nativeMeta.pBuffer->handle;
+#endif
 #endif
                 }
                 info->mData->meta()->setPointer("handle", handle);
@@ -7175,6 +7228,7 @@ void ACodec::LoadedState::onCreateInputSurface(
     notify->setMessage("input-format", mCodec->mInputFormat);
     notify->setMessage("output-format", mCodec->mOutputFormat);
 
+#ifndef METADATA_CAMERA_SOURCE
     sp<IGraphicBufferProducer> bufferProducer;
     if (err == OK) {
         mCodec->mInputMetadataType = kMetadataBufferTypeANWBuffer;
@@ -7186,6 +7240,13 @@ void ACodec::LoadedState::onCreateInputSurface(
             mCodec->mInputMetadataType = kMetadataBufferTypeANWBuffer;
         }
     }
+#else
+    sp<IGraphicBufferProducer> bufferProducer;
+    if (err == OK) {
+        err = mCodec->mOMX->createInputSurface(
+                mCodec->mNode, kPortIndexInput, dataSpace, &bufferProducer, &mCodec->mInputMetadataType);
+    }
+#endif
 
     if (err == OK) {
         err = setupInputSurface();
@@ -7222,6 +7283,7 @@ void ACodec::LoadedState::onSetInputSurface(
     notify->setMessage("input-format", mCodec->mInputFormat);
     notify->setMessage("output-format", mCodec->mOutputFormat);
 
+#ifndef METADATA_CAMERA_SOURCE
     if (err == OK) {
         mCodec->mInputMetadataType = kMetadataBufferTypeANWBuffer;
         err = mCodec->mOMX->setInputSurface(
@@ -7232,6 +7294,13 @@ void ACodec::LoadedState::onSetInputSurface(
             mCodec->mInputMetadataType = kMetadataBufferTypeANWBuffer;
         }
     }
+#else
+    if (err == OK) {
+        err = mCodec->mOMX->setInputSurface(
+                mCodec->mNode, kPortIndexInput, surface->getBufferConsumer(),
+                &mCodec->mInputMetadataType);
+    }
+#endif
 
     if (err == OK) {
         surface->getBufferConsumer()->setDefaultBufferDataSpace(dataSpace);
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
index fb7c2a0..751fb4e 100644
--- a/media/libstagefright/CameraSource.cpp
+++ b/media/libstagefright/CameraSource.cpp
@@ -1279,6 +1279,7 @@ void CameraSource::processBufferQueueFrame(BufferItem& buffer) {
     mFrameAvailableCondition.signal();
 }
 
+#ifndef METADATA_CAMERA_SOURCE
 MetadataBufferType CameraSource::metaDataStoredInVideoBuffers() const {
     ALOGV("metaDataStoredInVideoBuffers");
 
@@ -1295,6 +1296,16 @@ MetadataBufferType CameraSource::metaDataStoredInVideoBuffers() const {
             return kMetadataBufferTypeInvalid;
     }
 }
+#else
+bool CameraSource::isMetaDataStoredInVideoBuffers() const {
+    ALOGV("isMetaDataStoredInVideoBuffers");
+
+    // Output buffers will contain metadata if camera sends us buffer in metadata mode or via
+    // buffer queue.
+    return (mVideoBufferMode == hardware::ICamera::VIDEO_BUFFER_MODE_DATA_CALLBACK_METADATA ||
+            mVideoBufferMode == hardware::ICamera::VIDEO_BUFFER_MODE_BUFFER_QUEUE);
+}
+#endif
 
 CameraSource::ProxyListener::ProxyListener(const sp<CameraSource>& source) {
     mSource = source;
diff --git a/media/libstagefright/MediaCodecSource.cpp b/media/libstagefright/MediaCodecSource.cpp
index f16ff72..85b9717 100755
--- a/media/libstagefright/MediaCodecSource.cpp
+++ b/media/libstagefright/MediaCodecSource.cpp
@@ -467,6 +467,12 @@ status_t MediaCodecSource::initEncoder() {
     mCodecLooper->setName("codec_looper");
     mCodecLooper->start();
 
+#ifdef METADATA_CAMERA_SOURCE
+    if (mFlags & FLAG_USE_METADATA_INPUT) {
+        mOutputFormat->setInt32("store-metadata-in-buffers", 1);
+    }
+#endif
+
     if (mFlags & FLAG_USE_SURFACE_INPUT) {
         mOutputFormat->setInt32("create-input-buffers-suspended", 1);
     }
diff --git a/media/libstagefright/SurfaceMediaSource.cpp b/media/libstagefright/SurfaceMediaSource.cpp
index 4f1ef30..b468734 100644
--- a/media/libstagefright/SurfaceMediaSource.cpp
+++ b/media/libstagefright/SurfaceMediaSource.cpp
@@ -23,7 +23,9 @@
 #include <media/stagefright/MediaDefs.h>
 #include <media/stagefright/MetaData.h>
 #include <OMX_IVCommon.h>
+#ifndef METADATA_CAMERA_SOURCE
 #include <media/hardware/HardwareAPI.h>
+#endif
 #include <media/hardware/MetadataBufferType.h>
 
 #include <ui/GraphicBuffer.h>
@@ -127,10 +129,17 @@ status_t SurfaceMediaSource::setFrameRate(int32_t fps)
     return OK;
 }
 
+#ifndef METADATA_CAMERA_SOURCE
 MetadataBufferType SurfaceMediaSource::metaDataStoredInVideoBuffers() const {
     ALOGV("isMetaDataStoredInVideoBuffers");
     return kMetadataBufferTypeANWBuffer;
 }
+#else
+bool SurfaceMediaSource::isMetaDataStoredInVideoBuffers() const {
+    ALOGV("isMetaDataStoredInVideoBuffers");
+    return true;
+}
+#endif
 
 int32_t SurfaceMediaSource::getFrameRate( ) const {
     ALOGV("getFrameRate");
@@ -250,6 +259,7 @@ sp<MetaData> SurfaceMediaSource::getFormat()
     return meta;
 }
 
+#ifndef METADATA_CAMERA_SOURCE
 // Pass the data to the MediaBuffer. Pass in only the metadata
 // Note: Call only when you have the lock
 void SurfaceMediaSource::passMetadataBuffer_l(MediaBuffer **buffer,
@@ -266,6 +276,34 @@ void SurfaceMediaSource::passMetadataBuffer_l(MediaBuffer **buffer,
     ALOGV("handle = %p, offset = %zu, length = %zu",
             bufferHandle, (*buffer)->range_length(), (*buffer)->range_offset());
 }
+#else
+// Pass the data to the MediaBuffer. Pass in only the metadata
+// The metadata passed consists of two parts:
+// 1. First, there is an integer indicating that it is a GRAlloc
+// source (kMetadataBufferTypeGrallocSource)
+// 2. This is followed by the buffer_handle_t that is a handle to the
+// GRalloc buffer. The encoder needs to interpret this GRalloc handle
+// and encode the frames.
+// --------------------------------------------------------------
+// |  kMetadataBufferTypeGrallocSource | sizeof(buffer_handle_t) |
+// --------------------------------------------------------------
+// Note: Call only when you have the lock
+static void passMetadataBuffer(MediaBuffer **buffer,
+        buffer_handle_t bufferHandle) {
+    *buffer = new MediaBuffer(4 + sizeof(buffer_handle_t));
+    char *data = (char *)(*buffer)->data();
+    if (data == NULL) {
+        ALOGE("Cannot allocate memory for metadata buffer!");
+        return;
+    }
+    OMX_U32 type = kMetadataBufferTypeGrallocSource;
+    memcpy(data, &type, 4);
+    memcpy(data + 4, &bufferHandle, sizeof(buffer_handle_t));
+
+    ALOGV("handle = %p, , offset = %zu, length = %zu",
+            bufferHandle, (*buffer)->range_length(), (*buffer)->range_offset());
+}
+#endif
 
 status_t SurfaceMediaSource::read(
         MediaBuffer **buffer, const ReadOptions * /* options */) {
@@ -352,7 +390,11 @@ status_t SurfaceMediaSource::read(
     mNumFramesEncoded++;
     // Pass the data to the MediaBuffer. Pass in only the metadata
 
+#ifndef METADATA_CAMERA_SOURCE
     passMetadataBuffer_l(buffer, mSlots[mCurrentSlot].mGraphicBuffer->getNativeBuffer());
+#else
+    passMetadataBuffer(buffer, mSlots[mCurrentSlot].mGraphicBuffer->handle);
+#endif
 
     (*buffer)->setObserver(this);
     (*buffer)->add_ref();
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index 6cc6580..bd6d4e1 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -632,9 +632,11 @@ status_t OMXNodeInstance::storeMetaDataInBuffers_l(
     }
     if (portIndex != kPortIndexInput && portIndex != kPortIndexOutput) {
         android_errorWriteLog(0x534e4554, "26324358");
+#ifndef METADATA_CAMERA_SOURCE
         if (type != NULL) {
             *type = kMetadataBufferTypeInvalid;
         }
+#endif
         return BAD_VALUE;
     }
 
@@ -645,32 +647,46 @@ status_t OMXNodeInstance::storeMetaDataInBuffers_l(
     OMX_STRING nativeBufferName = const_cast<OMX_STRING>(
             "OMX.google.android.index.storeANWBufferInMetadata");
     MetadataBufferType negotiatedType;
+#ifndef METADATA_CAMERA_SOURCE
     MetadataBufferType requestedType = type != NULL ? *type : kMetadataBufferTypeANWBuffer;
+#endif
 
     StoreMetaDataInBuffersParams params;
     InitOMXParams(&params);
     params.nPortIndex = portIndex;
     params.bStoreMetaData = enable;
 
+#ifndef METADATA_CAMERA_SOURCE
     OMX_ERRORTYPE err =
         requestedType == kMetadataBufferTypeANWBuffer
                 ? OMX_GetExtensionIndex(mHandle, nativeBufferName, &index)
                 : OMX_ErrorUnsupportedIndex;
+#else
+    OMX_ERRORTYPE err = OMX_GetExtensionIndex(mHandle, nativeBufferName, &index);
+#endif
     OMX_ERRORTYPE xerr = err;
     if (err == OMX_ErrorNone) {
         err = OMX_SetParameter(mHandle, index, &params);
         if (err == OMX_ErrorNone) {
             name = nativeBufferName; // set name for debugging
+#ifndef METADATA_CAMERA_SOURCE
             negotiatedType = requestedType;
+#else
+            negotiatedType = kMetadataBufferTypeANWBuffer;
+#endif
         }
     }
     if (err != OMX_ErrorNone) {
         err = OMX_GetExtensionIndex(mHandle, name, &index);
         xerr = err;
         if (err == OMX_ErrorNone) {
+#ifndef METADATA_CAMERA_SOURCE
             negotiatedType =
                 requestedType == kMetadataBufferTypeANWBuffer
                         ? kMetadataBufferTypeGrallocSource : requestedType;
+#else
+            negotiatedType = kMetadataBufferTypeGrallocSource;
+#endif
             err = OMX_SetParameter(mHandle, index, &params);
         }
     }
@@ -692,9 +708,14 @@ status_t OMXNodeInstance::storeMetaDataInBuffers_l(
         }
         mMetadataType[portIndex] = negotiatedType;
     }
+#ifndef METADATA_CAMERA_SOURCE
     CLOG_CONFIG(storeMetaDataInBuffers, "%s:%u %srequested %s:%d negotiated %s:%d",
             portString(portIndex), portIndex, enable ? "" : "UN",
             asString(requestedType), requestedType, asString(negotiatedType), negotiatedType);
+#else
+    CLOG_CONFIG(storeMetaDataInBuffers, "%s:%u negotiated %s:%d",
+            portString(portIndex), portIndex, asString(negotiatedType), negotiatedType);
+#endif
 
     if (type != NULL) {
         *type = negotiatedType;
@@ -1096,9 +1117,11 @@ status_t OMXNodeInstance::createGraphicBufferSource(
     }
 
     // Input buffers will hold meta-data (ANativeWindowBuffer references).
+#ifndef METADATA_CAMERA_SOURCE
     if (type != NULL) {
         *type = kMetadataBufferTypeANWBuffer;
     }
+#endif
     err = storeMetaDataInBuffers_l(portIndex, OMX_TRUE, type);
     if (err != OK) {
         return err;
diff --git a/media/libstagefright/tests/Android.mk b/media/libstagefright/tests/Android.mk
index d1c9d36..abbe4ae 100644
--- a/media/libstagefright/tests/Android.mk
+++ b/media/libstagefright/tests/Android.mk
@@ -29,8 +29,12 @@ LOCAL_SHARED_LIBRARIES := \
 LOCAL_C_INCLUDES := \
 	frameworks/av/media/libstagefright \
 	frameworks/av/media/libstagefright/include \
-	$(TOP)/frameworks/native/include/media/openmax \
-	$(TOP)/frameworks/native/include/media/hardware \
+	$(TOP)/frameworks/native/include/media/openmax
+
+ifneq ($(TARGET_HAS_LEGACY_CAMERA_HAL1), true)
+LOCAL_C_INCLUDES += \
+	$(TOP)/frameworks/native/include/media/hardware
+endif
 
 LOCAL_CFLAGS += -Werror -Wall
 LOCAL_CLANG := true
diff --git a/media/libstagefright/wifi-display/Android.mk b/media/libstagefright/wifi-display/Android.mk
index ae4ac90..922de08 100644
--- a/media/libstagefright/wifi-display/Android.mk
+++ b/media/libstagefright/wifi-display/Android.mk
@@ -17,9 +17,13 @@ LOCAL_SRC_FILES:= \
 LOCAL_C_INCLUDES:= \
         $(TOP)/frameworks/av/media/libstagefright \
         $(TOP)/frameworks/native/include/media/openmax \
-        $(TOP)/frameworks/native/include/media/hardware \
         $(TOP)/frameworks/av/media/libstagefright/mpeg2ts \
 
+ifneq ($(TARGET_HAS_LEGACY_CAMERA_HAL1), true)
+LOCAL_C_INCLUDES+= \
+	$(TOP)/frameworks/native/include/media/hardware
+endif
+
 LOCAL_SHARED_LIBRARIES:= \
         libbinder                       \
         libcutils                       \
diff --git a/media/libstagefright/wifi-display/source/PlaybackSession.cpp b/media/libstagefright/wifi-display/source/PlaybackSession.cpp
index 3587cb9..6393b77 100644
--- a/media/libstagefright/wifi-display/source/PlaybackSession.cpp
+++ b/media/libstagefright/wifi-display/source/PlaybackSession.cpp
@@ -948,10 +948,16 @@ status_t WifiDisplaySource::PlaybackSession::addSource(
 
     if (isVideo) {
         format->setString("mime", MEDIA_MIMETYPE_VIDEO_AVC);
+#ifndef METADATA_CAMERA_SOURCE
         format->setInt32(
                 "android._input-metadata-buffer-type", kMetadataBufferTypeANWBuffer);
         format->setInt32("android._store-metadata-in-buffers-output", (mHDCP != NULL)
                 && (mHDCP->getCaps() & HDCPModule::HDCP_CAPS_ENCRYPT_NATIVE));
+#else
+        format->setInt32("store-metadata-in-buffers", true);
+        format->setInt32("store-metadata-in-buffers-output", (mHDCP != NULL)
+                && (mHDCP->getCaps() & HDCPModule::HDCP_CAPS_ENCRYPT_NATIVE));
+#endif
         format->setInt32(
                 "color-format", OMX_COLOR_FormatAndroidOpaque);
         format->setInt32("profile-idc", profileIdc);
diff --git a/media/mediaserver/main_mediaserver.cpp b/media/mediaserver/main_mediaserver.cpp
index 0abe6ac..3afffb0 100644
--- a/media/mediaserver/main_mediaserver.cpp
+++ b/media/mediaserver/main_mediaserver.cpp
@@ -31,6 +31,9 @@
 #include "IcuUtils.h"
 #include "MediaPlayerService.h"
 #include "ResourceManagerService.h"
+#ifdef METADATA_CAMERA_SOURCE
+#include "CameraService.h"
+#endif
 
 using namespace android;
 
-- 
2.9.3

