From dabb203406cb4d4ef2cbb2658f2bc8b8f8a7bc8a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 May 2015 13:04:31 +0300
Subject: [PATCH 10/13] Audio fix

Change-Id: I74ea0d2b330cd45feef8d179ddbdb3ef400abedf
---
 services/audioflinger/AudioFlinger.cpp             | 43 +---------------------
 services/audioflinger/PlaybackTracks.h             |  2 +-
 services/audiopolicy/Android.mk                    |  7 ++--
 .../audiopolicy/AudioPolicyClientImplLegacy.cpp    | 16 +-------
 .../audiopolicy/AudioPolicyInterfaceImplLegacy.cpp | 37 +------------------
 5 files changed, 11 insertions(+), 94 deletions(-)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 8563cf5..720ec55 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -152,13 +152,6 @@ static int load_audio_interface(const char *if_name, audio_hw_device_t **dev)
     if (rc) {
         goto out;
     }
-#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
-    if ((*dev)->common.version < AUDIO_DEVICE_API_VERSION_MIN) {
-        ALOGE("%s wrong audio hw device version %04x", __func__, (*dev)->common.version);
-        rc = BAD_VALUE;
-        goto out;
-    }
-#endif
     return 0;
 
 out:
@@ -1542,26 +1535,6 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
     {  // scope for auto-lock pattern
         AutoMutex lock(mHardwareLock);
 
-#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
-        if (0 == mAudioHwDevs.size()) {
-            mHardwareStatus = AUDIO_HW_GET_MASTER_VOLUME;
-            if (NULL != dev->get_master_volume) {
-                float mv;
-                if (OK == dev->get_master_volume(dev, &mv)) {
-                    mMasterVolume = mv;
-                }
-            }
-
-            mHardwareStatus = AUDIO_HW_GET_MASTER_MUTE;
-            if (NULL != dev->get_master_mute) {
-                bool mm;
-                if (OK == dev->get_master_mute(dev, &mm)) {
-                    mMasterMute = mm;
-                }
-            }
-        }
-#endif
-
         mHardwareStatus = AUDIO_HW_SET_MASTER_VOLUME;
         if ((NULL != dev->set_master_volume) &&
             (OK == dev->set_master_volume(dev, mMasterVolume))) {
@@ -1569,15 +1542,6 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
                     AudioHwDevice::AHWD_CAN_SET_MASTER_VOLUME);
         }
 
-#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
-        mHardwareStatus = AUDIO_HW_SET_MASTER_MUTE;
-        if ((NULL != dev->set_master_mute) &&
-            (OK == dev->set_master_mute(dev, mMasterMute))) {
-            flags = static_cast<AudioHwDevice::Flags>(flags |
-                    AudioHwDevice::AHWD_CAN_SET_MASTER_MUTE);
-        }
-#endif
-
         mHardwareStatus = AUDIO_HW_IDLE;
     }
 
@@ -1805,11 +1769,8 @@ status_t AudioFlinger::openOutput(audio_module_handle_t module,
         thread->audioConfigChanged(AudioSystem::OUTPUT_OPENED);
 
         // the first primary output opened designates the primary hw device
-#ifdef STE_HARDWARE
-        if (mPrimaryHardwareDev == NULL) {
-#else
-        if ((mPrimaryHardwareDev == NULL) && (flags & AUDIO_OUTPUT_FLAG_PRIMARY)) {
-#endif
+        if ( mPrimaryHardwareDev == NULL ) {
+
             ALOGI("Using module %d has the primary audio interface", module);
             mPrimaryHardwareDev = thread->getOutput()->audioHwDev;
 
diff --git a/services/audioflinger/PlaybackTracks.h b/services/audioflinger/PlaybackTracks.h
index ee48276..b482899 100644
--- a/services/audioflinger/PlaybackTracks.h
+++ b/services/audioflinger/PlaybackTracks.h
@@ -55,7 +55,7 @@ public:
             audio_stream_type_t streamType() const {
                 return mStreamType;
             }
-            bool        isOffloaded() const { return (mFlags & IAudioFlinger::TRACK_OFFLOAD) != 0; }
+            bool        isOffloaded() const { return 0; }
             bool        isDirect() const { return (mFlags & IAudioFlinger::TRACK_DIRECT) != 0; }
             status_t    setParameters(const String8& keyValuePairs);
             status_t    attachAuxEffect(int EffectId);
diff --git a/services/audiopolicy/Android.mk b/services/audiopolicy/Android.mk
index 56ad566..b2c69ed 100644
--- a/services/audiopolicy/Android.mk
+++ b/services/audiopolicy/Android.mk
@@ -33,14 +33,15 @@ LOCAL_SHARED_LIBRARIES := \
     libhardware_legacy \
     libserviceutility
 
+USE_LEGACY_AUDIO_POLICY := true
+
 ifneq ($(USE_LEGACY_AUDIO_POLICY), 1)
 LOCAL_SHARED_LIBRARIES += \
     libaudiopolicymanager
 endif
 
-ifeq ($(BOARD_HAVE_PRE_KITKAT_AUDIO_BLOB),true)
-    LOCAL_CFLAGS += -DHAVE_PRE_KITKAT_AUDIO_BLOB
-endif
+LOCAL_CFLAGS += -DHAVE_PRE_KITKAT_AUDIO_BLOB
+LOCAL_CFLAGS += -DHAVE_PRE_KITKAT_AUDIO_POLICY_BLOB
 
 LOCAL_STATIC_LIBRARIES := \
     libmedia_helper
diff --git a/services/audiopolicy/AudioPolicyClientImplLegacy.cpp b/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
index 86f1070..6ccde1b 100644
--- a/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
+++ b/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
@@ -85,9 +85,6 @@ static audio_io_handle_t open_output(audio_module_handle_t module,
     config.sample_rate = *pSamplingRate;
     config.format = *pFormat;
     config.channel_mask = *pChannelMask;
-    if (offloadInfo != NULL) {
-        config.offload_info = *offloadInfo;
-    }
     audio_io_handle_t output = AUDIO_IO_HANDLE_NONE;
     status_t status = af->openOutput(module, &output, &config, pDevices,
                                      String8(""), pLatencyMs, flags);
@@ -95,9 +92,6 @@ static audio_io_handle_t open_output(audio_module_handle_t module,
         *pSamplingRate = config.sample_rate;
         *pFormat = config.format;
         *pChannelMask = config.channel_mask;
-        if (offloadInfo != NULL) {
-            *((audio_offload_info_t *)offloadInfo) = config.offload_info;
-        }
     }
     return output;
 }
@@ -125,14 +119,8 @@ audio_io_handle_t aps_open_output_on_module(void *service __unused,
                                                    audio_output_flags_t flags,
                                                    const audio_offload_info_t *offloadInfo)
 {
-#ifdef HAVE_PRE_KITKAT_AUDIO_BLOB
-     return open_output(module, pDevices, pSamplingRate, pFormat, pChannelMask,
-                           pLatencyMs, flags, NULL);
-#else
-     return open_output(module, pDevices, pSamplingRate, pFormat, pChannelMask,
-                           pLatencyMs, flags, offloadInfo);
-#endif
-
+    return open_output(module, pDevices, pSamplingRate, pFormat, pChannelMask,
+                          pLatencyMs, flags, NULL);
 }
 
 audio_io_handle_t aps_open_dup_output(void *service __unused,
diff --git a/services/audiopolicy/AudioPolicyInterfaceImplLegacy.cpp b/services/audiopolicy/AudioPolicyInterfaceImplLegacy.cpp
index 344bbe1..004eafa 100644
--- a/services/audiopolicy/AudioPolicyInterfaceImplLegacy.cpp
+++ b/services/audiopolicy/AudioPolicyInterfaceImplLegacy.cpp
@@ -464,14 +464,7 @@ bool AudioPolicyService::isStreamActive(audio_stream_type_t stream, uint32_t inP
 
 bool AudioPolicyService::isStreamActiveRemotely(audio_stream_type_t stream, uint32_t inPastMs) const
 {
-    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
-        return false;
-    }
-    if (mpAudioPolicy == NULL) {
-        return false;
-    }
-    Mutex::Autolock _l(mLock);
-    return mpAudioPolicy->is_stream_active_remotely(mpAudioPolicy, stream, inPastMs);
+    return false;
 }
 
 bool AudioPolicyService::isSourceActive(audio_source_t source) const
@@ -490,38 +483,12 @@ status_t AudioPolicyService::queryDefaultPreProcessing(int audioSession,
                                                        effect_descriptor_t *descriptors,
                                                        uint32_t *count)
 {
-#ifdef HAVE_PRE_KITKAT_AUDIO_BLOB
     return false;
-#endif
-    if (mpAudioPolicy == NULL) {
-        *count = 0;
-        return NO_INIT;
-    }
-    sp<AudioPolicyEffects>audioPolicyEffects;
-    {
-        Mutex::Autolock _l(mLock);
-        audioPolicyEffects = mAudioPolicyEffects;
-    }
-    if (audioPolicyEffects == 0) {
-        *count = 0;
-        return NO_INIT;
-    }
-    return audioPolicyEffects->queryDefaultInputEffects(audioSession, descriptors, count);
 }
 
 bool AudioPolicyService::isOffloadSupported(const audio_offload_info_t& info)
 {
-    if (mpAudioPolicy == NULL) {
-        ALOGV("mpAudioPolicy == NULL");
-        return false;
-    }
-
-    if (mpAudioPolicy->is_offload_supported == NULL) {
-        ALOGV("HAL does not implement is_offload_supported");
-        return false;
-    }
-
-    return mpAudioPolicy->is_offload_supported(mpAudioPolicy, &info);
+    return false;
 }
 
 status_t AudioPolicyService::listAudioPorts(audio_port_role_t role __unused,
-- 
1.9.1

