From 0aa38d6f3907477f05efbf4cdab9d19d8305d303 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 29 Dec 2016 01:57:53 +0700
Subject: [PATCH 04/46] ACodec: disable unsupported codec configs

Change-Id: Ife04365bf4a06f99489cd4f8596b0080bf19b9ce
---
 media/libstagefright/ACodec.cpp | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 15433d9..387ac95 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2369,11 +2369,12 @@ status_t ACodec::configureCodec(
         err = setMinBufferSize(kPortIndexInput, 8192);  // XXX
     }
 
+/*
     int32_t priority;
     if (msg->findInt32("priority", &priority)) {
         err = setPriority(priority);
     }
-
+*/
     int32_t rateInt = -1;
     float rateFloat = -1;
     if (!msg->findFloat("operating-rate", &rateFloat)) {
@@ -3539,9 +3540,9 @@ status_t ACodec::setColorAspectsForVideoDecoder(
         // format, in case component does not support this enumeration.
         setColorAspectsIntoFormat(params.sAspects, outputFormat);
     }
-
+/*
     (void)initDescribeColorAspectsIndex();
-
+*/
     // communicate color aspects to codec
     return setCodecColorAspects(params);
 }
@@ -4000,13 +4001,13 @@ status_t ACodec::setupVideoEncoder(
     if (err != OK) {
         return err;
     }
-
+/*
     err = setHDRStaticInfoForVideoCodec(kPortIndexInput, msg, outputFormat);
     if (err == ERROR_UNSUPPORTED) { // support is optional
         ALOGI("[%s] cannot encode HDR static metadata. Ignoring.", mComponentName.c_str());
         err = OK;
     }
-
+*/
     if (err != OK) {
         return err;
     }
@@ -7779,7 +7780,7 @@ status_t ACodec::setParameters(const sp<AMessage> &params) {
             return err;
         }
     }
-
+/*
     float rate;
     if (params->findFloat("operating-rate", &rate) && rate > 0) {
         status_t err = setOperatingRate(rate, mIsVideo);
@@ -7799,7 +7800,7 @@ status_t ACodec::setParameters(const sp<AMessage> &params) {
             err = OK;
         }
     }
-
+*/
     status_t err = configureTemporalLayers(params, false /* inConfigure */, mOutputFormat);
     if (err != OK) {
         err = OK; // ignore failure
-- 
2.9.3

