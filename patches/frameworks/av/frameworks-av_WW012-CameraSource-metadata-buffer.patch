Subject: [PATCH] CameraService: Allow to use CameraSource as metadata buffer type

 - NativeHandleSource isn't supported by pre-N camera halv1
   due to that there is crash when starting video recording.
 - also not all device have open source camera hal
 - so Add support to use CameraSource as metadata type

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 0506356..9442f2b 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -65,6 +65,12 @@
 
 namespace android {
 
+#ifdef METADATA_CAMERA_SOURCE
+#define METADATA_TYPE kMetadataBufferTypeCameraSource
+#else
+#define METADATA_TYPE kMetadataBufferTypeNativeHandleSource
+#endif
+
 enum {
     kMaxIndicesToCheck = 32, // used when enumerating supported formats and profiles
 };
@@ -818,7 +824,7 @@
             size_t bufSize = def.nBufferSize;
             if (type == kMetadataBufferTypeANWBuffer) {
                 bufSize = sizeof(VideoNativeMetadata);
-            } else if (type == kMetadataBufferTypeNativeHandleSource) {
+            } else if (type == METADATA_TYPE) {
                 bufSize = sizeof(VideoNativeHandleMetadata);
             }
 
@@ -1888,7 +1894,7 @@
             && msg->findInt32("android._store-metadata-in-buffers-output", &storeMeta)
             && storeMeta != 0);
 
-        mOutputMetadataType = kMetadataBufferTypeNativeHandleSource;
+        mOutputMetadataType = METADATA_TYPE;
         err = mOMX->storeMetaDataInBuffers(mNode, kPortIndexOutput, enable, &mOutputMetadataType);
         if (err != OK) {
             ALOGE("[%s] storeMetaDataInBuffers (output) failed w/ err %d",
@@ -6025,7 +6031,7 @@
                 case kMetadataBufferTypeInvalid:
                     break;
 #ifndef OMX_ANDROID_COMPILE_AS_32BIT_ON_64BIT_PLATFORMS
-                case kMetadataBufferTypeNativeHandleSource:
+                case METADATA_TYPE:
                     if (info->mCodecData->size() >= sizeof(VideoNativeHandleMetadata)) {
                         VideoNativeHandleMetadata *vnhmd =
                             (VideoNativeHandleMetadata*)info->mCodecData->base();
@@ -6255,7 +6261,7 @@
                 VideoNativeHandleMetadata &nativeMeta =
                     *(VideoNativeHandleMetadata *)info->mData->data();
                 if (info->mData->size() >= sizeof(nativeMeta)
-                        && nativeMeta.eType == kMetadataBufferTypeNativeHandleSource) {
+                        && nativeMeta.eType == METADATA_TYPE) {
 #ifdef OMX_ANDROID_COMPILE_AS_32BIT_ON_64BIT_PLATFORMS
                     // handle is only valid on 32-bit/mediaserver process
                     handle = NULL;
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
index 68de3f5..726da21 100644
--- a/media/libstagefright/CameraSource.cpp
+++ b/media/libstagefright/CameraSource.cpp
@@ -46,6 +46,12 @@
 
 namespace android {
 
+#ifdef METADATA_CAMERA_SOURCE
+#define METADATA_TYPE kMetadataBufferTypeCameraSource
+#else
+#define METADATA_TYPE kMetadataBufferTypeNativeHandleSource
+#endif
+
 static const int64_t CAMERA_SOURCE_TIMEOUT_NS = 3000000000LL;
 
 struct CameraSourceListener : public CameraListener {
@@ -964,7 +970,7 @@
         if (frame->size() == sizeof(VideoNativeHandleMetadata)) {
             VideoNativeHandleMetadata *metadata =
                 (VideoNativeHandleMetadata*)(frame->pointer());
-            if (metadata->eType == kMetadataBufferTypeNativeHandleSource) {
+            if (metadata->eType == METADATA_TYPE) {
                 handle = metadata->pHandle;
             }
         }
@@ -1171,7 +1177,7 @@
 
     // Wrap native handle in sp<IMemory> so it can be pushed to mFramesReceived.
     VideoNativeHandleMetadata *metadata = (VideoNativeHandleMetadata*)(data->pointer());
-    metadata->eType = kMetadataBufferTypeNativeHandleSource;
+    metadata->eType = METADATA_TYPE;
     metadata->pHandle = handle;
 
     mFramesReceived.push_back(data);
@@ -1275,7 +1281,7 @@
     // buffer queue.
     switch (mVideoBufferMode) {
         case hardware::ICamera::VIDEO_BUFFER_MODE_DATA_CALLBACK_METADATA:
-            return kMetadataBufferTypeNativeHandleSource;
+            return METADATA_TYPE;
         case hardware::ICamera::VIDEO_BUFFER_MODE_BUFFER_QUEUE:
             return kMetadataBufferTypeANWBuffer;
         default:
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index d29c387..b5b03e9 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -92,6 +92,12 @@
 
 namespace android {
 
+#ifdef METADATA_CAMERA_SOURCE
+#define METADATA_TYPE kMetadataBufferTypeCameraSource
+#else
+#define METADATA_TYPE kMetadataBufferTypeNativeHandleSource
+#endif
+
 struct BufferMeta {
     BufferMeta(const sp<IMemory> &mem, OMX_U32 portIndex, bool is_backup = false)
         : mMem(mem),
@@ -927,7 +933,7 @@
     sp<ABuffer> data = bufferMeta->getBuffer(
             header, portIndex == kPortIndexInput /* backup */, false /* limit */);
     bufferMeta->setNativeHandle(nativeHandle);
-    if (mMetadataType[portIndex] == kMetadataBufferTypeNativeHandleSource
+    if (mMetadataType[portIndex] == METADATA_TYPE
             && data->capacity() >= sizeof(VideoNativeHandleMetadata)) {
         VideoNativeHandleMetadata &metadata = *(VideoNativeHandleMetadata *)(data->data());
         metadata.eType = mMetadataType[portIndex];
diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index c453d2d..a2173e8 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -30,6 +30,12 @@
 #define LOG1(...) ALOGD_IF(gLogLevel >= 1, __VA_ARGS__);
 #define LOG2(...) ALOGD_IF(gLogLevel >= 2, __VA_ARGS__);
 
+#ifdef METADATA_CAMERA_SOURCE
+#define METADATA_TYPE kMetadataBufferTypeCameraSource
+#else
+#define METADATA_TYPE kMetadataBufferTypeNativeHandleSource
+#endif
+
 static int getCallingPid() {
     return IPCThreadState::self()->getCallingPid();
 }
@@ -520,7 +526,7 @@
     }
 
     VideoNativeHandleMetadata *metadata = (VideoNativeHandleMetadata*)(dataPtr->pointer());
-    metadata->eType = kMetadataBufferTypeNativeHandleSource;
+    metadata->eType = METADATA_TYPE;
     metadata->pHandle = handle;
 
     mHardware->releaseRecordingFrame(dataPtr);
@@ -1003,7 +1009,7 @@
         if (dataPtr->size() == sizeof(VideoNativeHandleMetadata)) {
             VideoNativeHandleMetadata *metadata =
                 (VideoNativeHandleMetadata*)(dataPtr->pointer());
-            if (metadata->eType == kMetadataBufferTypeNativeHandleSource) {
+            if (metadata->eType == METADATA_TYPE) {
                 handle = metadata->pHandle;
             }
         }
