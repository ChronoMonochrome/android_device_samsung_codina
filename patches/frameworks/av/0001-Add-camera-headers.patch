From 67251e41899e4f1c93d790217cef7db8af6cd4fd Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 15 Feb 2016 19:45:35 +0700
Subject: [PATCH] Add camera headers

Change-Id: I1b7997eb7545f9d39e693521a82efe8d2e64a391
---
 include/camera/CameraParametersExtra.h             | 47 ++++++++++------
 .../camera/CameraParametersExtraDurationTimer.h    | 62 ++++++++++++++++++++++
 2 files changed, 92 insertions(+), 17 deletions(-)
 create mode 100644 include/camera/CameraParametersExtraDurationTimer.h

diff --git a/include/camera/CameraParametersExtra.h b/include/camera/CameraParametersExtra.h
index 80a67cc..1121e19 100644
--- a/include/camera/CameraParametersExtra.h
+++ b/include/camera/CameraParametersExtra.h
@@ -1,6 +1,3 @@
-// Overload this file in your device specific config if you need
-// to add extra camera parameters.
-// A typical file would look like this:
 /*
  * Copyright (C) 2014 The CyanogenMod Project
  *
@@ -16,20 +13,36 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-/*
+
+#include "camera/CameraParametersExtraDurationTimer.h"
+
 #define CAMERA_PARAMETERS_EXTRA_C \
-const char CameraParameters::KEY_SUPPORTED_BURST_NUM[] = "supported-burst-num"; \
-const char CameraParameters::KEY_BURST_NUM[] = "burst-num"; \
-const char CameraParameters::KEY_SUPPORTED_HDR_MODES[] = "supported-hdr-modes"; \
-const char CameraParameters::KEY_HDR_MODE[] = "hdr-mode"; \
-const char CameraParameters::HDR_MODE_OFF[] = "hdr-mode-off"; \
-const char CameraParameters::HDR_MODE_HDR[] = "hdr-mode-hdr";
+const char CameraParameters::SCENE_MODE_AQUA[] = "aqua"; \
+const char CameraParameters::SCENE_MODE_BACKLIGHT[] = "backlight"; \
+const char CameraParameters::SCENE_MODE_DUSKDAWN[] = "duskdawn"; \
+const char CameraParameters::SCENE_MODE_FALLCOLOR[] = "fallcolor"; \
+const char CameraParameters::SCENE_MODE_TEXT[] = "text"; \
+const char CameraParameters::PIXEL_FORMAT_YUV420SPNV12[] = "yuv420spnv12"; \
+const char CameraParameters::PIXEL_FORMAT_YUV420MB[] = "yuv420mb"; \
+const char CameraParameters::PIXEL_FORMAT_YVU422SP[] = "yvu422sp"; \
+const char CameraParameters::PIXEL_FORMAT_YVU422P[] = "yvu422p"; \
+const char CameraParameters::PIXEL_FORMAT_YVU420SP[] = "yvu420sp"; \
+const char CameraParameters::PIXEL_FORMAT_YVU420P[]  = "yvu420p"; \
+const char CameraParameters::KEY_RECORD_STRIDE[] = "record-stride"; \
+const char CameraParameters::KEY_RECORD_SLICE_HEIGHT[] = "record-slice-height"; \
+CAMERA_PARAMETERS_EXTRA_C_DURATION_TIMER \
 
 #define CAMERA_PARAMETERS_EXTRA_H \
-    static const char KEY_SUPPORTED_BURST_NUM[]; \
-    static const char KEY_BURST_NUM[]; \
-    static const char KEY_SUPPORTED_HDR_MODES[]; \
-    static const char KEY_HDR_MODE[]; \
-    static const char HDR_MODE_OFF[]; \
-    static const char HDR_MODE_HDR[];
-*/
+    static const char SCENE_MODE_AQUA[]; \
+    static const char SCENE_MODE_BACKLIGHT[]; \
+    static const char SCENE_MODE_DUSKDAWN[]; \
+    static const char SCENE_MODE_FALLCOLOR[]; \
+    static const char SCENE_MODE_TEXT[]; \
+    static const char PIXEL_FORMAT_YUV420SPNV12[]; \
+    static const char PIXEL_FORMAT_YVU422SP[]; \
+    static const char PIXEL_FORMAT_YVU422P[];  \
+    static const char PIXEL_FORMAT_YVU420SP[]; \
+    static const char PIXEL_FORMAT_YVU420P[]; \
+    static const char PIXEL_FORMAT_YUV420MB[]; \
+    static const char KEY_RECORD_STRIDE[]; \
+    static const char KEY_RECORD_SLICE_HEIGHT[];
diff --git a/include/camera/CameraParametersExtraDurationTimer.h b/include/camera/CameraParametersExtraDurationTimer.h
new file mode 100644
index 0000000..9f2f049
--- /dev/null
+++ b/include/camera/CameraParametersExtraDurationTimer.h
@@ -0,0 +1,62 @@
+#define CAMERA_PARAMETERS_EXTRA_C_DURATION_TIMER \
+\
+class DurationTimer { \
+public: \
+    DurationTimer() {} \
+    ~DurationTimer() {} \
+    void start(); \
+    void stop(); \
+    long long durationUsecs() const; \
+    static long long subtractTimevals(const struct timeval* ptv1, \
+        const struct timeval* ptv2); \
+    static void addToTimeval(struct timeval* ptv, long usec); \
+private: \
+    struct timeval  mStartWhen; \
+    struct timeval  mStopWhen; \
+}; \
+\
+void DurationTimer::start(void) \
+{ \
+    gettimeofday(&mStartWhen, NULL); \
+} \
+\
+void DurationTimer::stop(void) \
+{ \
+    gettimeofday(&mStopWhen, NULL); \
+} \
+\
+long long DurationTimer::durationUsecs(void) const \
+{ \
+    return (long) subtractTimevals(&mStopWhen, &mStartWhen); \
+} \
+\
+/*static*/ long long DurationTimer::subtractTimevals(const struct timeval* ptv1, \
+    const struct timeval* ptv2) \
+{ \
+    long long stop  = ((long long) ptv1->tv_sec) * 1000000LL + \
+                      ((long long) ptv1->tv_usec); \
+    long long start = ((long long) ptv2->tv_sec) * 1000000LL + \
+                      ((long long) ptv2->tv_usec); \
+    return stop - start; \
+} \
+\
+/*static*/ void DurationTimer::addToTimeval(struct timeval* ptv, long usec) \
+{ \
+    if (usec < 0) { \
+        ALOG(LOG_WARN, "", "Negative values not supported in addToTimeval\n"); \
+        return; \
+    } \
+\
+    if (ptv->tv_usec >= 1000000) { \
+        ptv->tv_sec += ptv->tv_usec / 1000000; \
+        ptv->tv_usec %= 1000000; \
+    } \
+\
+    ptv->tv_usec += usec % 1000000; \
+    if (ptv->tv_usec >= 1000000) { \
+        ptv->tv_usec -= 1000000; \
+        ptv->tv_sec++; \
+    } \
+    ptv->tv_sec += usec / 1000000; \
+} \
+/* END OF DEF */
-- 
2.5.0

