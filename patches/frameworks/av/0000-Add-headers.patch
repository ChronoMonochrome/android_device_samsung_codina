From 5ff640e62dd3623309688bf705160fd5b4ef869c Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 5 Sep 2015 16:19:32 +0300
Subject: [PATCH 01/14] Add headers

Change-Id: I19636d186756186e75721af5cbde773e6d0be1b7
---
 include/camera/CameraParametersExtra.h             | 48 +++++++++++++++++
 .../camera/CameraParametersExtraDurationTimer.h    | 62 ++++++++++++++++++++++
 2 files changed, 110 insertions(+)
 create mode 100644 include/camera/CameraParametersExtra.h
 create mode 100644 include/camera/CameraParametersExtraDurationTimer.h

diff --git a/include/camera/CameraParametersExtra.h b/include/camera/CameraParametersExtra.h
new file mode 100644
index 0000000..1121e19
--- /dev/null
+++ b/include/camera/CameraParametersExtra.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2014 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "camera/CameraParametersExtraDurationTimer.h"
+
+#define CAMERA_PARAMETERS_EXTRA_C \
+const char CameraParameters::SCENE_MODE_AQUA[] = "aqua"; \
+const char CameraParameters::SCENE_MODE_BACKLIGHT[] = "backlight"; \
+const char CameraParameters::SCENE_MODE_DUSKDAWN[] = "duskdawn"; \
+const char CameraParameters::SCENE_MODE_FALLCOLOR[] = "fallcolor"; \
+const char CameraParameters::SCENE_MODE_TEXT[] = "text"; \
+const char CameraParameters::PIXEL_FORMAT_YUV420SPNV12[] = "yuv420spnv12"; \
+const char CameraParameters::PIXEL_FORMAT_YUV420MB[] = "yuv420mb"; \
+const char CameraParameters::PIXEL_FORMAT_YVU422SP[] = "yvu422sp"; \
+const char CameraParameters::PIXEL_FORMAT_YVU422P[] = "yvu422p"; \
+const char CameraParameters::PIXEL_FORMAT_YVU420SP[] = "yvu420sp"; \
+const char CameraParameters::PIXEL_FORMAT_YVU420P[]  = "yvu420p"; \
+const char CameraParameters::KEY_RECORD_STRIDE[] = "record-stride"; \
+const char CameraParameters::KEY_RECORD_SLICE_HEIGHT[] = "record-slice-height"; \
+CAMERA_PARAMETERS_EXTRA_C_DURATION_TIMER \
+
+#define CAMERA_PARAMETERS_EXTRA_H \
+    static const char SCENE_MODE_AQUA[]; \
+    static const char SCENE_MODE_BACKLIGHT[]; \
+    static const char SCENE_MODE_DUSKDAWN[]; \
+    static const char SCENE_MODE_FALLCOLOR[]; \
+    static const char SCENE_MODE_TEXT[]; \
+    static const char PIXEL_FORMAT_YUV420SPNV12[]; \
+    static const char PIXEL_FORMAT_YVU422SP[]; \
+    static const char PIXEL_FORMAT_YVU422P[];  \
+    static const char PIXEL_FORMAT_YVU420SP[]; \
+    static const char PIXEL_FORMAT_YVU420P[]; \
+    static const char PIXEL_FORMAT_YUV420MB[]; \
+    static const char KEY_RECORD_STRIDE[]; \
+    static const char KEY_RECORD_SLICE_HEIGHT[];
diff --git a/include/camera/CameraParametersExtraDurationTimer.h b/include/camera/CameraParametersExtraDurationTimer.h
new file mode 100644
index 0000000..9f2f049
--- /dev/null
+++ b/include/camera/CameraParametersExtraDurationTimer.h
@@ -0,0 +1,62 @@
+#define CAMERA_PARAMETERS_EXTRA_C_DURATION_TIMER \
+\
+class DurationTimer { \
+public: \
+    DurationTimer() {} \
+    ~DurationTimer() {} \
+    void start(); \
+    void stop(); \
+    long long durationUsecs() const; \
+    static long long subtractTimevals(const struct timeval* ptv1, \
+        const struct timeval* ptv2); \
+    static void addToTimeval(struct timeval* ptv, long usec); \
+private: \
+    struct timeval  mStartWhen; \
+    struct timeval  mStopWhen; \
+}; \
+\
+void DurationTimer::start(void) \
+{ \
+    gettimeofday(&mStartWhen, NULL); \
+} \
+\
+void DurationTimer::stop(void) \
+{ \
+    gettimeofday(&mStopWhen, NULL); \
+} \
+\
+long long DurationTimer::durationUsecs(void) const \
+{ \
+    return (long) subtractTimevals(&mStopWhen, &mStartWhen); \
+} \
+\
+/*static*/ long long DurationTimer::subtractTimevals(const struct timeval* ptv1, \
+    const struct timeval* ptv2) \
+{ \
+    long long stop  = ((long long) ptv1->tv_sec) * 1000000LL + \
+                      ((long long) ptv1->tv_usec); \
+    long long start = ((long long) ptv2->tv_sec) * 1000000LL + \
+                      ((long long) ptv2->tv_usec); \
+    return stop - start; \
+} \
+\
+/*static*/ void DurationTimer::addToTimeval(struct timeval* ptv, long usec) \
+{ \
+    if (usec < 0) { \
+        ALOG(LOG_WARN, "", "Negative values not supported in addToTimeval\n"); \
+        return; \
+    } \
+\
+    if (ptv->tv_usec >= 1000000) { \
+        ptv->tv_sec += ptv->tv_usec / 1000000; \
+        ptv->tv_usec %= 1000000; \
+    } \
+\
+    ptv->tv_usec += usec % 1000000; \
+    if (ptv->tv_usec >= 1000000) { \
+        ptv->tv_usec -= 1000000; \
+        ptv->tv_sec++; \
+    } \
+    ptv->tv_sec += usec / 1000000; \
+} \
+/* END OF DEF */
-- 
1.9.1

