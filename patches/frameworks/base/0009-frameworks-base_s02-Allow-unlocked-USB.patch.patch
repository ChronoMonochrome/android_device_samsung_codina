From a7ad0b3d7f5f63c2a9ddfb510c047ecf6100321a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 26 Dec 2016 18:48:14 +0700
Subject: [PATCH 09/81] frameworks-base_s02-Allow-unlocked-USB.patch

Change-Id: Ifc700693e02d23085291c637f57abb1f97b7dc0a
---
 core/java/android/provider/Settings.java           |  6 ++++
 .../com/android/server/usb/UsbDeviceManager.java   | 35 ++++++++++++++++++----
 2 files changed, 36 insertions(+), 5 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index af1fb52..c1bfca0 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5465,6 +5465,12 @@ public static final String PHONE_BLACKLIST_REGEX_ENABLED = "phone_blacklist_rege
         public static final String SHOW_SU_INDICATOR = "show_su_indicator";
 
         /**
+         * USB Data automatic unlock
+         * @hide
+         */
+        public static final String USB_DATA_AUTO_UNLOCK = "usb_data_auto_unlock";
+
+        /**
          * Settings to backup. This is here so that it's in the same place as the settings
          * keys and easy to update.
          *
diff --git a/services/usb/java/com/android/server/usb/UsbDeviceManager.java b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
index 3590e46..c705602 100644
--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
@@ -74,7 +74,7 @@ public class UsbDeviceManager {
     private static final boolean DEBUG = false;
 
     /**
-     * The persistent property which stores whether adb is enabled or not.
+     * The persistent property which stores whether adb is enabled or not, and the user default usb state.
      * May also contain vendor-specific default functions for testing purposes.
      */
     private static final String USB_PERSISTENT_CONFIG_PROPERTY = "persist.sys.usb.config";
@@ -165,6 +165,19 @@ public class UsbDeviceManager {
         }
     }
 
+    private class UsbDataSettingsObserver extends ContentObserver {
+        public UsbDataSettingsObserver() {
+            super(null);
+        }
+        @Override
+        public void onChange(boolean selfChange) {
+            boolean unlocked = (Settings.System.getInt(mContentResolver,
+                    Settings.System.USB_DATA_AUTO_UNLOCK, 0) > 0);
+            mHandler.sendMessage(MSG_SET_USB_DATA_UNLOCKED, unlocked);
+            Slog.d(TAG, "AUTO_UNLOCK IS CHANGED.");
+        }
+    }
+
     /*
      * Listens for uevent messages from the kernel to monitor the USB state
      */
@@ -324,7 +337,7 @@ public class UsbDeviceManager {
         private boolean mSourcePower;
         private boolean mSinkPower;
         private boolean mConfigured;
-        private boolean mUsbDataUnlocked;
+        private boolean mUsbDataUnlocked = isUsbDataSetToUnlocked();
         private String mCurrentFunctions;
         private boolean mCurrentFunctionsApplied;
         private UsbAccessory mCurrentAccessory;
@@ -357,11 +370,16 @@ public class UsbDeviceManager {
                 String state = FileUtils.readTextFile(new File(STATE_PATH), 0, null).trim();
                 updateState(state);
 
-                // register observer to listen for settings changes
+                // register observer to listen for adb settings changes
                 mContentResolver.registerContentObserver(
                         Settings.Global.getUriFor(Settings.Global.ADB_ENABLED),
                                 false, new AdbSettingsObserver());
 
+                // register observer to listen for usb data settings changes
+                mContentResolver.registerContentObserver(
+                        Settings.System.getUriFor(Settings.System.USB_DATA_AUTO_UNLOCK),
+                                false, new UsbDataSettingsObserver());
+
                 ContentObserver adbNotificationObserver = new ContentObserver(null) {
                     @Override
                     public void onChange(boolean selfChange) {
@@ -462,6 +480,8 @@ public class UsbDeviceManager {
             // we always set it due to b/23631400, where adbd was getting killed
             // and not restarted due to property timeouts on some devices
             SystemProperties.set(USB_CONFIG_PROPERTY, config);
+            // set the persistent value too (to survive reboots)
+            SystemProperties.set(USB_PERSISTENT_CONFIG_PROPERTY, config);
             return waitForState(config);
         }
 
@@ -743,7 +763,7 @@ public class UsbDeviceManager {
                 case MSG_UPDATE_STATE:
                     mConnected = (msg.arg1 == 1);
                     mConfigured = (msg.arg2 == 1);
-                    if (!mConnected) {
+                    if (!mConnected && !isUsbDataSetToUnlocked()) {
                         // When a disconnect occurs, relock access to sensitive user data
                         mUsbDataUnlocked = false;
                     }
@@ -752,7 +772,7 @@ public class UsbDeviceManager {
                     if (UsbManager.containsFunction(mCurrentFunctions,
                             UsbManager.USB_FUNCTION_ACCESSORY)) {
                         updateCurrentAccessory();
-                    } else if (!mConnected) {
+                    } else if (!mConnected && !isUsbDataSetToUnlocked()) {
                         // restore defaults when USB is disconnected
                         setEnabledFunctions(null, false);
                     }
@@ -1018,6 +1038,11 @@ public class UsbDeviceManager {
         return UsbManager.containsFunction(SystemProperties.get(USB_CONFIG_PROPERTY), function);
     }
 
+    public boolean isUsbDataSetToUnlocked() {
+        return (Settings.System.getInt(mContentResolver,
+                    Settings.System.USB_DATA_AUTO_UNLOCK, 0) > 0);
+    }
+
     public void setCurrentFunctions(String functions) {
         if (DEBUG) Slog.d(TAG, "setCurrentFunctions(" + functions + ")");
         mHandler.sendMessage(MSG_SET_CURRENT_FUNCTIONS, functions);
-- 
2.9.3

