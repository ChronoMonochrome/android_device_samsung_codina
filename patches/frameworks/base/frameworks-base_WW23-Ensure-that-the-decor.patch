Subject: [PATCH] Ensure that the decor view is attached to window.

In paticular case, the preserve DecorView object may not attach to window,and
when update the decor view layout params, WMS found that it not attached to
window manager will throw IllegalArgumentException, it will lead app to crash.

Test: activity switch case, multi-window case [work fine]

diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index e4880b0..4ee0eda 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -119,6 +119,7 @@
 import com.android.internal.app.ToolbarActionBar;
 import com.android.internal.app.WindowDecorActionBar;
 import com.android.internal.policy.PhoneWindow;
+import com.android.internal.policy.DecorView;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -5133,6 +5134,7 @@
             ViewManager wm = getWindowManager();
             wm.addView(mDecor, getWindow().getAttributes());
             mWindowAdded = true;
+            DecorView.setAddedToWindow(mDecor);
         }
         mDecor.setVisibility(View.VISIBLE);
     }
diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index c7fc860..fd44de6 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -118,6 +118,7 @@
 import com.android.internal.os.RuntimeInit;
 import com.android.internal.os.SamplingProfilerIntegration;
 import com.android.internal.os.SomeArgs;
+import com.android.internal.policy.DecorView;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.FastPrintWriter;
 import com.android.org.conscrypt.OpenSSLSocketImpl;
@@ -3523,7 +3524,10 @@
                 l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
                 l.softInputMode |= forwardBit;
                 if (r.mPreserveWindow) {
-                    a.mWindowAdded = true;
+                    // if the preserve decor view is not attached to window, we
+                    // should make sure that it will been attached in the following
+                    // workflow.
+                    if(DecorView.isAddedToWindow(decor)) a.mWindowAdded = true;
                     r.mPreserveWindow = false;
                     // Normally the ViewRoot sets up callbacks with the Activity
                     // in addView->ViewRootImpl#setView. If we are instead reusing
@@ -3537,6 +3541,7 @@
                 if (a.mVisibleFromClient && !a.mWindowAdded) {
                     a.mWindowAdded = true;
                     wm.addView(decor, l);
+                    DecorView.setAddedToWindow(a.mDecor);
                 }
 
             // If the window has already been added, but during resume
diff --git a/core/java/com/android/internal/policy/DecorView.java b/core/java/com/android/internal/policy/DecorView.java
index 92ab324..04ee279 100644
--- a/core/java/com/android/internal/policy/DecorView.java
+++ b/core/java/com/android/internal/policy/DecorView.java
@@ -230,6 +230,8 @@
     private final Paint mVerticalResizeShadowPaint = new Paint();
     private final Paint mHorizontalResizeShadowPaint = new Paint();
 
+    private boolean mIsAddedToWindow = false;
+
     DecorView(Context context, int featureId, PhoneWindow window,
             WindowManager.LayoutParams params) {
         super(context);
@@ -2395,4 +2397,17 @@
             }
         }
     }
+
+    public static void setAddedToWindow(View v) {
+        if (v instanceof DecorView) {
+            ((DecorView) v).mIsAddedToWindow = true;
+        }
+    }
+
+    public static boolean isAddedToWindow(View v) {
+        if (v instanceof DecorView) {
+            return ((DecorView) v).mIsAddedToWindow;
+        }
+        return false;
+    }
 }
