From 2e349fc9d6df527ff1ffd809e0345f5aa99ba2bc Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:09:32 +0700
Subject: [PATCH 22/64] Revert "Navbar: alternate layouts"

This reverts commit 04f53270e1488fe6f9fb3ddd00984176e408db89.
---
 core/java/android/provider/Settings.java           |  30 ---
 .../com/android/internal/statusbar/IStatusBar.aidl |   1 -
 .../internal/statusbar/IStatusBarService.aidl      |   1 -
 .../android/internal/util/aokp/AwesomeAction.java  |  19 --
 .../android/internal/util/aokp/NavBarHelpers.java  |   2 -
 .../android/internal/util/aokp/NavRingHelpers.java |   2 -
 .../internal/util/vanir/AwesomeConstants.java      |   2 -
 .../res/drawable-xxhdpi/ic_sysbar_layout_left.png  | Bin 3823 -> 0 bytes
 .../res/drawable-xxhdpi/ic_sysbar_layout_right.png | Bin 3874 -> 0 bytes
 packages/SystemUI/res/values/vanir_dimens.xml      |   2 +-
 .../android/systemui/statusbar/BaseStatusBar.java  |   2 -
 .../android/systemui/statusbar/CommandQueue.java   |   5 -
 .../statusbar/phone/NavigationBarView.java         | 230 ++++-------------
 .../systemui/statusbar/phone/PhoneStatusBar.java   |   6 -
 .../statusbar/policy/LayoutChangerButtonView.java  | 278 ---------------------
 .../android/server/StatusBarManagerService.java    |   8 -
 16 files changed, 47 insertions(+), 541 deletions(-)
 delete mode 100644 packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_left.png
 delete mode 100644 packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_right.png
 delete mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 1ab9e9b..410a4ad 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3324,36 +3324,6 @@ public final class Settings {
         public static final String ENABLE_NAVIGATION_BAR = "enable_navigation_bar";
 
         /**
-         * Alternate navigation bar layouts
-         * @hide
-         */
-        public static final String NAVIGATION_BAR_ALTERNATE_LAYOUTS = "navigation_bar_alternate_layouts";
-
-        /**
-         * Alternate layout 2
-         * @hide
-         */
-        public static final String NAVIGATION_BAR_BUTTONS_TWO = "navigation_bar_buttons_two";
-
-        /**
-         * Alternate layout 3
-         * @hide
-         */
-        public static final String NAVIGATION_BAR_BUTTONS_THREE = "navigation_bar_buttons_three";
-
-        /**
-         * Alternate layout 4
-         * @hide
-         */
-        public static final String NAVIGATION_BAR_BUTTONS_FOUR = "navigation_bar_buttons_four";
-
-        /**
-         * Alternate layout 5
-         * @hide
-         */
-        public static final String NAVIGATION_BAR_BUTTONS_FIVE = "navigation_bar_buttons_five";
-
-        /**
          * Allow navigation bar side keys
          * @hide
          */
diff --git a/core/java/com/android/internal/statusbar/IStatusBar.aidl b/core/java/com/android/internal/statusbar/IStatusBar.aidl
index ea85b1f..927b9e6 100644
--- a/core/java/com/android/internal/statusbar/IStatusBar.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBar.aidl
@@ -41,5 +41,4 @@ oneway interface IStatusBar
     void cancelPreloadRecentApps();
     void setWindowState(int window, int state);
     void setButtonDrawable(int buttonId, int iconId);
-    void notifyLayoutChange(int direction);
 }
diff --git a/core/java/com/android/internal/statusbar/IStatusBarService.aidl b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
index 0d31583..ab8e2b0 100644
--- a/core/java/com/android/internal/statusbar/IStatusBarService.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
@@ -36,7 +36,6 @@ interface IStatusBarService
     void animateNotificationsOrSettingsPanel();
     void setCurrentUser(int newUserId);
     void setButtonDrawable(int buttonId, int iconId);
-    void notifyLayoutChange(int direction);
 
     // ---- Methods below are for use by the status bar policy services ----
     // You need the STATUS_BAR_SERVICE permission
diff --git a/core/java/com/android/internal/util/aokp/AwesomeAction.java b/core/java/com/android/internal/util/aokp/AwesomeAction.java
index 8554f0f..c6e88a9 100755
--- a/core/java/com/android/internal/util/aokp/AwesomeAction.java
+++ b/core/java/com/android/internal/util/aokp/AwesomeAction.java
@@ -61,9 +61,6 @@ public class AwesomeAction {
 
     public static final String TAG = "AwesomeAction";
 
-    private static final int LAYOUT_LEFT = -1;
-    private static final int LAYOUT_RIGHT = 1;
-
     private static final int STANDARD_FLAGS = KeyEvent.FLAG_FROM_SYSTEM | KeyEvent.FLAG_VIRTUAL_HARD_KEY;
     private static final int CURSOR_FLAGS = KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE;
 
@@ -222,22 +219,6 @@ public class AwesomeAction {
                 }
                 break;
 
-            case ACTION_LAYOUT_LEFT:
-                try {
-                    IStatusBarService.Stub.asInterface(
-                            ServiceManager.getService(mContext.STATUS_BAR_SERVICE)).notifyLayoutChange(LAYOUT_LEFT);
-                } catch (RemoteException e) {
-                }
-                break;
-
-            case ACTION_LAYOUT_RIGHT:
-                try {
-                    IStatusBarService.Stub.asInterface(
-                            ServiceManager.getService(mContext.STATUS_BAR_SERVICE)).notifyLayoutChange(LAYOUT_RIGHT);
-                } catch (RemoteException e) {
-                }
-                break;
-
             case ACTION_RING_SILENT:
                 final AudioManager rs = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
                 if (rs != null) {
diff --git a/core/java/com/android/internal/util/aokp/NavBarHelpers.java b/core/java/com/android/internal/util/aokp/NavBarHelpers.java
index f00fe62..062ea09 100644
--- a/core/java/com/android/internal/util/aokp/NavBarHelpers.java
+++ b/core/java/com/android/internal/util/aokp/NavBarHelpers.java
@@ -42,8 +42,6 @@ public class NavBarHelpers {
             AwesomeConstant.ACTION_RING_VIB_SILENT,
             AwesomeConstant.ACTION_NULL,
             AwesomeConstant.ACTION_POWER,
-            AwesomeConstant.ACTION_LAYOUT_LEFT,
-            AwesomeConstant.ACTION_LAYOUT_RIGHT,
             AwesomeConstant.ACTION_ARROW_LEFT,
             AwesomeConstant.ACTION_ARROW_RIGHT,
             AwesomeConstant.ACTION_ARROW_UP,
diff --git a/core/java/com/android/internal/util/aokp/NavRingHelpers.java b/core/java/com/android/internal/util/aokp/NavRingHelpers.java
index fb214bb..1325ca4 100644
--- a/core/java/com/android/internal/util/aokp/NavRingHelpers.java
+++ b/core/java/com/android/internal/util/aokp/NavRingHelpers.java
@@ -69,8 +69,6 @@ public class NavRingHelpers {
             AwesomeConstant.ACTION_POWER,
             AwesomeConstant.ACTION_WIDGETS,
             AwesomeConstant.ACTION_APP_WINDOW,
-            AwesomeConstant.ACTION_LAYOUT_LEFT,
-            AwesomeConstant.ACTION_LAYOUT_RIGHT,
             AwesomeConstant.ACTION_ARROW_LEFT,
             AwesomeConstant.ACTION_ARROW_RIGHT,
             AwesomeConstant.ACTION_ARROW_UP,
diff --git a/core/java/com/android/internal/util/vanir/AwesomeConstants.java b/core/java/com/android/internal/util/vanir/AwesomeConstants.java
index a403f8e..a911509 100644
--- a/core/java/com/android/internal/util/vanir/AwesomeConstants.java
+++ b/core/java/com/android/internal/util/vanir/AwesomeConstants.java
@@ -64,8 +64,6 @@ public class AwesomeConstants {
         ACTION_TORCH          ("**torch**",           com.android.internal.R.string.action_torch,         "com.android.systemui:drawable/ic_sysbar_torch"),
 
         /* unassignable actions */
-        ACTION_LAYOUT_LEFT    ("**layout_left**",     com.android.internal.R.string.action_null,          "com.android.systemui:drawable/ic_sysbar_layout_left"),
-        ACTION_LAYOUT_RIGHT    ("**layout_right**",   com.android.internal.R.string.action_null,          "com.android.systemui:drawable/ic_sysbar_layout_right"),
         ACTION_ARROW_LEFT     ("**arrow_left**",      com.android.internal.R.string.action_null,          "com.android.systemui:drawable/ic_sysbar_ime_left"),
         ACTION_ARROW_RIGHT    ("**arrow_right**",     com.android.internal.R.string.action_null,          "com.android.systemui:drawable/ic_sysbar_ime_right"),
         ACTION_ARROW_UP       ("**arrow_up**",        com.android.internal.R.string.action_null,          "com.android.systemui:drawable/ic_sysbar_ime_up"),
diff --git a/packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_left.png b/packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_left.png
deleted file mode 100644
index 70bdf8166bf73b4af92fcf238b02365f7243ff22..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3823
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
M!~hAa)4%oPe_|g=4gdfE

diff --git a/packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_right.png b/packages/SystemUI/res/drawable-xxhdpi/ic_sysbar_layout_right.png
deleted file mode 100644
index 53ba84793bfbde63b6d4fa6fcb7816af778909cb..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3874
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
D&=FXw

diff --git a/packages/SystemUI/res/values/vanir_dimens.xml b/packages/SystemUI/res/values/vanir_dimens.xml
index 36e5446..dc60d8a 100644
--- a/packages/SystemUI/res/values/vanir_dimens.xml
+++ b/packages/SystemUI/res/values/vanir_dimens.xml
@@ -46,7 +46,7 @@
     <dimen name="ad_ampm_font_size">32dp</dimen>
 
     <!-- Gesture panel add button text size -->
-    <dimen name="gesture_panel_text_size">10sp</dimen>
+    <dimen name="gesture_panel_text_size">10dp</dimen>
 
     <!-- Constant for hidden ribbon drag handle -->
     <dimen name="ribbon_drag_handle_height">25dp</dimen>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index b81cfd9..afc6a35 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -942,8 +942,6 @@ public abstract class BaseStatusBar extends SystemUI implements
     public void onHeadsUpDismissed() {
     }
 
-    public void notifyLayoutChange(int direction) { }
-
     @Override
     public void toggleRecentApps() {
         int msg = MSG_TOGGLE_RECENTS_PANEL;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
index 1be122e..88591d8 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
@@ -103,7 +103,6 @@ public class CommandQueue extends IStatusBar.Stub {
         public void cancelPreloadRecentApps();
         public void setWindowState(int window, int state);
         public void setButtonDrawable(int buttonId, int iconId);
-        public void notifyLayoutChange(int direction);
     }
 
     public CommandQueue(Callbacks callbacks, StatusBarIconList list) {
@@ -119,10 +118,6 @@ public class CommandQueue extends IStatusBar.Stub {
         }
     }
 
-    public void notifyLayoutChange(int direction) {
-        mCallbacks.notifyLayoutChange(direction);
-    }
-
     public void setButtonDrawable(int buttonId, int iconId) {
         mCallbacks.setButtonDrawable(buttonId, iconId);
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 3fb1792..1f69049 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -41,10 +41,7 @@ import android.os.RemoteException;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.Log;
-import android.view.animation.Animation;
-import android.view.animation.AlphaAnimation;
 import android.view.Display;
-import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
@@ -63,8 +60,6 @@ import com.android.systemui.R;
 import com.android.systemui.statusbar.BaseStatusBar;
 import com.android.systemui.statusbar.DelegateViewHelper;
 import com.android.systemui.statusbar.policy.DeadZone;
-import com.android.systemui.statusbar.policy.LayoutChangerButtonView;
-import com.android.systemui.statusbar.policy.LayoutChangerButtonView.LayoutButtonInfo;
 import com.android.systemui.statusbar.policy.KeyButtonView;
 import com.android.systemui.statusbar.policy.KeyButtonView.AwesomeButtonInfo;
 
@@ -98,16 +93,8 @@ public class NavigationBarView extends LinearLayout {
 
     final boolean mTablet = isTablet(mContext);
 
-    ArrayList<ArrayList<AwesomeButtonInfo>> mAllButtonContainers = new ArrayList<ArrayList<AwesomeButtonInfo>>();
-    ArrayList<AwesomeButtonInfo> mIMEKeyArray = new ArrayList<AwesomeButtonInfo>();
-
-    public static int mRightStopKey = 6;
-
-    String mButtonContainerString_1;
-    String mButtonContainerString_2;
-    String mButtonContainerString_3;
-    String mButtonContainerString_4;
-    String mButtonContainerString_5;
+    private ArrayList<AwesomeButtonInfo> mNavButtons = new ArrayList<AwesomeButtonInfo>();
+    private ArrayList<AwesomeButtonInfo> mIMEKeyArray = new ArrayList<AwesomeButtonInfo>();
 
     private ContentObserver mSettingsObserver;
     private ContentObserver mDisablePrefsObserver;
@@ -122,12 +109,11 @@ public class NavigationBarView extends LinearLayout {
 
     private boolean mPrefNavring;
     private boolean mPrefLockscreen;
-    private boolean mLegacyMenu;
+    private String mPrimaryButtons;
+    private boolean mSideKeys;
     private boolean mArrows;
     private String mIMEKeyLayout;
-    private boolean showingIME;
-    private int mButtonLayouts;
-    private int mCurrentLayout = 1; // Default
+    boolean showingIME;
 
     // workaround for LayoutTransitions leaving the nav buttons in a weird state (bug 5549288)
     final static boolean WORKAROUND_INVALID_LAYOUT = true;
@@ -273,23 +259,20 @@ public class NavigationBarView extends LinearLayout {
         mBarTransitions = new NavigationBarTransitions(this);
         mBarTransitions.updateResources(res);
 
-        mLegacyMenu = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
+        mSideKeys = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
         mArrows = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
-        mButtonContainerString_1 = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS);
-        mButtonLayouts = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_ALTERNATE_LAYOUTS, 1);
-        if (mButtonLayouts > 1) {
-            mRightStopKey = mButtonLayouts + 1;
-            mButtonContainerString_2 = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS_TWO);
-            mButtonContainerString_3 = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS_THREE);
-            mButtonContainerString_4 = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS_FOUR);
-            mButtonContainerString_5 = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS_FIVE);
-        } else {
-            mCurrentLayout = 1;
+        mPrimaryButtons = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS);
+        if (mPrimaryButtons == null || mPrimaryButtons.isEmpty()) {
+            mPrimaryButtons = AwesomeConstants.defaultNavbarLayout(mContext);
         }
         mIMEKeyLayout = Settings.System.getString(cr, Settings.System.NAVIGATION_IME_LAYOUT);
+        if (mIMEKeyLayout == null || mIMEKeyLayout.isEmpty()) {
+            mIMEKeyLayout = AwesomeConstants.defaultIMEKeyLayout(mContext);
+        }
 
         mCameraDisabledByDpm = isCameraDisabledByDpm();
         watchForDevicePolicyChanges();
+
         mLockPatternUtils = new LockPatternUtils(context);
     }
 
@@ -347,14 +330,6 @@ public class NavigationBarView extends LinearLayout {
         return mCurrentView.findViewWithTag(AwesomeConstant.ACTION_RECENTS.value());
     }
 
-    public View getLeftLayoutButton() {
-        return mCurrentView.findViewWithTag(AwesomeConstant.ACTION_LAYOUT_LEFT.value());
-    }
-
-    public View getRightLayoutButton() {
-        return mCurrentView.findViewWithTag(AwesomeConstant.ACTION_LAYOUT_RIGHT.value());
-    }
-
     public View getMenuButton() {
         return mCurrentView.findViewById(mMenuButtonId);
     }
@@ -472,10 +447,12 @@ public class NavigationBarView extends LinearLayout {
         }
     }
 
+    // Introduce a runnable to handle to handle navbar changes in the background cgroup.
+    // This will eventually be used for switching to alternate key layout containers also
     final Runnable mSetCustomBarLayout = new Runnable() {
         @Override
         public void run() {
-            setupNavigationButtons(getCurrentButtonArray());
+            setupNavigationButtons();
             if (getBackButton() != null) {
                 if (showingIME) {
                     ((ImageView) getBackButton()).setImageResource(R.drawable.ic_sysbar_back_ime);
@@ -487,23 +464,6 @@ public class NavigationBarView extends LinearLayout {
         }
     };
 
-    public void notifyLayoutChange(int direction) {
-        mCurrentLayout = (mCurrentLayout + direction);
-        mHandler.post(mNotifyLayoutChanged);
-    }
-
-    final Runnable mNotifyLayoutChanged = new Runnable() {
-        @Override
-        public void run() {
-            if (mCurrentLayout <= 0) {
-                mCurrentLayout = mButtonLayouts;
-            } else if (mCurrentLayout >= mRightStopKey) {
-                mCurrentLayout = 1;
-            }
-            setupNavigationButtons();
-        }
-    };
-
     public void setButtonDrawable(int buttonId, final int iconId) {
         final ImageView iv = (ImageView)getNotifsButton();
         mHandler.post(new Runnable() {
@@ -524,8 +484,6 @@ public class NavigationBarView extends LinearLayout {
 
         mDisabledFlags = disabledFlags;
 
-        if (getCurrentButtonArray().isEmpty()) return; // no buttons yet!
-
         final boolean disableHome = ((disabledFlags & View.STATUS_BAR_DISABLE_HOME) != 0);
         final boolean disableRecent = ((disabledFlags & View.STATUS_BAR_DISABLE_RECENT) != 0);
         final boolean disableBack = ((disabledFlags & View.STATUS_BAR_DISABLE_BACK) != 0)
@@ -553,6 +511,8 @@ public class NavigationBarView extends LinearLayout {
             }
         }
 
+        if (getCurrentButtonArray().isEmpty()) return; // no buttons yet!
+
         KeyButtonView[] allButtons = getAllButtons();
         for (KeyButtonView button : allButtons) {
 
@@ -581,12 +541,6 @@ public class NavigationBarView extends LinearLayout {
         setVisibleOrGone(getCameraButton(), showCamera);
         setVisibleOrGone(getNotifsButton(), showNotifs && mWasNotifsButtonVisible);
 
-        if (mButtonLayouts > 1) {
-            final boolean allowLayoutArrows = !disableHome && !showingIME;
-            setVisibleOrInvisible(getLeftLayoutButton(), allowLayoutArrows);
-            setVisibleOrInvisible(getRightLayoutButton(), allowLayoutArrows);
-        }
-
         mBarTransitions.applyBackButtonQuiescentAlpha(mBarTransitions.getMode(), true /*animate*/);
     }
 
@@ -645,14 +599,8 @@ public class NavigationBarView extends LinearLayout {
 
         mShowMenu = show;
 
-        if (mButtonLayouts > 1 && mLegacyMenu) {
-            if (getRightLayoutButton() != null) {
-                ((LayoutChangerButtonView) getRightLayoutButton()).setMenuAction(mShowMenu);
-            }
-        } else {
-            if (getMenuButton() != null) {
-                getMenuButton().setVisibility(mShowMenu ? View.VISIBLE : View.INVISIBLE);
-            }
+        if (getMenuButton() != null) {
+            getMenuButton().setVisibility(mShowMenu ? View.VISIBLE : View.INVISIBLE);
         }
     }
 
@@ -684,44 +632,27 @@ public class NavigationBarView extends LinearLayout {
             mSettingsObserver = new ContentObserver(new Handler()) {
                 @Override
                 public void onChange(boolean selfChange) {
-                    mButtonContainerString_1 = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS);
-                    mArrows = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
-                    mLegacyMenu = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
-                    mIMEKeyLayout = Settings.System.getString(r, Settings.System.NAVIGATION_IME_LAYOUT);
-                    mButtonLayouts = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_ALTERNATE_LAYOUTS, 1);
-                    if (mButtonLayouts > 1) {
-                        mRightStopKey = mButtonLayouts + 1;
-                        mButtonContainerString_2 = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS_TWO);
-                        mButtonContainerString_3 = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS_THREE);
-                        mButtonContainerString_4 = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS_FOUR);
-                        mButtonContainerString_5 = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS_FIVE);
+                    mPrimaryButtons = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS);
+                    if (mPrimaryButtons == null || mPrimaryButtons.isEmpty()) {
+                        mPrimaryButtons = AwesomeConstants.defaultNavbarLayout(mContext);
                     }
-                    if (mCurrentLayout > mButtonLayouts) {
-                        mCurrentLayout = mButtonLayouts;
-                    } else {
-                        mCurrentLayout = 1;
+                    mIMEKeyLayout = Settings.System.getString(r, Settings.System.NAVIGATION_IME_LAYOUT);
+                    if (mIMEKeyLayout == null || mIMEKeyLayout.isEmpty()) {
+                        mIMEKeyLayout = AwesomeConstants.defaultIMEKeyLayout(mContext);
                     }
+                    mArrows = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
+                    mSideKeys = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
                     loadButtonArrays();
                 }};
 
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS),
                     false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS_TWO),
-                    false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS_THREE),
-                    false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS_FOUR),
-                    false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS_FIVE),
-                    false, mSettingsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_SIDEKEYS),
                     false, mSettingsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_ARROWS),
                     false, mSettingsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_IME_LAYOUT),
                     false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_ALTERNATE_LAYOUTS),
-                    false, mSettingsObserver);
         }
 
         if (mDisablePrefsObserver == null) {
@@ -769,42 +700,20 @@ public class NavigationBarView extends LinearLayout {
     }
 
     private void loadButtonArrays() {
-        String[] userButtons = {};
-        String newButtons = "";
-        // load active navbar layouts
-        mAllButtonContainers.clear();
-
-        for (int j = 0; j < mButtonLayouts; j++) {
-            switch (j) {
-                case 0:
-                    newButtons = mButtonContainerString_1;
-                    break;
-                case 1:
-                    newButtons = mButtonContainerString_2;
-                    break;
-                case 2:
-                    newButtons = mButtonContainerString_3;
-                    break;
-                case 3:
-                    newButtons = mButtonContainerString_4;
-                    break;
-                case 4:
-                    newButtons = mButtonContainerString_5;
-                    break;
-            }
-            if (newButtons == null) {
-                newButtons = AwesomeConstants.defaultNavbarLayout(mContext);
+        String[] userButtons;
+        // Primary navbar
+        mNavButtons.clear();
+        userButtons = mPrimaryButtons.split("\\|");
+        if (userButtons != null) {
+            for (String button : userButtons) {
+                String[] actions = button.split(",", 4);
+                mNavButtons.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
             }
-            userButtons = newButtons.split("\\|");;
-            mAllButtonContainers.add(getButtonsArray(userButtons));
         }
-        // load special case IME layout
-        if (mArrows) {
-            mIMEKeyArray.clear();
-            if (userButtons == null) {
-                userButtons = AwesomeConstants.defaultIMEKeyLayout(mContext).split("\\|");
-            }
-            userButtons = mIMEKeyLayout.split("\\|");
+        // IME key layout
+        mIMEKeyArray.clear();
+        userButtons = mIMEKeyLayout.split("\\|");
+        if (userButtons != null) {
             for (String button : userButtons) {
                 String[] actions = button.split(",", 4);
                 mIMEKeyArray.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
@@ -813,18 +722,8 @@ public class NavigationBarView extends LinearLayout {
         setupNavigationButtons();
     }
 
-    private ArrayList<AwesomeButtonInfo> getButtonsArray(String[] userButtons) {
-        ArrayList<AwesomeButtonInfo> mButtonsContainer = new ArrayList<AwesomeButtonInfo>();
-        for (String button : userButtons) {
-            String[] actions = button.split(",", 4);
-            mButtonsContainer.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
-        }
-        return mButtonsContainer;
-    }
-
     private ArrayList<AwesomeButtonInfo> getCurrentButtonArray() {
-        if (mArrows && showingIME) return mIMEKeyArray;
-        return mAllButtonContainers.get(mCurrentLayout - 1);
+        return (mArrows && showingIME) ? mIMEKeyArray : mNavButtons;
     }
 
     private void setupNavigationButtons() {
@@ -835,39 +734,21 @@ public class NavigationBarView extends LinearLayout {
         final boolean stockThreeButtonLayout = buttonsArray.size() == 3;
         final int separatorSize = (int) mMenuButtonWidth;
         final int length = buttonsArray.size();
-        LinearLayout navButtons;
-        LinearLayout lightsOut;
-        boolean landscape;
 
         for (int i = 0; i <= 1; i++) {
-            landscape = (i == 1);
+            boolean landscape = (i == 1);
 
-            navButtons = (LinearLayout) (landscape ? mRotatedViews[Surface.ROTATION_90]
+            LinearLayout navButtons = (LinearLayout) (landscape ? mRotatedViews[Surface.ROTATION_90]
                     .findViewById(R.id.nav_buttons) : mRotatedViews[Surface.ROTATION_0]
                     .findViewById(R.id.nav_buttons));
-            lightsOut = (LinearLayout) (landscape ? mRotatedViews[Surface.ROTATION_90]
+            LinearLayout lightsOut = (LinearLayout) (landscape ? mRotatedViews[Surface.ROTATION_90]
                     .findViewById(R.id.lights_out) : mRotatedViews[Surface.ROTATION_0]
                     .findViewById(R.id.lights_out));
 
             navButtons.removeAllViews();
             lightsOut.removeAllViews();
 
-            if (mButtonLayouts > 1) {
-                if (!mArrows || !showingIME) {
-                    // left-side layout changer
-                    LayoutButtonInfo leftButtonInfo = new LayoutButtonInfo(AwesomeConstant.ACTION_LAYOUT_LEFT.value());
-                    LayoutChangerButtonView leftButton = new LayoutChangerButtonView(mContext, null);
-                    leftButton.setButtonActions(leftButtonInfo);
-                    leftButton.setImageResource(R.drawable.ic_sysbar_layout_left);
-                    leftButton.setLayoutParams(getLayoutParams(landscape, mMenuButtonWidth, 0f));
-                    leftButton.setGlowBackground(landscape ? R.drawable.ic_sysbar_highlight_land
-                            : R.drawable.ic_sysbar_highlight);
-                    // add the button and lights out views
-                    addButton(navButtons, leftButton, landscape);
-                    addLightsOutButton(lightsOut, leftButton, landscape, false);
-                }
-            }
-            if (mLegacyMenu && mButtonLayouts == 1) {
+            if (mSideKeys) {
                 if (mTablet) {
                     // offset menu button
                     addSeparator(navButtons, landscape, (int) mMenuButtonWidth, 0f);
@@ -907,7 +788,7 @@ public class NavigationBarView extends LinearLayout {
                 }
             }
 
-            if (mLegacyMenu && mButtonLayouts == 1) {
+            if (mSideKeys) {
                 // legacy menu button
                 AwesomeButtonInfo menuButtonInfo = new AwesomeButtonInfo(AwesomeConstant.ACTION_MENU.value(),
                         null, null, null);
@@ -938,25 +819,6 @@ public class NavigationBarView extends LinearLayout {
                     addLightsOutButton(lightsOut, menuButton, landscape, true);
                 }
             }
-            if (mButtonLayouts > 1) {
-                if (!mArrows || !showingIME) {
-                    // right-side layout changer button
-                    LayoutButtonInfo rightButtonInfo = new LayoutButtonInfo(mShowMenu
-                            ? AwesomeConstant.ACTION_MENU.value()
-                            : AwesomeConstant.ACTION_LAYOUT_RIGHT.value());
-                    LayoutChangerButtonView rightButton = new LayoutChangerButtonView(mContext, null);
-                    rightButton.setButtonActions(rightButtonInfo);
-                    rightButton.setImageResource(mShowMenu
-                            ? R.drawable.ic_sysbar_menu
-                            : R.drawable.ic_sysbar_layout_right);
-                    rightButton.setLayoutParams(getLayoutParams(landscape, mMenuButtonWidth, 0f));
-                    rightButton.setGlowBackground(landscape ? R.drawable.ic_sysbar_highlight_land
-                            : R.drawable.ic_sysbar_highlight);
-                    // add the button and lights out views
-                    addButton(navButtons, rightButton, landscape);
-                    addLightsOutButton(lightsOut, rightButton, landscape, false);
-                }
-            }
         }
         invalidate();
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index a73438d..3aee4bf 100755
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -3853,12 +3853,6 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     }
 
     @Override
-    public void notifyLayoutChange(int direction) {
-        mNavigationBarView.notifyLayoutChange(direction);
-        mHandler.postDelayed(new Runnable() { public void run() { updateNavigationBarState(); }}, 20);
-    }
-
-    @Override
     public void setButtonDrawable(int buttonId, int iconId) {
         if (mNavigationBarView != null) {
             mNavigationBarView.setButtonDrawable(buttonId, iconId);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
deleted file mode 100644
index 8f820aa..0000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * Copyright (C) 2014 VanirAOSP && The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.statusbar.policy;
-
-import android.animation.Animator;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.HapticFeedbackConstants;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-import android.view.View;
-import android.view.ViewConfiguration;
-import android.view.accessibility.AccessibilityEvent;
-import android.widget.ImageView;
-
-import com.android.internal.util.aokp.AwesomeAction;
-import com.android.internal.util.aokp.NavBarHelpers;
-import com.android.internal.util.vanir.AwesomeConstants;
-import com.android.internal.util.vanir.AwesomeConstants.AwesomeConstant;
-import com.android.systemui.R;
-
-public class LayoutChangerButtonView extends ImageView {
-    private static final String TAG = "StatusBar.LayoutChangerButtonView";
-    public static final String ACTION_MENU = AwesomeConstant.ACTION_MENU.value();
-    public static final String LAYOUT_RIGHT = AwesomeConstant.ACTION_LAYOUT_RIGHT.value();
-
-    final float GLOW_MAX_SCALE_FACTOR = 1.8f;
-    public static final float DEFAULT_QUIESCENT_ALPHA = 0.25f;
-
-    int mTouchSlop;
-    Drawable mGlowBG;
-    int mGlowWidth, mGlowHeight;
-    float mGlowAlpha = 0f, mGlowScale = 1f;
-    float mDrawingAlpha = 1f;
-    float mQuiescentAlpha = DEFAULT_QUIESCENT_ALPHA;
-    RectF mRect = new RectF();
-    AnimatorSet mPressedAnim;
-    Animator mAnimateToQuiescent = new ObjectAnimator();
-    AnimatorSet as = mPressedAnim = new AnimatorSet();
-
-    LayoutButtonInfo mActions;
-
-    public LayoutChangerButtonView(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public LayoutChangerButtonView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs);
-
-        setDrawingAlpha(mQuiescentAlpha);
-        if (mGlowBG != null) {
-            mGlowWidth = mGlowBG.getIntrinsicWidth();
-            mGlowHeight = mGlowBG.getIntrinsicHeight();
-        }
-
-        setClickable(true);
-        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
-        setLongClickable(false);
-    }
-
-    public void setButtonActions(LayoutButtonInfo actions) {
-        this.mActions = actions;
-        setTag(mActions.singleAction); // should be OK even if it's null
-        setImage();
-    }
-
-    public void setMenuAction(boolean show) {
-        if (show) {
-            mActions.singleAction = ACTION_MENU;
-            setImageResource(R.drawable.ic_sysbar_menu);
-        } else {
-            mActions.singleAction = LAYOUT_RIGHT;
-            setImageResource(R.drawable.ic_sysbar_layout_right);
-        }
-    }
-
-    public void setImage() {
-        setImageDrawable(NavBarHelpers.getIconImage(mContext, LAYOUT_RIGHT));
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (mGlowBG != null) {
-            canvas.save();
-            final int w = getWidth();
-            final int h = getHeight();
-            final float aspect = (float) mGlowWidth / mGlowHeight;
-            final int drawW = (int) (h * aspect);
-            final int drawH = h;
-            final int margin = (drawW - w) / 2;
-            canvas.scale(mGlowScale, mGlowScale, w * 0.5f, h * 0.5f);
-            mGlowBG.setBounds(-margin, 0, drawW - margin, drawH);
-            mGlowBG.setAlpha((int) (mDrawingAlpha * mGlowAlpha * 255));
-            mGlowBG.draw(canvas);
-            canvas.restore();
-            mRect.right = w;
-            mRect.bottom = h;
-        }
-        super.onDraw(canvas);
-    }
-
-    public void setQuiescentAlpha(float alpha, boolean animate) {
-        mAnimateToQuiescent.cancel();
-        alpha = Math.min(Math.max(alpha, 0), 1);
-        if (alpha == mQuiescentAlpha && alpha == mDrawingAlpha) return;
-        mQuiescentAlpha = alpha;
-        if (mGlowBG != null && animate) {
-            mAnimateToQuiescent = animateToQuiescent();
-            mAnimateToQuiescent.start();
-        } else {
-            setDrawingAlpha(mQuiescentAlpha);
-        }
-    }
-
-    private ObjectAnimator animateToQuiescent() {
-        return ObjectAnimator.ofFloat(this, "drawingAlpha", mQuiescentAlpha);
-    }
-
-    public float getQuiescentAlpha() {
-        return mQuiescentAlpha;
-    }
-
-    public float getDrawingAlpha() {
-        return mDrawingAlpha;
-    }
-
-    public void setDrawingAlpha(float x) {
-        setAlpha((int) (x * 255));
-        mDrawingAlpha = x;
-    }
-
-    public float getGlowAlpha() {
-        if (mGlowBG == null) return 0;
-        return mGlowAlpha;
-    }
-
-    public void setGlowAlpha(float x) {
-        if (mGlowBG == null) return;
-        mGlowAlpha = x;
-        invalidate();
-    }
-
-    public float getGlowScale() {
-        if (mGlowBG == null) return 0;
-        return mGlowScale;
-    }
-
-    public void setGlowScale(float x) {
-        if (mGlowBG == null) return;
-        mGlowScale = x;
-        final float w = getWidth();
-        final float h = getHeight();
-        if (GLOW_MAX_SCALE_FACTOR <= 1.0f) {
-            // this only works if we know the glow will never leave our bounds
-            invalidate();
-        } else {
-            final float rx = (w * (GLOW_MAX_SCALE_FACTOR - 1.0f)) / 2.0f + 1.0f;
-            final float ry = (h * (GLOW_MAX_SCALE_FACTOR - 1.0f)) / 2.0f + 1.0f;
-            com.android.systemui.SwipeHelper.invalidateGlobalRegion(
-                    this,
-                    new RectF(getLeft() - rx,
-                            getTop() - ry,
-                            getRight() + rx,
-                            getBottom() + ry));
-
-            if (getParent() != null) ((View) getParent()).invalidate();
-        }
-    }
-
-    public void setPressed(boolean pressed) {
-        if (mGlowBG != null) {
-            if (pressed != isPressed()) {
-                if (mPressedAnim != null && mPressedAnim.isRunning()) {
-                    mPressedAnim.cancel();
-                }
-                if (pressed) {
-                    if (mGlowScale < GLOW_MAX_SCALE_FACTOR)
-                        mGlowScale = GLOW_MAX_SCALE_FACTOR;
-                    if (mGlowAlpha < mQuiescentAlpha)
-                        mGlowAlpha = mQuiescentAlpha;
-                    setDrawingAlpha(1f);
-                    as.playTogether(
-                            ObjectAnimator.ofFloat(this, "glowAlpha", 1f),
-                            ObjectAnimator.ofFloat(this, "glowScale", GLOW_MAX_SCALE_FACTOR)
-                    );
-                    as.setDuration(50);
-                } else {
-                    mAnimateToQuiescent.cancel();
-                    mAnimateToQuiescent = animateToQuiescent();
-                    as.playTogether(
-                            ObjectAnimator.ofFloat(this, "glowAlpha", 0f),
-                            ObjectAnimator.ofFloat(this, "glowScale", 1f),
-                            mAnimateToQuiescent
-                    );
-                    as.setDuration(500);
-                }
-                as.start();
-            }
-        }
-        super.setPressed(pressed);
-    }
-
-    public boolean onTouchEvent(MotionEvent ev) {
-        final int action = ev.getAction();
-        switch (action) {
-            case MotionEvent.ACTION_DOWN:
-                setPressed(true);
-                performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-                break;
-            case MotionEvent.ACTION_MOVE:
-                int x = (int) ev.getX();
-                int y = (int) ev.getY();
-                setPressed(x >= -mTouchSlop
-                        && x < getWidth() + mTouchSlop
-                        && y >= -mTouchSlop
-                        && y < getHeight() + mTouchSlop);
-                break;
-            case MotionEvent.ACTION_CANCEL:
-                setPressed(false);
-                break;
-            case MotionEvent.ACTION_UP:
-                boolean playSound = isPressed();
-                setPressed(false);
-                if (playSound) {
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                }
-                doSinglePress();
-                break;
-        }
-        return true;
-    }
-
-    private void doSinglePress() {
-        if (callOnClick()) {
-            sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
-        }
-        AwesomeAction.launchAction(mContext, mActions.singleAction);
-        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
-    }
-
-    public void setGlowBackground(int resId) {
-        mGlowBG = getResources().getDrawable(resId);
-        if (mGlowBG != null) {
-            setDrawingAlpha(mDrawingAlpha);
-            mGlowWidth = mGlowBG.getIntrinsicWidth();
-            mGlowHeight = mGlowBG.getIntrinsicHeight();
-        }
-    }
-
-    public static class LayoutButtonInfo {
-        String singleAction;
-
-        public LayoutButtonInfo(String singleTap) {
-            this.singleAction = singleTap;
-        }
-    }
-}
diff --git a/services/java/com/android/server/StatusBarManagerService.java b/services/java/com/android/server/StatusBarManagerService.java
index 6a292a8..e710e42 100644
--- a/services/java/com/android/server/StatusBarManagerService.java
+++ b/services/java/com/android/server/StatusBarManagerService.java
@@ -383,14 +383,6 @@ public class StatusBarManagerService extends IStatusBarService.Stub
         });
     }
 
-    public void notifyLayoutChange(int direction) {
-        if (mBar != null) {
-            try {
-                mBar.notifyLayoutChange(direction);
-            } catch (RemoteException ex) { }
-        }
-    }
-
     @Override
     public void toggleRecentApps() {
         if (mBar != null) {
-- 
2.5.0

