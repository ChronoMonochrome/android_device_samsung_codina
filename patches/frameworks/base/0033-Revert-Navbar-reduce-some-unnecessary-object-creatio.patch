From 7237ee6e9600be7e976a0568863c286bcc52ec03 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:31:02 +0700
Subject: [PATCH 33/64] Revert "Navbar: reduce some unnecessary object
 creation"

This reverts commit 83e210497588141f96a59fe2b0b15ce5db209230.
---
 .../android/internal/util/aokp/AwesomeAction.java  | 76 ++++++++++++----------
 .../systemui/statusbar/policy/KeyButtonView.java   | 10 +--
 2 files changed, 48 insertions(+), 38 deletions(-)

diff --git a/core/java/com/android/internal/util/aokp/AwesomeAction.java b/core/java/com/android/internal/util/aokp/AwesomeAction.java
index a4e389a..c1b7741 100755
--- a/core/java/com/android/internal/util/aokp/AwesomeAction.java
+++ b/core/java/com/android/internal/util/aokp/AwesomeAction.java
@@ -60,6 +60,7 @@ import com.android.internal.util.cm.ActionUtils;
 public class AwesomeAction {
 
     public static final String TAG = "AwesomeAction";
+    public static final String NULL_ACTION = AwesomeConstant.ACTION_NULL.value();
 
     private static final int STANDARD_FLAGS = KeyEvent.FLAG_FROM_SYSTEM | KeyEvent.FLAG_VIRTUAL_HARD_KEY;
     private static final int CURSOR_FLAGS = KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE;
@@ -76,12 +77,12 @@ public class AwesomeAction {
         mCurrentUserId = newUserId;
     }
 
-    private static InputManager im = InputManager.getInstance();
-    private static Handler mHandler = new Handler();
-
     public static boolean launchAction(final Context mContext, final String action) {
+        if (TextUtils.isEmpty(action) || action.equals(NULL_ACTION)) {
+            return false;
+        }
         AwesomeConstant AwesomeEnum = fromString(action);
-
+        AudioManager am;
         switch (AwesomeEnum) {
             case ACTION_HOME:
                 IWindowManager mWindowManagerService = WindowManagerGlobal.getWindowManagerService();
@@ -122,7 +123,6 @@ public class AwesomeAction {
                 if (isIntentAvailable(mContext, intent))
                     mContext.startActivity(intent);
                 break;
-
             case ACTION_VOICEASSIST:
                 Intent intentVoice = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
                 intentVoice.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -192,6 +192,9 @@ public class AwesomeAction {
                 mContext.sendBroadcast(appWindow);
                 break;
 
+            case ACTION_BLANK:
+                break;
+
             case ACTION_ARROW_LEFT:
                 triggerVirtualKeypress(KeyEvent.KEYCODE_DPAD_LEFT, CURSOR_FLAGS);
                 break;
@@ -208,27 +211,18 @@ public class AwesomeAction {
                 triggerVirtualKeypress(KeyEvent.KEYCODE_DPAD_DOWN, CURSOR_FLAGS);
                 break;
 
-            case ACTION_GESTURE_ACTIONS:
-                mContext.sendBroadcast(new Intent(Intent.TOGGLE_GESTURE_ACTIONS));
-                break;
-
-            case ACTION_IME:
-                mContext.sendBroadcast(new Intent(
-                        "android.settings.SHOW_INPUT_METHOD_PICKER"));
-                break;
-
             case ACTION_RING_VIB:
-                final AudioManager rv = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
-                if (rv != null) {
-                    if (rv.getRingerMode() != AudioManager.RINGER_MODE_VIBRATE) {
-                        rv.setRingerMode(AudioManager.RINGER_MODE_VIBRATE);
+                am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+                if (am != null) {
+                    if (am.getRingerMode() != AudioManager.RINGER_MODE_VIBRATE) {
+                        am.setRingerMode(AudioManager.RINGER_MODE_VIBRATE);
                         Vibrator vib = (Vibrator) mContext
                                 .getSystemService(Context.VIBRATOR_SERVICE);
                         if (vib != null) {
                             vib.vibrate(50);
                         }
                     } else {
-                        rv.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
+                        am.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
                         ToneGenerator tg = new ToneGenerator(
                                 AudioManager.STREAM_NOTIFICATION,
                                 (int) (ToneGenerator.MAX_VOLUME * 0.85));
@@ -239,13 +233,18 @@ public class AwesomeAction {
                 }
                 break;
 
+            case ACTION_IME:
+                mContext.sendBroadcast(new Intent(
+                        "android.settings.SHOW_INPUT_METHOD_PICKER"));
+                break;
+
             case ACTION_RING_SILENT:
-                final AudioManager rs = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
-                if (rs != null) {
-                    if (rs.getRingerMode() != AudioManager.RINGER_MODE_SILENT) {
-                        rs.setRingerMode(AudioManager.RINGER_MODE_SILENT);
+                am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+                if (am != null) {
+                    if (am.getRingerMode() != AudioManager.RINGER_MODE_SILENT) {
+                        am.setRingerMode(AudioManager.RINGER_MODE_SILENT);
                     } else {
-                        rs.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
+                        am.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
                         ToneGenerator tg = new ToneGenerator(
                                 AudioManager.STREAM_NOTIFICATION,
                                 (int) (ToneGenerator.MAX_VOLUME * 0.85));
@@ -257,19 +256,19 @@ public class AwesomeAction {
                 break;
 
             case ACTION_RING_VIB_SILENT:
-                final AudioManager rvs = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
-                if (rvs != null) {
-                    if (rvs.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
-                        rvs.setRingerMode(AudioManager.RINGER_MODE_VIBRATE);
+                am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+                if (am != null) {
+                    if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
+                        am.setRingerMode(AudioManager.RINGER_MODE_VIBRATE);
                         Vibrator vib = (Vibrator) mContext
                                 .getSystemService(Context.VIBRATOR_SERVICE);
                         if (vib != null) {
                             vib.vibrate(50);
                         }
-                    } else if (rvs.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
-                        rvs.setRingerMode(AudioManager.RINGER_MODE_SILENT);
+                    } else if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
+                        am.setRingerMode(AudioManager.RINGER_MODE_SILENT);
                     } else {
-                        rvs.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
+                        am.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
                         ToneGenerator tg = new ToneGenerator(
                                 AudioManager.STREAM_NOTIFICATION,
                                 (int) (ToneGenerator.MAX_VOLUME * 0.85));
@@ -280,9 +279,9 @@ public class AwesomeAction {
                 }
                 break;
 
-            case ACTION_NULL:
-            case ACTION_BLANK:
-                return false;
+            case ACTION_GESTURE_ACTIONS:
+                mContext.sendBroadcast(new Intent(Intent.TOGGLE_GESTURE_ACTIONS));
+                break;
         }
         return true;
     }
@@ -295,7 +294,9 @@ public class AwesomeAction {
     }
 
     private static void triggerVirtualKeypress(final int keyCode, int flags) {
+        InputManager im = InputManager.getInstance();
         long now = SystemClock.uptimeMillis();
+
         final KeyEvent downEvent = new KeyEvent(now, now, KeyEvent.ACTION_DOWN,
                 keyCode, 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0,
                 flags, InputDevice.SOURCE_KEYBOARD);
@@ -304,4 +305,11 @@ public class AwesomeAction {
         im.injectInputEvent(downEvent, InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
         im.injectInputEvent(upEvent, InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
     }
+
+    private static Handler mHandler = new Handler();
+
+    public static void wtfHelper() {
+        wtf = true;
+        ftw = false;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
index 9f8584d..d2df303 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
@@ -81,7 +81,6 @@ public class KeyButtonView extends ImageView {
     RectF mRect = new RectF();
     AnimatorSet mPressedAnim;
     Animator mAnimateToQuiescent = new ObjectAnimator();
-    AnimatorSet as = mPressedAnim = new AnimatorSet();
     boolean mShouldClick = true;
 
     AwesomeButtonInfo mActions;
@@ -108,7 +107,7 @@ public class KeyButtonView extends ImageView {
             }
         }
     };
-    Runnable mSingleTap = new Runnable() {
+    private Runnable mSingleTap = new Runnable() {
         @Override
         public void run() {
             if (!isPressed()) {
@@ -298,6 +297,7 @@ public class KeyButtonView extends ImageView {
                 if (mPressedAnim != null && mPressedAnim.isRunning()) {
                     mPressedAnim.cancel();
                 }
+                final AnimatorSet as = mPressedAnim = new AnimatorSet();
                 if (pressed) {
                     if (mGlowScale < GLOW_MAX_SCALE_FACTOR)
                         mGlowScale = GLOW_MAX_SCALE_FACTOR;
@@ -329,6 +329,7 @@ public class KeyButtonView extends ImageView {
         if (mHasBlankSingleAction) return true;
 
         final int action = ev.getAction();
+        int x, y;
 
         switch (action) {
             case MotionEvent.ACTION_DOWN:
@@ -361,8 +362,8 @@ public class KeyButtonView extends ImageView {
                 }
                 break;
             case MotionEvent.ACTION_MOVE:
-                int x = (int) ev.getX();
-                int y = (int) ev.getY();
+                x = (int) ev.getX();
+                y = (int) ev.getY();
                 setPressed(x >= -mTouchSlop
                         && x < getWidth() + mTouchSlop
                         && y >= -mTouchSlop
@@ -413,6 +414,7 @@ public class KeyButtonView extends ImageView {
 
     private void doSinglePress() {
         if (callOnClick()) {
+            // cool
             sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
         } else if (mIsRecentsSingleAction) {
             try {
-- 
2.5.0

