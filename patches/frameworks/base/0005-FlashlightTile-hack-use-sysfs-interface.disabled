From 0e9eb15bee1a75d223833aef7c75999331a70a5f Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 25 Jul 2015 15:24:38 +0300
Subject: [PATCH 05/11] FlashlightTile: hack: use sysfs interface

Change-Id: I2bdb539c41ef422506790b97280f3771242f1602
---
 .../android/systemui/qs/tiles/FlashlightTile.java  | 40 ++++++++++++++++++----
 1 file changed, 34 insertions(+), 6 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
index 5c1a317..74e113c 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
@@ -18,10 +18,14 @@ package com.android.systemui.qs.tiles;
 
 import android.app.ActivityManager;
 import android.os.SystemClock;
+import android.util.Log;
 
 import com.android.systemui.R;
 import com.android.systemui.qs.QSTile;
 import com.android.systemui.statusbar.policy.FlashlightController;
+import java.io.FileWriter;
+import java.io.File;
+import java.io.IOException;
 
 /** Quick settings tile: Control flashlight **/
 public class FlashlightTile extends QSTile<QSTile.BooleanState> implements
@@ -35,20 +39,30 @@ public class FlashlightTile extends QSTile<QSTile.BooleanState> implements
             = new AnimationIcon(R.drawable.ic_signal_flashlight_enable_animation);
     private final AnimationIcon mDisable
             = new AnimationIcon(R.drawable.ic_signal_flashlight_disable_animation);
-    private final FlashlightController mFlashlightController;
+    // private final FlashlightController mFlashlightController;
+    private static String mFlashDevice = "/sys/class/camera/rear/rear_flash";
+    private FileWriter mFlashDeviceWriter = null;
     private long mWasLastOn;
 
     public FlashlightTile(Host host) {
         super(host);
-        mFlashlightController = host.getFlashlightController();
+        /*
+	mFlashlightController = host.getFlashlightController();
         mFlashlightController.addListener(this);
+	*/
+        try {
+            mFlashDeviceWriter = new FileWriter(mFlashDevice);
+        } catch (IOException e) {
+            Log.e(TAG, "Error creating new mFlashDeviceWriter");
+           //   handleError();
+        }
     }
 
     @Override
     protected void handleDestroy() {
         super.handleDestroy();
-        mFlashlightController.removeListener(this);
-    }
+	//mFlashlightController.removeListener(this);
+   }
 
     @Override
     protected BooleanState newTileState() {
@@ -69,7 +83,19 @@ public class FlashlightTile extends QSTile<QSTile.BooleanState> implements
             return;
         }
         boolean newState = !mState.value;
-        mFlashlightController.setFlashlight(newState);
+        //mFlashlightController.setFlashlight(newState);
+	try {
+                mFlashDeviceWriter.write(String.valueOf(newState ? 1 : 0));
+                mFlashDeviceWriter.flush();
+                if (!newState) {                        
+                     mFlashDeviceWriter.close();
+                     mFlashDeviceWriter = null;
+                }
+        } catch (IOException e) {
+                Log.e(TAG, "Error writing to flashlight sysfs", e);
+                //handleError();
+	}
+
         refreshState(newState ? UserBoolean.USER_TRUE : UserBoolean.USER_FALSE);
     }
 
@@ -94,7 +120,9 @@ public class FlashlightTile extends QSTile<QSTile.BooleanState> implements
 
         // Always show the tile when the flashlight is or was recently on. This is needed because
         // the camera is not available while it is being used for the flashlight.
-        state.visible = mWasLastOn != 0 || mFlashlightController.isAvailable();
+	File f = new File(mFlashDevice);
+	//state.visible = mWasLastOn != 0 || mFlashlightController.isAvailable();
+	state.visible = mWasLastOn != 0 || f.exists() && f.canWrite();
         state.label = mHost.getContext().getString(R.string.quick_settings_flashlight_label);
         final AnimationIcon icon = state.value ? mEnable : mDisable;
         icon.setAllowAnimation(arg instanceof UserBoolean && ((UserBoolean) arg).userInitiated);
-- 
1.9.1

