From 14d80bb22a93785180c8c76f6424b8793b6db094 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:06:39 +0700
Subject: [PATCH 15/64] Revert "Reduce redundancy w/ KBV in LCBV and fix
 opacity wonk"

This reverts commit 08d5d08089ac28e8f28f4b7e1003ff3612db1abb.
---
 .../systemui/statusbar/policy/KeyButtonView.java   | 13 ++----
 .../statusbar/policy/LayoutChangerButtonView.java  | 49 +++++++++++++++++-----
 2 files changed, 43 insertions(+), 19 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
index 95e9184..457f4c1 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
@@ -77,7 +77,7 @@ public class KeyButtonView extends ImageView {
     @ViewDebug.ExportedProperty(category = "drawing")
     float mDrawingAlpha = 1f;
     @ViewDebug.ExportedProperty(category = "drawing")
-    float mQuiescentAlpha;
+    float mQuiescentAlpha = DEFAULT_QUIESCENT_ALPHA;
     RectF mRect = new RectF();
     AnimatorSet mPressedAnim;
     Animator mAnimateToQuiescent = new ObjectAnimator();
@@ -85,10 +85,6 @@ public class KeyButtonView extends ImageView {
 
     KeyButtonInfo mActions;
 
-    protected float getQuiescentAlphaScale() {
-        return 1.0f;
-    }
-
     protected static IStatusBarService mBarService;
     public static synchronized void getStatusBarInstance() {
         if (mBarService == null) {
@@ -127,8 +123,6 @@ public class KeyButtonView extends ImageView {
     public KeyButtonView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs);
 
-        mQuiescentAlpha = getQuiescentAlphaScale() * DEFAULT_QUIESCENT_ALPHA;
-
         setDrawingAlpha(mQuiescentAlpha);
         if (mGlowBG != null) {
             mGlowWidth = mGlowBG.getIntrinsicWidth();
@@ -227,7 +221,7 @@ public class KeyButtonView extends ImageView {
         mAnimateToQuiescent.cancel();
         alpha = Math.min(Math.max(alpha, 0), 1);
         if (alpha == mQuiescentAlpha && alpha == mDrawingAlpha) return;
-        mQuiescentAlpha = getQuiescentAlphaScale() * alpha;
+        mQuiescentAlpha = alpha;
         if (DEBUG) Log.d(TAG, "New quiescent alpha = " + mQuiescentAlpha);
         if (mGlowBG != null && animate) {
             mAnimateToQuiescent = animateToQuiescent();
@@ -418,7 +412,7 @@ public class KeyButtonView extends ImageView {
         return true;
     }
 
-    protected void doSinglePress() {
+    private void doSinglePress() {
         if (callOnClick()) {
             // cool
             sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
@@ -436,6 +430,7 @@ public class KeyButtonView extends ImageView {
         if (mActions != null) {
             if (mActions.singleAction != null) {
                 AwesomeAction.launchAction(mContext, mActions.singleAction);
+                sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
             }
         }
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
index bc7e837..1790da1 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
@@ -38,19 +38,33 @@ import com.android.systemui.R;
 
 public class LayoutChangerButtonView extends KeyButtonView {
     private static final String TAG = "StatusBar.LayoutChangerButtonView";
-
     public static final String ACTION_MENU = AwesomeConstant.ACTION_MENU.value();
     public static final String LAYOUT_RIGHT = AwesomeConstant.ACTION_LAYOUT_RIGHT.value();
 
-    private static final float ALPHA_SCALE = 0.5f; //the default alpha is 0.7... this view was intended to have 0.3 alpha. 0.3 ~= 0.35 == 0.5 * 0.7
+    final float GLOW_MAX_SCALE_FACTOR = 1.8f;
+    public static final float LAYOUT_CHANGER_QUIESCENT_ALPHA = 0.30f;
+
+    int mTouchSlop;
+    final float mQuiescentAlpha = LAYOUT_CHANGER_QUIESCENT_ALPHA;
+    float mDrawingAlpha = 1f;
+    AnimatorSet mPressedAnim;
+    Animator mAnimateToQuiescent = new ObjectAnimator();
+    AnimatorSet as = mPressedAnim = new AnimatorSet();
+
+    KeyButtonInfo mActions;
 
     public LayoutChangerButtonView(Context context, AttributeSet attrs) {
         this(context, attrs, 0);
     }
 
     public LayoutChangerButtonView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        mGlowBgId = 0;
+        super(context, attrs);
+
+        setDrawingAlpha(mQuiescentAlpha);
+
+        setClickable(true);
+        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
+        setLongClickable(false);
     }
 
     @Override
@@ -78,12 +92,27 @@ public class LayoutChangerButtonView extends KeyButtonView {
     @Override
     public void setImage(final Resources res) { }
 
-    @Override
-    public float getQuiescentAlphaScale() {
-        return ALPHA_SCALE;
+    public void setQuiescentAlpha(float alpha, boolean animate) {
+        setDrawingAlpha(mQuiescentAlpha);
+    }
+
+    private ObjectAnimator animateToQuiescent() {
+        return ObjectAnimator.ofFloat(this, "drawingAlpha", mQuiescentAlpha);
+    }
+
+    public float getQuiescentAlpha() {
+        return mQuiescentAlpha;
+    }
+
+    public float getDrawingAlpha() {
+        return mDrawingAlpha;
+    }
+
+    public void setDrawingAlpha(float x) {
+        setAlpha((int) (x * 255));
+        mDrawingAlpha = x;
     }
 
-    @Override
     public boolean onTouchEvent(MotionEvent ev) {
         final int action = ev.getAction();
         switch (action) {
@@ -113,11 +142,11 @@ public class LayoutChangerButtonView extends KeyButtonView {
         return true;
     }
 
-    @Override
-    protected void doSinglePress() {
+    private void doSinglePress() {
         if (callOnClick()) {
             sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
         }
         AwesomeAction.launchAction(mContext, mActions.singleAction);
+        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
     }
 }
-- 
2.5.0

