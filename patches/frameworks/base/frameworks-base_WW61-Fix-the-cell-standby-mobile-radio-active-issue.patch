 Fix the cell standby mobile radio active issue

How to reproduce the bug:
 -Enable mobile data
 -Use some mobile data (radio active timer starts in battery stats)
 -Disable mobile data (radio active timer keeps running in battery stats)

After some investigation on the issue I found that the BatteryStats
service was not receiving the radio power down notification. The
investigation lead me to the NetworkManagementService.java, where
I found that some code was discarding the radio power change
notifications after the first radio power on.

The problem is that in NetworkManagementServer.java the
notifyInterfaceClassActivity method is discarding the notifications
of radio power change to the BatteryStats (via noteMobileRadioPowerState)
if the fromRadio parameter is false after it's being true some time before.

Even after a detailed analysis, it was unclear what is the real role of
the fromRadio parameter. Changing it to true in the calling methods
solved the issue in the testing unit (Sony Xperia ZL). I started a thread
in XDA to mobilize some volunteers to help test this fix.

diff --git a/services/core/java/com/android/server/NetworkManagementService.java b/services/core/java/com/android/server/NetworkManagementService.java
index 9000941..231f600 100644
--- a/services/core/java/com/android/server/NetworkManagementService.java
+++ b/services/core/java/com/android/server/NetworkManagementService.java
@@ -928,7 +928,7 @@ public boolean onEvent(int code, String raw, String[] cooked) {
                     notifyInterfaceClassActivity(Integer.parseInt(cooked[3]),
                             isActive ? DataConnectionRealTimeInfo.DC_POWER_STATE_HIGH
                             : DataConnectionRealTimeInfo.DC_POWER_STATE_LOW,
-                            timestampNanos, processUid, false);
+                            timestampNanos, processUid, true);
                     return true;
                     // break;
             case NetdResponseCode.InterfaceAddressChange:
@@ -1745,7 +1745,7 @@ public void addIdleTimer(String iface, int timeout, final int type) {
                 @Override public void run() {
                     notifyInterfaceClassActivity(type,
                             DataConnectionRealTimeInfo.DC_POWER_STATE_HIGH,
-                            SystemClock.elapsedRealtimeNanos(), -1, false);
+                            SystemClock.elapsedRealtimeNanos(), -1, true);
                 }
             });
         }
@@ -1774,7 +1774,7 @@ public void removeIdleTimer(String iface) {
                 @Override public void run() {
                     notifyInterfaceClassActivity(params.type,
                             DataConnectionRealTimeInfo.DC_POWER_STATE_LOW,
-                            SystemClock.elapsedRealtimeNanos(), -1, false);
+                            SystemClock.elapsedRealtimeNanos(), -1, true);
                 }
             });
         }
