From 523b3d4ce37dfab85890e752a9bcafbeaf7ec48d Mon Sep 17 00:00:00 2001
From: Simao Gomes Viana <xdevs23@outlook.com>
Date: Tue, 16 Aug 2016 15:36:32 +0200
Subject: [PATCH 150/296] ViewConfiguration: add support for max/min fling
 velocity sysproperties

---
 core/java/android/view/ViewConfiguration.java | 56 +++++++++++++++++++++++++--
 1 file changed, 52 insertions(+), 4 deletions(-)

diff --git a/core/java/android/view/ViewConfiguration.java b/core/java/android/view/ViewConfiguration.java
index 013c6847ccb..a604740d08b 100644
--- a/core/java/android/view/ViewConfiguration.java
+++ b/core/java/android/view/ViewConfiguration.java
@@ -23,6 +23,7 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Point;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.util.DisplayMetrics;
 import android.util.SparseArray;
@@ -408,10 +409,48 @@ public class ViewConfiguration {
 
         mDoubleTapTouchSlop = mTouchSlop;
 
-        mMinimumFlingVelocity = res.getDimensionPixelSize(
-                com.android.internal.R.dimen.config_viewMinFlingVelocity);
-        mMaximumFlingVelocity = res.getDimensionPixelSize(
-                com.android.internal.R.dimen.config_viewMaxFlingVelocity);
+        String minFlingVeloProp = "ro.min.fling_velocity"; // Min fling prop
+        String maxFlingVeloProp = "ro.max.fling_velocity"; // Max fling prop
+
+        // Get the properties
+        String minFlingVeloSysProp = SystemProperties.get(minFlingVeloProp);
+        String maxFlingVeloSysProp = SystemProperties.get(maxFlingVeloProp);
+        boolean isMaxFlingVeloPredefined = false;
+        boolean isMinFlingVeloPredefined = false;
+        int minFlingVeloTmp = 0;
+        int maxFlingVeloTmp = 0;
+
+        // Check whether the property values are valid
+        if(minFlingVeloSysProp != null && (!minFlingVeloSysProp.isEmpty()) &&
+            isNumeric(minFlingVeloSysProp)) {
+            minFlingVeloTmp = Integer.parseInt(minFlingVeloSysProp);
+            isMinFlingVeloPredefined = true;
+        }
+
+        if(maxFlingVeloSysProp != null && (!maxFlingVeloSysProp.isEmpty()) &&
+            isNumeric(maxFlingVeloSysProp)) {
+            maxFlingVeloTmp = Integer.parseInt(maxFlingVeloSysProp);
+            isMaxFlingVeloPredefined = true;
+        }
+
+        // Use config values if no prop available or invalid
+        if(!isMinFlingVeloPredefined && minFlingVeloTmp == 0)
+            minFlingVeloTmp = res.getDimensionPixelSize(
+                    com.android.internal.R.dimen.config_viewMinFlingVelocity);
+        if(!isMaxFlingVeloPredefined && maxFlingVeloTmp == 0)
+            maxFlingVeloTmp = res.getDimensionPixelSize(
+                    com.android.internal.R.dimen.config_viewMaxFlingVelocity);
+
+        // Check again for availability, otherwise use default values
+        if(minFlingVeloTmp * maxFlingVeloTmp == 0) {
+            minFlingVeloTmp = MINIMUM_FLING_VELOCITY;
+            maxFlingVeloTmp = MAXIMUM_FLING_VELOCITY;
+        }
+
+        // Assign the final variables
+        mMinimumFlingVelocity = minFlingVeloTmp;
+        mMaximumFlingVelocity = maxFlingVeloTmp;
+
         mGlobalActionsKeyTimeout = res.getInteger(
                 com.android.internal.R.integer.config_globalActionsKeyTimeout);
 
@@ -421,6 +460,15 @@ public class ViewConfiguration {
                 com.android.internal.R.dimen.config_verticalScrollFactor);
     }
 
+    public static boolean isNumeric(String string) {
+        try {
+            Integer.parseInt(string);
+        } catch(NumberFormatException e) {
+            return false;
+        }
+        return true;
+    }
+
     /**
      * Returns a configuration for the specified context. The configuration depends on
      * various parameters of the context, like the dimension of the display or the
-- 
2.11.0

