From 6a0d88a8a3dc9cfc8e74de64ba8c53aa73305f2b Mon Sep 17 00:00:00 2001
From: Praveena Pachipulusu <pveena@codeaurora.org>
Date: Wed, 19 Nov 2014 16:07:45 +0530
Subject: [PATCH 019/296] Fix to avoid UI freeze issue

Due to some race condition in WindowManagerService, Screenshot
layer remains as topmost and buffers are not flipped hence
no updates seen on the screen. So, trying to destroy persistent
layer explicitly if freeze timeout expires 6sec.
---
 .../android/server/wm/ScreenRotationAnimation.java | 44 ++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/services/core/java/com/android/server/wm/ScreenRotationAnimation.java b/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
index 08a9caa80d1..3c43efc0d99 100644
--- a/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
+++ b/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
@@ -40,6 +40,10 @@ import android.view.SurfaceSession;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Transformation;
+import android.os.Handler;
+import android.os.Message;
+import com.android.server.DisplayThread;
+import android.os.Looper;
 
 import java.io.PrintWriter;
 
@@ -146,6 +150,7 @@ class ScreenRotationAnimation {
     private boolean mMoreStartExit;
     private boolean mMoreStartFrame;
     long mHalfwayPoint;
+    final H mHandler = new H(DisplayThread.get().getLooper());
 
     private final WindowManagerService mService;
 
@@ -288,6 +293,12 @@ class ScreenRotationAnimation {
                 mSurfaceControl.setAlpha(0);
                 mSurfaceControl.show();
                 sur.destroy();
+                // If screenshot layer stays for more than freeze
+                // timeout value with no updates on the screen,
+                // destroy the layer explicitly.
+                mHandler.removeMessages(H.SCREENSHOT_FREEZE_TIMEOUT);
+                mHandler.sendEmptyMessageDelayed(H.SCREENSHOT_FREEZE_TIMEOUT,
+                                           H.FREEZE_TIMEOUT_VAL);
             } catch (OutOfResourcesException e) {
                 Slog.w(TAG, "Unable to allocate freeze surface", e);
             }
@@ -1019,4 +1030,37 @@ class ScreenRotationAnimation {
     public Transformation getEnterTransformation() {
         return mEnterTransformation;
     }
+
+    final class H extends Handler {
+        public static final int SCREENSHOT_FREEZE_TIMEOUT = 2;
+
+        //Set the freeze timeout value to 6sec (which is greater than
+        //APP_FREEZE_TIMEOUT value in WindowManagerService)
+        public static final int FREEZE_TIMEOUT_VAL = 6000;
+
+        public H(Looper looper) {
+            super(looper, null, true /*async*/);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case SCREENSHOT_FREEZE_TIMEOUT: {
+                     if ((mSurfaceControl != null) && (isAnimating())) {
+                        Slog.e(TAG, "Exceeded Freeze timeout. Destroy layers");
+                        kill();
+                     } else if (mSurfaceControl != null){
+                        Slog.e(TAG,
+                          "No animation, exceeded freeze timeout. Destroy Screenshot layer");
+                        mSurfaceControl.destroy();
+                        mSurfaceControl = null;
+                     }
+                     break;
+                }
+                default:
+                     Slog.e(TAG, "No Valid Message To Handle");
+                break;
+            }
+        }
+    }
 }
-- 
2.11.0

