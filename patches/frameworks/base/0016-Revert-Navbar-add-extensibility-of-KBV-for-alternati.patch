From 06e1ade79ec46b46d04fc658aeee82e739db459b Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:07:02 +0700
Subject: [PATCH 16/64] Revert "Navbar: add extensibility of KBV for
 alternative button views"

This reverts commit 8830c6e2f5a48322b6db44102263b94419fc1fbc.
---
 .../statusbar/phone/NavigationBarView.java         |  28 ++--
 .../systemui/statusbar/policy/KeyButtonView.java   |  14 +-
 .../statusbar/policy/LayoutChangerButtonView.java  | 152 +++++++++++++++++++--
 3 files changed, 158 insertions(+), 36 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 4f1ab1b..3fb1792 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -64,8 +64,9 @@ import com.android.systemui.statusbar.BaseStatusBar;
 import com.android.systemui.statusbar.DelegateViewHelper;
 import com.android.systemui.statusbar.policy.DeadZone;
 import com.android.systemui.statusbar.policy.LayoutChangerButtonView;
+import com.android.systemui.statusbar.policy.LayoutChangerButtonView.LayoutButtonInfo;
 import com.android.systemui.statusbar.policy.KeyButtonView;
-import com.android.systemui.statusbar.policy.KeyButtonView.KeyButtonInfo;
+import com.android.systemui.statusbar.policy.KeyButtonView.AwesomeButtonInfo;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -97,8 +98,8 @@ public class NavigationBarView extends LinearLayout {
 
     final boolean mTablet = isTablet(mContext);
 
-    ArrayList<ArrayList<KeyButtonInfo>> mAllButtonContainers = new ArrayList<ArrayList<KeyButtonInfo>>();
-    ArrayList<KeyButtonInfo> mIMEKeyArray = new ArrayList<KeyButtonInfo>();
+    ArrayList<ArrayList<AwesomeButtonInfo>> mAllButtonContainers = new ArrayList<ArrayList<AwesomeButtonInfo>>();
+    ArrayList<AwesomeButtonInfo> mIMEKeyArray = new ArrayList<AwesomeButtonInfo>();
 
     public static int mRightStopKey = 6;
 
@@ -806,22 +807,22 @@ public class NavigationBarView extends LinearLayout {
             userButtons = mIMEKeyLayout.split("\\|");
             for (String button : userButtons) {
                 String[] actions = button.split(",", 4);
-                mIMEKeyArray.add(new KeyButtonInfo(actions[0], actions[1], actions[2], actions[3]));
+                mIMEKeyArray.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
             }
         }
         setupNavigationButtons();
     }
 
-    private ArrayList<KeyButtonInfo> getButtonsArray(String[] userButtons) {
-        ArrayList<KeyButtonInfo> mButtonsContainer = new ArrayList<KeyButtonInfo>();
+    private ArrayList<AwesomeButtonInfo> getButtonsArray(String[] userButtons) {
+        ArrayList<AwesomeButtonInfo> mButtonsContainer = new ArrayList<AwesomeButtonInfo>();
         for (String button : userButtons) {
             String[] actions = button.split(",", 4);
-            mButtonsContainer.add(new KeyButtonInfo(actions[0], actions[1], actions[2], actions[3]));
+            mButtonsContainer.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
         }
         return mButtonsContainer;
     }
 
-    private ArrayList<KeyButtonInfo> getCurrentButtonArray() {
+    private ArrayList<AwesomeButtonInfo> getCurrentButtonArray() {
         if (mArrows && showingIME) return mIMEKeyArray;
         return mAllButtonContainers.get(mCurrentLayout - 1);
     }
@@ -830,7 +831,7 @@ public class NavigationBarView extends LinearLayout {
         setupNavigationButtons(getCurrentButtonArray());
     }
 
-    private void setupNavigationButtons(ArrayList<KeyButtonInfo> buttonsArray) {
+    private void setupNavigationButtons(ArrayList<AwesomeButtonInfo> buttonsArray) {
         final boolean stockThreeButtonLayout = buttonsArray.size() == 3;
         final int separatorSize = (int) mMenuButtonWidth;
         final int length = buttonsArray.size();
@@ -847,13 +848,14 @@ public class NavigationBarView extends LinearLayout {
             lightsOut = (LinearLayout) (landscape ? mRotatedViews[Surface.ROTATION_90]
                     .findViewById(R.id.lights_out) : mRotatedViews[Surface.ROTATION_0]
                     .findViewById(R.id.lights_out));
+
             navButtons.removeAllViews();
             lightsOut.removeAllViews();
 
             if (mButtonLayouts > 1) {
                 if (!mArrows || !showingIME) {
                     // left-side layout changer
-                    KeyButtonInfo leftButtonInfo = new KeyButtonInfo(AwesomeConstant.ACTION_LAYOUT_LEFT.value());
+                    LayoutButtonInfo leftButtonInfo = new LayoutButtonInfo(AwesomeConstant.ACTION_LAYOUT_LEFT.value());
                     LayoutChangerButtonView leftButton = new LayoutChangerButtonView(mContext, null);
                     leftButton.setButtonActions(leftButtonInfo);
                     leftButton.setImageResource(R.drawable.ic_sysbar_layout_left);
@@ -883,7 +885,7 @@ public class NavigationBarView extends LinearLayout {
 
             for (int j = 0; j < length; j++) {
                 // create the button
-                KeyButtonInfo info = buttonsArray.get(j);
+                AwesomeButtonInfo info = buttonsArray.get(j);
                 KeyButtonView button = new KeyButtonView(mContext, null);
                 button.setButtonActions(info);
                 if (mTablet) {
@@ -907,7 +909,7 @@ public class NavigationBarView extends LinearLayout {
 
             if (mLegacyMenu && mButtonLayouts == 1) {
                 // legacy menu button
-                KeyButtonInfo menuButtonInfo = new KeyButtonInfo(AwesomeConstant.ACTION_MENU.value(),
+                AwesomeButtonInfo menuButtonInfo = new AwesomeButtonInfo(AwesomeConstant.ACTION_MENU.value(),
                         null, null, null);
                 KeyButtonView menuButton = new KeyButtonView(mContext, null);
                 menuButton.setButtonActions(menuButtonInfo);
@@ -939,7 +941,7 @@ public class NavigationBarView extends LinearLayout {
             if (mButtonLayouts > 1) {
                 if (!mArrows || !showingIME) {
                     // right-side layout changer button
-                    KeyButtonInfo rightButtonInfo = new KeyButtonInfo(mShowMenu
+                    LayoutButtonInfo rightButtonInfo = new LayoutButtonInfo(mShowMenu
                             ? AwesomeConstant.ACTION_MENU.value()
                             : AwesomeConstant.ACTION_LAYOUT_RIGHT.value());
                     LayoutChangerButtonView rightButton = new LayoutChangerButtonView(mContext, null);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
index 457f4c1..79386f3 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
@@ -83,7 +83,7 @@ public class KeyButtonView extends ImageView {
     Animator mAnimateToQuiescent = new ObjectAnimator();
     boolean mShouldClick = true;
 
-    KeyButtonInfo mActions;
+    AwesomeButtonInfo mActions;
 
     protected static IStatusBarService mBarService;
     public static synchronized void getStatusBarInstance() {
@@ -142,7 +142,7 @@ public class KeyButtonView extends ImageView {
         setImage(res);
     }
 
-    public void setButtonActions(KeyButtonInfo actions) {
+    public void setButtonActions(AwesomeButtonInfo actions) {
         this.mActions = actions;
 
         setTag(mActions.singleAction); // should be OK even if it's null
@@ -520,16 +520,10 @@ public class KeyButtonView extends ImageView {
         }
     };
 
-    public static class KeyButtonInfo {
+    public static class AwesomeButtonInfo {
         String singleAction, doubleTapAction, longPressAction, iconUri;
 
-        // reserved for single purpose keys
-        public KeyButtonInfo(String singleTap) {
-            this.singleAction = singleTap;
-        }
-
-        // reserved for configurable buttons
-        public KeyButtonInfo(String singleTap, String doubleTap, String longPress, String uri) {
+        public AwesomeButtonInfo(String singleTap, String doubleTap, String longPress, String uri) {
             this.singleAction = singleTap;
             this.doubleTapAction = doubleTap;
             this.longPressAction = longPress;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
index 1790da1..8f820aa 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/LayoutChangerButtonView.java
@@ -20,7 +20,10 @@ import android.animation.Animator;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.content.Context;
-import android.content.res.Resources;
+import android.graphics.Canvas;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.HapticFeedbackConstants;
@@ -29,6 +32,7 @@ import android.view.SoundEffectConstants;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.accessibility.AccessibilityEvent;
+import android.widget.ImageView;
 
 import com.android.internal.util.aokp.AwesomeAction;
 import com.android.internal.util.aokp.NavBarHelpers;
@@ -36,22 +40,26 @@ import com.android.internal.util.vanir.AwesomeConstants;
 import com.android.internal.util.vanir.AwesomeConstants.AwesomeConstant;
 import com.android.systemui.R;
 
-public class LayoutChangerButtonView extends KeyButtonView {
+public class LayoutChangerButtonView extends ImageView {
     private static final String TAG = "StatusBar.LayoutChangerButtonView";
     public static final String ACTION_MENU = AwesomeConstant.ACTION_MENU.value();
     public static final String LAYOUT_RIGHT = AwesomeConstant.ACTION_LAYOUT_RIGHT.value();
 
     final float GLOW_MAX_SCALE_FACTOR = 1.8f;
-    public static final float LAYOUT_CHANGER_QUIESCENT_ALPHA = 0.30f;
+    public static final float DEFAULT_QUIESCENT_ALPHA = 0.25f;
 
     int mTouchSlop;
-    final float mQuiescentAlpha = LAYOUT_CHANGER_QUIESCENT_ALPHA;
+    Drawable mGlowBG;
+    int mGlowWidth, mGlowHeight;
+    float mGlowAlpha = 0f, mGlowScale = 1f;
     float mDrawingAlpha = 1f;
+    float mQuiescentAlpha = DEFAULT_QUIESCENT_ALPHA;
+    RectF mRect = new RectF();
     AnimatorSet mPressedAnim;
     Animator mAnimateToQuiescent = new ObjectAnimator();
     AnimatorSet as = mPressedAnim = new AnimatorSet();
 
-    KeyButtonInfo mActions;
+    LayoutButtonInfo mActions;
 
     public LayoutChangerButtonView(Context context, AttributeSet attrs) {
         this(context, attrs, 0);
@@ -61,16 +69,19 @@ public class LayoutChangerButtonView extends KeyButtonView {
         super(context, attrs);
 
         setDrawingAlpha(mQuiescentAlpha);
+        if (mGlowBG != null) {
+            mGlowWidth = mGlowBG.getIntrinsicWidth();
+            mGlowHeight = mGlowBG.getIntrinsicHeight();
+        }
 
         setClickable(true);
         mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
         setLongClickable(false);
     }
 
-    @Override
-    public void setButtonActions(KeyButtonInfo actions) {
+    public void setButtonActions(LayoutButtonInfo actions) {
         this.mActions = actions;
-        setTag(mActions.singleAction);
+        setTag(mActions.singleAction); // should be OK even if it's null
         setImage();
     }
 
@@ -84,16 +95,42 @@ public class LayoutChangerButtonView extends KeyButtonView {
         }
     }
 
-    @Override
     public void setImage() {
         setImageDrawable(NavBarHelpers.getIconImage(mContext, LAYOUT_RIGHT));
     }
 
     @Override
-    public void setImage(final Resources res) { }
+    protected void onDraw(Canvas canvas) {
+        if (mGlowBG != null) {
+            canvas.save();
+            final int w = getWidth();
+            final int h = getHeight();
+            final float aspect = (float) mGlowWidth / mGlowHeight;
+            final int drawW = (int) (h * aspect);
+            final int drawH = h;
+            final int margin = (drawW - w) / 2;
+            canvas.scale(mGlowScale, mGlowScale, w * 0.5f, h * 0.5f);
+            mGlowBG.setBounds(-margin, 0, drawW - margin, drawH);
+            mGlowBG.setAlpha((int) (mDrawingAlpha * mGlowAlpha * 255));
+            mGlowBG.draw(canvas);
+            canvas.restore();
+            mRect.right = w;
+            mRect.bottom = h;
+        }
+        super.onDraw(canvas);
+    }
 
     public void setQuiescentAlpha(float alpha, boolean animate) {
-        setDrawingAlpha(mQuiescentAlpha);
+        mAnimateToQuiescent.cancel();
+        alpha = Math.min(Math.max(alpha, 0), 1);
+        if (alpha == mQuiescentAlpha && alpha == mDrawingAlpha) return;
+        mQuiescentAlpha = alpha;
+        if (mGlowBG != null && animate) {
+            mAnimateToQuiescent = animateToQuiescent();
+            mAnimateToQuiescent.start();
+        } else {
+            setDrawingAlpha(mQuiescentAlpha);
+        }
     }
 
     private ObjectAnimator animateToQuiescent() {
@@ -113,6 +150,77 @@ public class LayoutChangerButtonView extends KeyButtonView {
         mDrawingAlpha = x;
     }
 
+    public float getGlowAlpha() {
+        if (mGlowBG == null) return 0;
+        return mGlowAlpha;
+    }
+
+    public void setGlowAlpha(float x) {
+        if (mGlowBG == null) return;
+        mGlowAlpha = x;
+        invalidate();
+    }
+
+    public float getGlowScale() {
+        if (mGlowBG == null) return 0;
+        return mGlowScale;
+    }
+
+    public void setGlowScale(float x) {
+        if (mGlowBG == null) return;
+        mGlowScale = x;
+        final float w = getWidth();
+        final float h = getHeight();
+        if (GLOW_MAX_SCALE_FACTOR <= 1.0f) {
+            // this only works if we know the glow will never leave our bounds
+            invalidate();
+        } else {
+            final float rx = (w * (GLOW_MAX_SCALE_FACTOR - 1.0f)) / 2.0f + 1.0f;
+            final float ry = (h * (GLOW_MAX_SCALE_FACTOR - 1.0f)) / 2.0f + 1.0f;
+            com.android.systemui.SwipeHelper.invalidateGlobalRegion(
+                    this,
+                    new RectF(getLeft() - rx,
+                            getTop() - ry,
+                            getRight() + rx,
+                            getBottom() + ry));
+
+            if (getParent() != null) ((View) getParent()).invalidate();
+        }
+    }
+
+    public void setPressed(boolean pressed) {
+        if (mGlowBG != null) {
+            if (pressed != isPressed()) {
+                if (mPressedAnim != null && mPressedAnim.isRunning()) {
+                    mPressedAnim.cancel();
+                }
+                if (pressed) {
+                    if (mGlowScale < GLOW_MAX_SCALE_FACTOR)
+                        mGlowScale = GLOW_MAX_SCALE_FACTOR;
+                    if (mGlowAlpha < mQuiescentAlpha)
+                        mGlowAlpha = mQuiescentAlpha;
+                    setDrawingAlpha(1f);
+                    as.playTogether(
+                            ObjectAnimator.ofFloat(this, "glowAlpha", 1f),
+                            ObjectAnimator.ofFloat(this, "glowScale", GLOW_MAX_SCALE_FACTOR)
+                    );
+                    as.setDuration(50);
+                } else {
+                    mAnimateToQuiescent.cancel();
+                    mAnimateToQuiescent = animateToQuiescent();
+                    as.playTogether(
+                            ObjectAnimator.ofFloat(this, "glowAlpha", 0f),
+                            ObjectAnimator.ofFloat(this, "glowScale", 1f),
+                            mAnimateToQuiescent
+                    );
+                    as.setDuration(500);
+                }
+                as.start();
+            }
+        }
+        super.setPressed(pressed);
+    }
+
     public boolean onTouchEvent(MotionEvent ev) {
         final int action = ev.getAction();
         switch (action) {
@@ -132,10 +240,11 @@ public class LayoutChangerButtonView extends KeyButtonView {
                 setPressed(false);
                 break;
             case MotionEvent.ACTION_UP:
-                if (isPressed()) {
+                boolean playSound = isPressed();
+                setPressed(false);
+                if (playSound) {
                     playSoundEffect(SoundEffectConstants.CLICK);
                 }
-                setPressed(false);
                 doSinglePress();
                 break;
         }
@@ -149,4 +258,21 @@ public class LayoutChangerButtonView extends KeyButtonView {
         AwesomeAction.launchAction(mContext, mActions.singleAction);
         sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);
     }
+
+    public void setGlowBackground(int resId) {
+        mGlowBG = getResources().getDrawable(resId);
+        if (mGlowBG != null) {
+            setDrawingAlpha(mDrawingAlpha);
+            mGlowWidth = mGlowBG.getIntrinsicWidth();
+            mGlowHeight = mGlowBG.getIntrinsicHeight();
+        }
+    }
+
+    public static class LayoutButtonInfo {
+        String singleAction;
+
+        public LayoutButtonInfo(String singleTap) {
+            this.singleAction = singleTap;
+        }
+    }
 }
-- 
2.5.0

