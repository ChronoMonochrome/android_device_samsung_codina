 Barrier only messages shouldn't prevent the idle handlers from running

If the queue just consists of barrier messages the idle handlers will
not been executed, cause mMessages isn't null. Barrier messages aren't
real messages and shouldn't be included in this test. They are an
internal feature of the message queue and they just happen to be
implemented as normal messages without a target.

This fix allows the idle handlers to run even if the queue isn't empty,
but only consists of barrier messages.

The bug can be seen if somebody calls Instrumentation.waitForIdleSync()
and the application changes the layout on every frame, like in
android.app.cts.ProgressDialogTest -- testShow3 on certain platforms.
The progress bar in indeterminate mode repaints the spinning circle on
every frame. This seems to trigger scheduleTraversals() in ViewRootImpl,
which itself inserts a barrier into the message queue.

Other people noticed this as well as seen here:
https://code.google.com/p/android/issues/detail?id=82046

I could repo this using the test case from the bug report on a Nexus 5.
Changing the testShow3 CTS test so that there is a Thread.sleep(3000);
right before mInstrumentation.waitForIdleSync(); also reproduce it on a
Nexus 5.

It is also worth to mention that this really depends on the type of
animation. Removing the minimum sdk version from the test application,
switches the animation to the old version of the spinning circle. This
seems to include lesser frames and therefore doesn't trigger this bug.


diff --git a/core/java/android/os/MessageQueue.java b/core/java/android/os/MessageQueue.java
index 9708a5a..134f6bb 100644
--- a/core/java/android/os/MessageQueue.java
+++ b/core/java/android/os/MessageQueue.java
@@ -338,6 +338,7 @@ Message next() {
                     if (now < msg.when) {
                         // Next message is not ready.  Set a timeout to wake up when it is ready.
                         nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);
+                        msg = null;
                     } else {
                         // Got a message.
                         mBlocked = false;
@@ -364,9 +365,8 @@ Message next() {
 
                 // If first time idle, then get the number of idlers to run.
                 // Idle handles only run if the queue is empty or if the first message
-                // in the queue (possibly a barrier) is due to be handled in the future.
-                if (pendingIdleHandlerCount < 0
-                        && (mMessages == null || now < mMessages.when)) {
+                // in the queue is due to be handled in the future.
+                if (pendingIdleHandlerCount < 0 && msg == null) {
                     pendingIdleHandlerCount = mIdleHandlers.size();
                 }
                 if (pendingIdleHandlerCount <= 0) {
