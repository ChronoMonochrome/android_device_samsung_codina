From d271f95b431f33ce5f79938b590a43b76f586865 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:51:48 +0700
Subject: [PATCH 42/64] Revert "frameworks: add last app animation, and make
 sure we handle userID all smart-like when switching apps."

This reverts commit 5f317593734b60bef4ee91e56d32b062e5bc95c1.

Change-Id: I919794541bad599ca3cd472b48fc9f9e7782deb9
---
 .../android/internal/util/aokp/AwesomeAction.java  |  55 +++++++---
 core/java/com/vanir/util/TaskUtils.java            | 114 +++++++++++++++++++++
 core/res/res/anim/last_app_in.xml                  |  37 -------
 core/res/res/anim/last_app_out.xml                 |  37 -------
 core/res/res/values/symbols.xml                    |   4 -
 .../systemui/statusbar/phone/PhoneStatusBar.java   |   1 -
 .../internal/policy/impl/PhoneWindowManager.java   |   8 +-
 7 files changed, 155 insertions(+), 101 deletions(-)
 create mode 100644 core/java/com/vanir/util/TaskUtils.java
 delete mode 100644 core/res/res/anim/last_app_in.xml
 delete mode 100644 core/res/res/anim/last_app_out.xml

diff --git a/core/java/com/android/internal/util/aokp/AwesomeAction.java b/core/java/com/android/internal/util/aokp/AwesomeAction.java
index a7b9b7b..a68f420 100755
--- a/core/java/com/android/internal/util/aokp/AwesomeAction.java
+++ b/core/java/com/android/internal/util/aokp/AwesomeAction.java
@@ -16,6 +16,9 @@
 
 package com.android.internal.util.aokp;
 
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.ActivityManager.RunningTaskInfo;
 import android.content.ActivityNotFoundException;
 import android.content.ComponentName;
 import android.content.ContentUris;
@@ -54,7 +57,7 @@ import java.util.List;
 
 import static com.android.internal.util.aokp.AwesomeConstants.AwesomeConstant;
 import static com.android.internal.util.aokp.AwesomeConstants.fromString;
-import com.android.internal.util.cm.ActionUtils;
+import com.vanir.util.TaskUtils;
 
 public class AwesomeAction {
 
@@ -67,15 +70,9 @@ public class AwesomeAction {
     private static boolean wtf = true;
     private static boolean ftw;
 
-    private static int mCurrentUserId = 0;
-
     private AwesomeAction() {
     }
 
-    public static void setCurrentUser(int newUserId) {
-        mCurrentUserId = newUserId;
-    }
-
     public static boolean launchAction(final Context mContext, final String action) {
         if (TextUtils.isEmpty(action) || action.equals(NULL_ACTION)) {
             return false;
@@ -105,15 +102,9 @@ public class AwesomeAction {
                     break;
 
                 case ACTION_KILL:
-                    mHandler.removeCallbacksAndMessages(null);
-                    mHandler.post(new Runnable() { 
-                        @Override
-                        public void run() {
-                            if (ActionUtils.killForegroundApp(mContext,mCurrentUserId)) {
-                                Toast.makeText(mContext, R.string.app_killed_message, Toast.LENGTH_SHORT).show();
-                            }
-                        }
-                    });
+                    Toast.makeText(mContext, R.string.app_killed_message, Toast.LENGTH_SHORT).show();
+                    KillTask mKillTask = new KillTask(mContext);
+                    mHandler.post(mKillTask);
                     break;
 
                 case ACTION_ASSIST:
@@ -133,7 +124,7 @@ public class AwesomeAction {
                     break;
 
                 case ACTION_LAST_APP:
-                    ActionUtils.switchToLastApp(mContext, mCurrentUserId);
+                    TaskUtils.toggleLastApp(mContext);
                     break;
 
                 case ACTION_NOTIFICATIONS:
@@ -282,6 +273,36 @@ public class AwesomeAction {
         return true;
     }
 
+    public static class KillTask implements Runnable {
+        private final static String SysUIPackage = "com.android.systemui";
+        private Context mContext;
+
+        public KillTask(Context context) {
+            this.mContext = context;
+        }
+
+        public void run() {
+            final Intent intent = new Intent(Intent.ACTION_MAIN);
+            final ActivityManager am = (ActivityManager) mContext
+                    .getSystemService(Activity.ACTIVITY_SERVICE);
+            String defaultHomePackage = "com.android.launcher";
+            intent.addCategory(Intent.CATEGORY_HOME);
+            final ResolveInfo res = mContext.getPackageManager().resolveActivity(intent, 0);
+
+            if (res.activityInfo != null && !res.activityInfo.packageName.equals("android")) {
+                defaultHomePackage = res.activityInfo.packageName;
+            }
+
+            RunningTaskInfo info = am.getRunningTasks(1).get(0);
+            String packageName = info.topActivity.getPackageName();
+
+            if (SysUIPackage.equals(packageName)) return; // don't kill SystemUI
+            if (!defaultHomePackage.equals(packageName)) {
+                am.removeTask(info.id, ActivityManager.REMOVE_TASK_KILL_PROCESS);
+            }
+        }
+    }
+
     public static boolean isIntentAvailable(Context context, Intent intent) {
         PackageManager packageManager = context.getPackageManager();
         List<ResolveInfo> list = packageManager.queryIntentActivities(intent,
diff --git a/core/java/com/vanir/util/TaskUtils.java b/core/java/com/vanir/util/TaskUtils.java
new file mode 100644
index 0000000..1b7bbca
--- /dev/null
+++ b/core/java/com/vanir/util/TaskUtils.java
@@ -0,0 +1,114 @@
+/*
+ *  Copyright (C) 2013 The OmniROM Project
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package com.vanir.util;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Process;
+import android.os.UserHandle;
+import android.app.Activity;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.ActivityNotFoundException;
+import android.app.ActivityManager;
+import android.app.ActivityManager.RunningAppProcessInfo;
+import android.util.Log;
+
+import java.util.List;
+
+public class TaskUtils {
+
+    public static boolean killActiveTask(final Context context){
+        final Intent intent = new Intent(Intent.ACTION_MAIN);
+        String defaultHomePackage = "com.android.launcher";
+        intent.addCategory(Intent.CATEGORY_HOME);
+        final ResolveInfo res = context.getPackageManager().resolveActivity(intent, 0);
+        if (res.activityInfo != null && !res.activityInfo.packageName.equals("android")) {
+            defaultHomePackage = res.activityInfo.packageName;
+        }
+        boolean targetKilled = false;
+        final ActivityManager am = (ActivityManager) context
+                .getSystemService(Activity.ACTIVITY_SERVICE);
+        List<RunningAppProcessInfo> apps = am.getRunningAppProcesses();
+        for (RunningAppProcessInfo appInfo : apps) {
+            int uid = appInfo.uid;
+            // Make sure it's a foreground user application (not system,
+            // root, phone, etc.)
+            if (uid >= Process.FIRST_APPLICATION_UID && uid <= Process.LAST_APPLICATION_UID
+                    && appInfo.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
+                if (appInfo.pkgList != null && (appInfo.pkgList.length > 0)) {
+                    for (String pkg : appInfo.pkgList) {
+                        if (!pkg.equals("com.android.systemui")
+                                && !pkg.equals(defaultHomePackage)) {
+                            am.forceStopPackage(pkg);
+                            Process.killProcess(appInfo.pid);
+                            targetKilled = true;
+                            break;
+                        }
+                    }
+                } else {
+                     Process.killProcess(appInfo.pid);
+                     targetKilled = true;
+                }
+            }
+            if (targetKilled) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public static void toggleLastApp(final Context context){
+        final Intent intent = new Intent(Intent.ACTION_MAIN);
+        final ActivityManager am = (ActivityManager) context
+                .getSystemService(Activity.ACTIVITY_SERVICE);
+        String defaultHomePackage = "com.android.launcher";
+        intent.addCategory(Intent.CATEGORY_HOME);
+        final ResolveInfo res = context.getPackageManager().resolveActivity(intent, 0);
+        if (res.activityInfo != null && !res.activityInfo.packageName.equals("android")) {
+            defaultHomePackage = res.activityInfo.packageName;
+        }
+        final List<ActivityManager.RecentTaskInfo> tasks =
+                am.getRecentTasks(5, ActivityManager.RECENT_IGNORE_UNAVAILABLE);
+        // lets get enough tasks to find something to switch to
+        // Note, we'll only get as many as the system currently has - up to 5
+        int lastAppId = 0;
+        Intent lastAppIntent = null;
+        for (int i = 1; i < tasks.size() && lastAppIntent == null; i++) {
+            final String packageName = tasks.get(i).baseIntent.getComponent().getPackageName();
+            if (!packageName.equals(defaultHomePackage) && !packageName.equals("com.android.systemui")) {
+                final ActivityManager.RecentTaskInfo info = tasks.get(i);
+                lastAppId = info.id;
+                lastAppIntent = info.baseIntent;
+            }
+        }
+        if (lastAppId > 0) {
+            am.moveTaskToFront(lastAppId, am.MOVE_TASK_NO_USER_ACTION);
+        } else if (lastAppIntent != null) {
+            // last task is dead, restart it.
+            lastAppIntent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
+            try {
+                context.startActivityAsUser(lastAppIntent, UserHandle.CURRENT);
+            } catch (ActivityNotFoundException e) {
+                Log.w("Recent", "Unable to launch recent task", e);
+            }
+        }
+    }
+}
diff --git a/core/res/res/anim/last_app_in.xml b/core/res/res/anim/last_app_in.xml
deleted file mode 100644
index 14be595..0000000
--- a/core/res/res/anim/last_app_in.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2014 The CyanogenMod Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<set xmlns:android="http://schemas.android.com/apk/res/android"
-    android:interpolator="@android:interpolator/linear">
-
-    <translate android:fromXDelta="0%" android:toXDelta="-35%"
-        android:zAdjustment="bottom"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <scale android:fromXScale="0.80" android:toXScale="1.0"
-        android:fromYScale="0.80" android:toYScale="1.0"
-        android:pivotX="50%" android:pivotY="50%"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <translate android:fromXDelta="-35%" android:toXDelta="35%"
-        android:zAdjustment="top"
-        android:startOffset="@android:integer/config_shortAnimTime"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <alpha android:fromAlpha="0.6" android:toAlpha="1.0"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-</set>
diff --git a/core/res/res/anim/last_app_out.xml b/core/res/res/anim/last_app_out.xml
deleted file mode 100644
index 67b8804..0000000
--- a/core/res/res/anim/last_app_out.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2014 The CyanogenMod Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<set xmlns:android="http://schemas.android.com/apk/res/android"
-    android:interpolator="@android:interpolator/linear">
-
-    <translate android:fromXDelta="-35%" android:toXDelta="35%"
-        android:zAdjustment="top"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <scale android:fromXScale="1.0" android:toXScale="0.80"
-        android:fromYScale="1.0" android:toYScale="0.80"
-        android:pivotX="50%" android:pivotY="50%"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <translate android:fromXDelta="35%" android:toXDelta="-35%"
-        android:zAdjustment="bottom"
-        android:startOffset="@android:integer/config_shortAnimTime"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-    <alpha android:fromAlpha="1.0" android:toAlpha="0.6"
-        android:duration="@android:integer/config_shortAnimTime"
-        />
-</set>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 4743335..a4ab1ed 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -2043,10 +2043,6 @@
 
   <java-symbol type="array" name="config_ignored_sms_packages" />
 
-  <!-- Last app switch animations -->
-   <java-symbol type="anim" name="last_app_in" />
-   <java-symbol type="anim" name="last_app_out" />
-
   <!-- USB OTG Notification -->
   <java-symbol type="string" name="usb_storage_notification_manage_message" />
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index fca39be..074e012 100755
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -105,7 +105,6 @@ import android.widget.TabHost.TabSpec;
 import android.widget.TextView;
 
 import com.android.internal.statusbar.StatusBarIcon;
-import com.android.internal.util.cm.ActionUtils;
 import com.android.systemui.BatteryMeterView.BatteryMeterMode;
 import com.android.systemui.DemoMode;
 import com.android.systemui.DockBatteryMeterView;
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 761f987..d7a7a41 100755
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -75,8 +75,6 @@ import android.service.dreams.IDreamManager;
 import android.service.gesture.EdgeGestureManager;
 import com.android.internal.os.DeviceKeyHandler;
 
-import com.android.internal.util.cm.ActionUtils;
-import com.android.internal.util.aokp.AwesomeAction;
 import dalvik.system.DexClassLoader;
 
 import android.util.DisplayMetrics;
@@ -136,6 +134,7 @@ import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN;
 import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED;
 
 import com.vanir.torch.DelayedStickyTorch;
+import com.vanir.util.TaskUtils;
 
 /**
  * WindowManagerPolicy implementation for the Android phone UI.  This
@@ -1251,7 +1250,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 mHandler.post(mKillTask);
                 break;
             case KEY_ACTION_LASTAPP:
-                ActionUtils.switchToLastApp(mContext, mCurrentUserId);
+                TaskUtils.toggleLastApp(mContext);
                 break;
             case KEY_GESTURE_PANEL:
                 mContext.sendBroadcast(new Intent(Intent.TOGGLE_GESTURE_ACTIONS));
@@ -1280,7 +1279,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     Runnable mKillTask = new Runnable() {
         public void run() {
-            if (ActionUtils.killForegroundApp(mContext,mCurrentUserId)) {
+            if (TaskUtils.killActiveTask(mContext)) {
                 performHapticFeedbackLw(null, HapticFeedbackConstants.LONG_PRESS, false);
                 Toast.makeText(mContext, R.string.app_killed_message, Toast.LENGTH_SHORT).show();
             }
@@ -6657,7 +6656,6 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 // oh well
             }
         }
-        AwesomeAction.setCurrentUser(newUserId);
         setLastInputMethodWindowLw(null, null);
         mCurrentUser = newUserId;
     }
-- 
2.5.0

