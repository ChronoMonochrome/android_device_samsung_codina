From 7b714c914da38b2e98ab18b15f33b1beb0c4e68c Mon Sep 17 00:00:00 2001
From: TheBr0ken <jtoro2716@gmail.com>
Date: Fri, 27 Mar 2015 18:18:02 -0400
Subject: [PATCH 12/26] SystemUI: remove tests

Change-Id: I26483521a2d0be7a72c1aeced48bf0ff23651900
Signed-off-by: Chet Kener <Cl3Kener@gmail.com>
---
 packages/SystemUI/tests/Android.mk                 |  39 ---
 packages/SystemUI/tests/AndroidManifest.xml        |  32 ---
 packages/SystemUI/tests/res/layout/main.xml        |  32 ---
 .../src/com/android/systemui/EventLogTags.logtags  |   1 -
 .../screenshot/ScreenshotStubActivity.java         |  33 ---
 .../systemui/screenshot/ScreenshotTest.java        | 141 -----------
 .../policy/NetworkControllerBaseTest.java          | 263 ---------------------
 .../policy/NetworkControllerDataTest.java          | 129 ----------
 .../policy/NetworkControllerSignalTest.java        | 241 -------------------
 .../policy/NetworkControllerWifiTest.java          | 178 --------------
 10 files changed, 1089 deletions(-)
 delete mode 100644 packages/SystemUI/tests/Android.mk
 delete mode 100644 packages/SystemUI/tests/AndroidManifest.xml
 delete mode 100644 packages/SystemUI/tests/res/layout/main.xml
 delete mode 120000 packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerDataTest.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerSignalTest.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerWifiTest.java

diff --git a/packages/SystemUI/tests/Android.mk b/packages/SystemUI/tests/Android.mk
deleted file mode 100644
index 5a90324..0000000
--- a/packages/SystemUI/tests/Android.mk
+++ /dev/null
@@ -1,39 +0,0 @@
-# Copyright (C) 2011 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-LOCAL_PATH := $(call my-dir)
-include $(CLEAR_VARS)
-
-LOCAL_MODULE_TAGS := tests
-
-LOCAL_AAPT_FLAGS := --auto-add-overlay --extra-packages com.android.systemui:com.android.keyguard
-LOCAL_SRC_FILES := $(call all-java-files-under, src) \
-    $(call all-java-files-under, ../src) \
-    src/com/android/systemui/EventLogTags.logtags
-
-LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res \
-    frameworks/base/packages/SystemUI/res \
-    frameworks/base/packages/Keyguard/res
-
-LOCAL_JAVA_LIBRARIES := android.test.runner telephony-common
-
-LOCAL_PACKAGE_NAME := SystemUITests
-
-LOCAL_STATIC_JAVA_LIBRARIES := mockito-target Keyguard
-
-# sign this with platform cert, so this test is allowed to inject key events into
-# UI it doesn't own. This is necessary to allow screenshots to be taken
-LOCAL_CERTIFICATE := platform
-
-include $(BUILD_PACKAGE)
diff --git a/packages/SystemUI/tests/AndroidManifest.xml b/packages/SystemUI/tests/AndroidManifest.xml
deleted file mode 100644
index c21af24..0000000
--- a/packages/SystemUI/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2011 The Android Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.systemui.tests">
-
-    <uses-permission android:name="android.permission.INJECT_EVENTS" />
-    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
-
-    <application>
-        <uses-library android:name="android.test.runner" />
-        <activity android:name="com.android.systemui.screenshot.ScreenshotStubActivity" />
-    </application>
-
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="com.android.systemui.tests"
-        android:label="Tests for SystemUI">
-    </instrumentation>
-</manifest>
diff --git a/packages/SystemUI/tests/res/layout/main.xml b/packages/SystemUI/tests/res/layout/main.xml
deleted file mode 100644
index 56dffe6..0000000
--- a/packages/SystemUI/tests/res/layout/main.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2011 The Android Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    >
-    <TextView
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="this is a test activity"
-    />
-    <EditText
-        android:layout_height="wrap_content"
-        android:id="@+id/editText1"
-        android:layout_width="match_parent">
-        <requestFocus></requestFocus>
-    </EditText>
-</LinearLayout>
diff --git a/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags b/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags
deleted file mode 120000
index 2f243d7..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags
+++ /dev/null
@@ -1 +0,0 @@
-../../../../../src/com/android/systemui/EventLogTags.logtags
\ No newline at end of file
diff --git a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java b/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
deleted file mode 100644
index 784d035..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2011 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.android.systemui.screenshot;
-
-import com.android.systemui.R;
-
-import android.app.Activity;
-import android.os.Bundle;
-
-/**
- * A stub activity used in {@link ScreenshotTest}.
- */
-public class ScreenshotStubActivity extends Activity {
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-    }
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java b/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java
deleted file mode 100644
index 5e5c284..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Copyright (C) 2011 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.android.systemui.screenshot;
-
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Environment;
-import android.os.FileObserver;
-import android.test.ActivityInstrumentationTestCase2;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.util.Log;
-import android.view.KeyEvent;
-
-import java.io.File;
-
-/**
- * Functional tests for the global screenshot feature.
- */
-@LargeTest
-public class ScreenshotTest extends ActivityInstrumentationTestCase2<ScreenshotStubActivity> {
-
-    private static final String LOG_TAG = "ScreenshotTest";
-    private static final int SCREEN_WAIT_TIME_SEC = 5;
-
-    public ScreenshotTest() {
-        super(ScreenshotStubActivity.class);
-    }
-
-    /**
-     * A simple test for screenshots that launches an Activity, injects the key event combo
-     * to trigger the screenshot, and verifies the screenshot was taken successfully.
-     */
-    public void testScreenshot() throws Exception {
-        if (true) {
-            // Disable until this works again.
-            return;
-        }
-        Log.d(LOG_TAG, "starting testScreenshot");
-        // launch the activity.
-        ScreenshotStubActivity activity = getActivity();
-        assertNotNull(activity);
-
-        File screenshotDir = getScreenshotDir();
-        NewScreenshotObserver observer = new NewScreenshotObserver(
-                screenshotDir.getAbsolutePath());
-        observer.startWatching();
-        takeScreenshot();
-        // unlikely, but check if a new screenshot file was already created
-        if (observer.getCreatedPath() == null) {
-            // wait for screenshot to be created
-            synchronized(observer) {
-                observer.wait(SCREEN_WAIT_TIME_SEC*1000);
-            }
-        }
-        assertNotNull(String.format("Could not find screenshot after %d seconds",
-                SCREEN_WAIT_TIME_SEC), observer.getCreatedPath());
-
-        File screenshotFile = new File(screenshotDir, observer.getCreatedPath());
-        try {
-            assertTrue(String.format("Detected new screenshot %s but its not a file",
-                    screenshotFile.getName()), screenshotFile.isFile());
-            assertTrue(String.format("Detected new screenshot %s but its not an image",
-                    screenshotFile.getName()), isValidImage(screenshotFile));
-        } finally {
-            // delete the file to prevent external storage from filing up
-            screenshotFile.delete();
-        }
-    }
-
-    private static class NewScreenshotObserver extends FileObserver {
-        private String mAddedPath = null;
-
-        NewScreenshotObserver(String path) {
-            super(path, FileObserver.CREATE);
-        }
-
-        synchronized String getCreatedPath() {
-            return mAddedPath;
-        }
-
-        @Override
-        public void onEvent(int event, String path) {
-            Log.d(LOG_TAG, String.format("Detected new file added %s", path));
-            synchronized (this) {
-                mAddedPath = path;
-                notify();
-            }
-        }
-    }
-
-    /**
-     * Inject the key sequence to take a screenshot.
-     */
-    private void takeScreenshot() {
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,
-                KeyEvent.KEYCODE_POWER));
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,
-                KeyEvent.KEYCODE_VOLUME_DOWN));
-        // the volume down key event will cause the 'volume adjustment' UI to appear in the
-        // foreground, and steal UI focus
-        // unfortunately this means the next key event will get directed to the
-        // 'volume adjustment' UI, instead of this test's activity
-        // for this reason this test must be signed with platform certificate, to grant this test
-        // permission to inject key events to another process
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,
-                KeyEvent.KEYCODE_VOLUME_DOWN));
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,
-                KeyEvent.KEYCODE_POWER));
-    }
-
-    /**
-     * Get the directory where screenshot images are stored.
-     */
-    private File getScreenshotDir() {
-        // TODO: get this dir location from a constant
-        return new File(Environment.getExternalStorageDirectory(), "Pictures" + File.separator +
-                "Screenshots");
-    }
-
-    /**
-     * Return true if file is valid image file
-     */
-    private boolean isValidImage(File screenshotFile) {
-        Bitmap b = BitmapFactory.decodeFile(screenshotFile.getAbsolutePath());
-        // TODO: do more checks on image
-        return b != null;
-    }
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java
deleted file mode 100644
index d85b059..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java
+++ /dev/null
@@ -1,263 +0,0 @@
-
-package com.android.systemui.statusbar.policy;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
-
-import android.content.Intent;
-import android.net.ConnectivityManager;
-import android.net.NetworkCapabilities;
-import android.net.wifi.WifiManager;
-import android.telephony.PhoneStateListener;
-import android.telephony.ServiceState;
-import android.telephony.SignalStrength;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.test.AndroidTestCase;
-import android.util.Log;
-
-import com.android.internal.telephony.cdma.EriInfo;
-import com.android.systemui.statusbar.policy.NetworkController.NetworkSignalChangedCallback;
-import com.android.systemui.statusbar.policy.NetworkControllerImpl.Config;
-import com.android.systemui.statusbar.policy.NetworkControllerImpl.SignalCluster;
-
-public class NetworkControllerBaseTest extends AndroidTestCase {
-    private static final String TAG = "NetworkControllerBaseTest";
-    protected static final int DEFAULT_LEVEL = 2;
-    protected static final int DEFAULT_SIGNAL_STRENGTH =
-            TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH[1][DEFAULT_LEVEL];
-    protected static final int DEFAULT_QS_SIGNAL_STRENGTH =
-            TelephonyIcons.QS_TELEPHONY_SIGNAL_STRENGTH[1][DEFAULT_LEVEL];
-    protected static final int DEFAULT_ICON = TelephonyIcons.ICON_3G;
-    protected static final int DEFAULT_QS_ICON = TelephonyIcons.QS_ICON_3G;
-
-    protected NetworkControllerImpl mNetworkController;
-    protected PhoneStateListener mPhoneStateListener;
-    protected SignalCluster mSignalCluster;
-    protected NetworkSignalChangedCallback mNetworkSignalChangedCallback;
-    private SignalStrength mSignalStrength;
-    private ServiceState mServiceState;
-    protected ConnectivityManager mMockCm;
-    protected WifiManager mMockWm;
-    protected SubscriptionManager mMockSm;
-    protected TelephonyManager mMockTm;
-    protected Config mConfig;
-
-    private NetworkCapabilities mNetCapabilities;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        // Mockito stuff.
-        System.setProperty("dexmaker.dexcache", mContext.getCacheDir().getPath());
-        Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
-
-        mMockWm = mock(WifiManager.class);
-        mMockTm = mock(TelephonyManager.class);
-        mMockSm = mock(SubscriptionManager.class);
-        mMockCm = mock(ConnectivityManager.class);
-        mNetCapabilities = new NetworkCapabilities();
-        when(mMockCm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)).thenReturn(true);
-        when(mMockCm.getDefaultNetworkCapabilitiesForUser(0)).thenReturn(
-                new NetworkCapabilities[] { mNetCapabilities });
-
-        mSignalStrength = mock(SignalStrength.class);
-        mServiceState = mock(ServiceState.class);
-
-        mConfig = new Config();
-        mConfig.hspaDataDistinguishable = true;
-        mNetworkController = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
-                mConfig, mock(AccessPointControllerImpl.class),
-                mock(MobileDataControllerImpl.class));
-        setupNetworkController();
-    }
-
-    protected void setupNetworkController() {
-        // For now just pretend to be the data sim, so we can test that too.
-        final int subId = SubscriptionManager.getDefaultDataSubId();
-        SubscriptionInfo subscription = mock(SubscriptionInfo.class);
-        List<SubscriptionInfo> subs = new ArrayList<SubscriptionInfo>();
-        when(subscription.getSubscriptionId()).thenReturn(subId);
-        subs.add(subscription);
-        mNetworkController.setCurrentSubscriptions(subs);
-        mPhoneStateListener =
-                mNetworkController.mMobileSignalControllers.get(subId).mPhoneStateListener;
-        mSignalCluster = mock(SignalCluster.class);
-        mNetworkSignalChangedCallback = mock(NetworkSignalChangedCallback.class);
-        mNetworkController.addSignalCluster(mSignalCluster);
-        mNetworkController.addNetworkSignalChangedCallback(mNetworkSignalChangedCallback);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        StringWriter sw = new StringWriter();
-        PrintWriter pw = new PrintWriter(sw);
-        mNetworkController.dump(null, pw, null);
-        pw.flush();
-        Log.d(TAG, sw.toString());
-        super.tearDown();
-    }
-
-    // 2 Bars 3G GSM.
-    public void setupDefaultSignal() {
-        setIsGsm(true);
-        setVoiceRegState(ServiceState.STATE_IN_SERVICE);
-        setGsmRoaming(false);
-        setLevel(DEFAULT_LEVEL);
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_UMTS);
-        setConnectivity(100, ConnectivityManager.TYPE_MOBILE, true);
-    }
-
-    public void setConnectivity(int inetCondition, int networkType, boolean isConnected) {
-        Intent i = new Intent(ConnectivityManager.INET_CONDITION_ACTION);
-        // TODO: Separate out into several NetworkCapabilities.
-        if (isConnected) {
-            mNetCapabilities.addTransportType(networkType);
-        } else {
-            mNetCapabilities.removeTransportType(networkType);
-        }
-        if (inetCondition != 0) {
-            mNetCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
-        } else {
-            mNetCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
-        }
-
-        mNetworkController.onReceive(mContext, i);
-    }
-
-    public void setGsmRoaming(boolean isRoaming) {
-        when(mServiceState.getRoaming()).thenReturn(isRoaming);
-        updateServiceState();
-    }
-
-    public void setCdmaRoaming(boolean isRoaming) {
-        when(mServiceState.getCdmaEriIconIndex()).thenReturn(isRoaming ?
-                EriInfo.ROAMING_INDICATOR_ON : EriInfo.ROAMING_INDICATOR_OFF);
-        when(mServiceState.getCdmaEriIconMode()).thenReturn(isRoaming ?
-                EriInfo.ROAMING_ICON_MODE_NORMAL : -1);
-        updateServiceState();
-    }
-
-    public void setVoiceRegState(int voiceRegState) {
-        when(mServiceState.getVoiceRegState()).thenReturn(voiceRegState);
-        updateServiceState();
-    }
-
-    public void setDataRegState(int dataRegState) {
-        when(mServiceState.getDataRegState()).thenReturn(dataRegState);
-        updateServiceState();
-    }
-
-    public void setIsEmergencyOnly(boolean isEmergency) {
-        when(mServiceState.isEmergencyOnly()).thenReturn(isEmergency);
-        updateServiceState();
-    }
-
-    public void setCdmaLevel(int level) {
-        when(mSignalStrength.getCdmaLevel()).thenReturn(level);
-        updateSignalStrength();
-    }
-
-    public void setLevel(int level) {
-        when(mSignalStrength.getLevel()).thenReturn(level);
-        updateSignalStrength();
-    }
-
-    public void setIsGsm(boolean gsm) {
-        when(mSignalStrength.isGsm()).thenReturn(gsm);
-        updateSignalStrength();
-    }
-
-    public void setCdmaEri(int index, int mode) {
-        // TODO: Figure this out.
-    }
-
-    private void updateSignalStrength() {
-        Log.d(TAG, "Sending Signal Strength: " + mSignalStrength);
-        mPhoneStateListener.onSignalStrengthsChanged(mSignalStrength);
-    }
-
-    private void updateServiceState() {
-        Log.d(TAG, "Sending Service State: " + mServiceState);
-        mPhoneStateListener.onServiceStateChanged(mServiceState);
-    }
-
-    public void updateCallState(int state) {
-        // Inputs not currently used in NetworkControllerImpl.
-        mPhoneStateListener.onCallStateChanged(state, "0123456789");
-    }
-
-    public void updateDataConnectionState(int dataState, int dataNetType) {
-        mPhoneStateListener.onDataConnectionStateChanged(dataState, dataNetType);
-    }
-
-    public void updateDataActivity(int dataActivity) {
-        mPhoneStateListener.onDataActivity(dataActivity);
-    }
-
-    protected void verifyHasNoSims(boolean hasNoSimsVisible) {
-        ArgumentCaptor<Boolean> hasNoSimsArg = ArgumentCaptor.forClass(Boolean.class);
-
-        Mockito.verify(mSignalCluster, Mockito.atLeastOnce()).setNoSims(hasNoSimsArg.capture());
-        assertEquals("No sims in status bar", hasNoSimsVisible, (boolean) hasNoSimsArg.getValue());
-
-        Mockito.verify(mNetworkSignalChangedCallback, Mockito.atLeastOnce())
-                .onNoSimVisibleChanged(hasNoSimsArg.capture());
-        assertEquals("No sims in quick settings", hasNoSimsVisible,
-                (boolean) hasNoSimsArg.getValue());
-    }
-
-    protected void verifyLastQsMobileDataIndicators(boolean visible, int icon, int typeIcon,
-            boolean dataIn, boolean dataOut) {
-        ArgumentCaptor<Integer> iconArg = ArgumentCaptor.forClass(Integer.class);
-        ArgumentCaptor<Integer> typeIconArg = ArgumentCaptor.forClass(Integer.class);
-        ArgumentCaptor<Boolean> visibleArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Boolean> dataInArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Boolean> dataOutArg = ArgumentCaptor.forClass(Boolean.class);
-
-        Mockito.verify(mNetworkSignalChangedCallback, Mockito.atLeastOnce())
-                .onMobileDataSignalChanged(visibleArg.capture(), iconArg.capture(),
-                        ArgumentCaptor.forClass(String.class).capture(),
-                        typeIconArg.capture(),
-                        dataInArg.capture(),
-                        dataOutArg.capture(),
-                        ArgumentCaptor.forClass(String.class).capture(),
-                        ArgumentCaptor.forClass(String.class).capture(),
-                        ArgumentCaptor.forClass(Boolean.class).capture());
-        assertEquals("Visibility in, quick settings", visible, (boolean) visibleArg.getValue());
-        assertEquals("Signal icon in, quick settings", icon, (int) iconArg.getValue());
-        assertEquals("Data icon in, quick settings", typeIcon, (int) typeIconArg.getValue());
-        assertEquals("Data direction in, in quick settings", dataIn,
-                (boolean) dataInArg.getValue());
-        assertEquals("Data direction out, in quick settings", dataOut,
-                (boolean) dataOutArg.getValue());
-    }
-
-    protected void verifyLastMobileDataIndicators(boolean visible, int icon, int typeIcon) {
-        ArgumentCaptor<Integer> iconArg = ArgumentCaptor.forClass(Integer.class);
-        ArgumentCaptor<Integer> typeIconArg = ArgumentCaptor.forClass(Integer.class);
-        ArgumentCaptor<Boolean> visibleArg = ArgumentCaptor.forClass(Boolean.class);
-
-        // TODO: Verify all fields.
-        Mockito.verify(mSignalCluster, Mockito.atLeastOnce()).setMobileDataIndicators(
-                visibleArg.capture(), iconArg.capture(), typeIconArg.capture(),
-                ArgumentCaptor.forClass(String.class).capture(),
-                ArgumentCaptor.forClass(String.class).capture(),
-                ArgumentCaptor.forClass(Boolean.class).capture(),
-                ArgumentCaptor.forClass(Integer.class).capture());
-
-        assertEquals("Signal icon in status bar", icon, (int) iconArg.getValue());
-        assertEquals("Data icon in status bar", typeIcon, (int) typeIconArg.getValue());
-        assertEquals("Visibility in status bar", visible, (boolean) visibleArg.getValue());
-    }
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerDataTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerDataTest.java
deleted file mode 100644
index 3f9312d..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerDataTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.android.systemui.statusbar.policy;
-
-import org.mockito.Mockito;
-
-import android.telephony.TelephonyManager;
-
-public class NetworkControllerDataTest extends NetworkControllerBaseTest {
-
-    public void test3gDataIcon() {
-        setupDefaultSignal();
-
-        verifyDataIndicators(TelephonyIcons.DATA_3G[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_3G[1]);
-    }
-
-    public void testRoamingDataIcon() {
-        setupDefaultSignal();
-        setGsmRoaming(true);
-
-        verifyLastMobileDataIndicators(true,
-                TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH_ROAMING[1][DEFAULT_LEVEL],
-                TelephonyIcons.ROAMING_ICON);
-        verifyLastQsMobileDataIndicators(true,
-                TelephonyIcons.QS_TELEPHONY_SIGNAL_STRENGTH[1][DEFAULT_LEVEL],
-                TelephonyIcons.QS_DATA_R[1], false, false);
-    }
-
-    public void test2gDataIcon() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_GSM);
-
-        verifyDataIndicators(TelephonyIcons.DATA_G[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_G[1]);
-    }
-
-    public void testCdmaDataIcon() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_CDMA);
-
-        verifyDataIndicators(TelephonyIcons.DATA_1X[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_1X[1]);
-    }
-
-    public void testEdgeDataIcon() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_EDGE);
-
-        verifyDataIndicators(TelephonyIcons.DATA_E[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_E[1]);
-    }
-
-    public void testLteDataIcon() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_LTE);
-
-        verifyDataIndicators(TelephonyIcons.DATA_LTE[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_LTE[1]);
-    }
-
-    public void testHspaDataIcon() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_HSPA);
-
-        verifyDataIndicators(TelephonyIcons.DATA_H[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_H[1]);
-    }
-
-    public void test4gDataIcon() {
-        // Switch to showing 4g icon and re-initialize the NetworkController.
-        mConfig.show4gForLte = true;
-        mNetworkController = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
-                mConfig, Mockito.mock(AccessPointControllerImpl.class),
-                Mockito.mock(MobileDataControllerImpl.class));
-        setupNetworkController();
-
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_LTE);
-
-        verifyDataIndicators(TelephonyIcons.DATA_4G[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_4G[1]);
-    }
-
-    public void test4gDataIconConfigChange() {
-        setupDefaultSignal();
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_LTE);
-
-        // Switch to showing 4g icon and re-initialize the NetworkController.
-        mConfig.show4gForLte = true;
-        // Can't send the broadcast as that would actually read the config from
-        // the context.  Instead we'll just poke at a function that does all of
-        // the after work.
-        mNetworkController.handleConfigurationChanged();
-
-        verifyDataIndicators(TelephonyIcons.DATA_4G[1][0 /* No direction */],
-                TelephonyIcons.QS_DATA_4G[1]);
-    }
-
-    public void testDataActivity() {
-        setupDefaultSignal();
-
-        testDataActivity(TelephonyManager.DATA_ACTIVITY_NONE, false, false);
-        testDataActivity(TelephonyManager.DATA_ACTIVITY_IN, true, false);
-        testDataActivity(TelephonyManager.DATA_ACTIVITY_OUT, false, true);
-        testDataActivity(TelephonyManager.DATA_ACTIVITY_INOUT, true, true);
-    }
-
-    private void testDataActivity(int direction, boolean in, boolean out) {
-        updateDataActivity(direction);
-
-        verifyLastMobileDataIndicators(true, DEFAULT_SIGNAL_STRENGTH, DEFAULT_ICON);
-        verifyLastQsMobileDataIndicators(true, DEFAULT_QS_SIGNAL_STRENGTH,
-                DEFAULT_QS_ICON, in, out);
-
-    }
-
-    private void verifyDataIndicators(int dataIcon, int qsDataIcon) {
-        verifyLastMobileDataIndicators(true, DEFAULT_SIGNAL_STRENGTH, dataIcon);
-        verifyLastQsMobileDataIndicators(true, DEFAULT_QS_SIGNAL_STRENGTH, qsDataIcon, false,
-                false);
-    }
-
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerSignalTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerSignalTest.java
deleted file mode 100644
index 525dd20..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerSignalTest.java
+++ /dev/null
@@ -1,241 +0,0 @@
-package com.android.systemui.statusbar.policy;
-
-import static org.mockito.Mockito.mock;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.mockito.Mockito;
-
-import android.content.Intent;
-import android.net.ConnectivityManager;
-import android.telephony.ServiceState;
-import android.telephony.SignalStrength;
-import android.telephony.SubscriptionInfo;
-import android.telephony.TelephonyManager;
-
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.systemui.R;
-import com.android.systemui.statusbar.policy.NetworkControllerImpl.MobileSignalController;
-
-public class NetworkControllerSignalTest extends NetworkControllerBaseTest {
-
-    public void testNoIconWithoutMobile() {
-        // Turn off mobile network support.
-        Mockito.when(mMockCm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)).thenReturn(false);
-        // Create a new NetworkController as this is currently handled in constructor.
-        mNetworkController = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
-                mConfig, mock(AccessPointControllerImpl.class),
-                mock(MobileDataControllerImpl.class));
-        setupNetworkController();
-
-        verifyLastMobileDataIndicators(false, 0, 0);
-    }
-
-    public void testNoSimsIconPresent() {
-        // No Subscriptions.
-        mNetworkController.mMobileSignalControllers.clear();
-        mNetworkController.updateNoSims();
-
-        verifyHasNoSims(true);
-    }
-
-    public void testNoSimlessIconWithoutMobile() {
-        // Turn off mobile network support.
-        Mockito.when(mMockCm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)).thenReturn(false);
-        // Create a new NetworkController as this is currently handled in constructor.
-        mNetworkController = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
-                mConfig, mock(AccessPointControllerImpl.class),
-                mock(MobileDataControllerImpl.class));
-        setupNetworkController();
-
-        // No Subscriptions.
-        mNetworkController.mMobileSignalControllers.clear();
-        mNetworkController.updateNoSims();
-
-        verifyHasNoSims(false);
-    }
-
-    public void testSignalStrength() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setLevel(testStrength);
-
-            verifyLastMobileDataIndicators(true,
-                    TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH[1][testStrength],
-                    DEFAULT_ICON);
-
-            // Verify low inet number indexing.
-            setConnectivity(0, ConnectivityManager.TYPE_MOBILE, true);
-            verifyLastMobileDataIndicators(true,
-                    TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH[0][testStrength], 0);
-        }
-    }
-
-    public void testCdmaSignalStrength() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setCdma();
-            setLevel(testStrength);
-
-            verifyLastMobileDataIndicators(true,
-                    TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH[1][testStrength],
-                    TelephonyIcons.DATA_1X[1][0 /* No direction */]);
-        }
-    }
-
-    public void testSignalRoaming() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setGsmRoaming(true);
-            setLevel(testStrength);
-
-            verifyLastMobileDataIndicators(true,
-                    TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH_ROAMING[1][testStrength],
-                    TelephonyIcons.ROAMING_ICON);
-        }
-    }
-
-    public void testCdmaSignalRoaming() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setCdma();
-            setCdmaRoaming(true);
-            setLevel(testStrength);
-
-            verifyLastMobileDataIndicators(true,
-                    TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH_ROAMING[1][testStrength],
-                    TelephonyIcons.ROAMING_ICON);
-        }
-    }
-
-    public void testQsSignalStrength() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setLevel(testStrength);
-
-            verifyLastQsMobileDataIndicators(true,
-                    TelephonyIcons.QS_TELEPHONY_SIGNAL_STRENGTH[1][testStrength],
-                    DEFAULT_QS_ICON, false, false);
-        }
-    }
-
-    public void testCdmaQsSignalStrength() {
-        for (int testStrength = SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-                testStrength <= SignalStrength.SIGNAL_STRENGTH_GREAT; testStrength++) {
-            setupDefaultSignal();
-            setCdma();
-            setLevel(testStrength);
-
-            verifyLastQsMobileDataIndicators(true,
-                    TelephonyIcons.QS_TELEPHONY_SIGNAL_STRENGTH[1][testStrength],
-                    TelephonyIcons.QS_ICON_1X, false, false);
-        }
-    }
-
-    public void testNoRoamingWithoutSignal() {
-        setupDefaultSignal();
-        setCdma();
-        setCdmaRoaming(true);
-        setVoiceRegState(ServiceState.STATE_OUT_OF_SERVICE);
-        setDataRegState(ServiceState.STATE_OUT_OF_SERVICE);
-
-        // This exposes the bug in b/18034542, and should be switched to the commented out
-        // verification below (and pass), once the bug is fixed.
-        verifyLastMobileDataIndicators(true, R.drawable.stat_sys_signal_null,
-                TelephonyIcons.ROAMING_ICON);
-        //verifyLastMobileDataIndicators(true, R.drawable.stat_sys_signal_null, 0 /* No Icon */);
-    }
-
-    // Some tests of actual NetworkController code, just internals not display stuff
-    // TODO: Put this somewhere else, maybe in its own file.
-    public void testHasCorrectMobileControllers() {
-        int[] testSubscriptions = new int[] { 1, 5, 3 };
-        int notTestSubscription = 0;
-        MobileSignalController mobileSignalController = Mockito.mock(MobileSignalController.class);
-
-        mNetworkController.mMobileSignalControllers.clear();
-        List<SubscriptionInfo> subscriptions = new ArrayList<>();
-        for (int i = 0; i < testSubscriptions.length; i++) {
-            // Force the test controllers into NetworkController.
-            mNetworkController.mMobileSignalControllers.put(testSubscriptions[i],
-                    mobileSignalController);
-
-            // Generate a list of subscriptions we will tell the NetworkController to use.
-            SubscriptionInfo mockSubInfo = Mockito.mock(SubscriptionInfo.class);
-            Mockito.when(mockSubInfo.getSubscriptionId()).thenReturn(testSubscriptions[i]);
-            subscriptions.add(mockSubInfo);
-        }
-        assertTrue(mNetworkController.hasCorrectMobileControllers(subscriptions));
-
-        // Add a subscription that the NetworkController doesn't know about.
-        SubscriptionInfo mockSubInfo = Mockito.mock(SubscriptionInfo.class);
-        Mockito.when(mockSubInfo.getSubscriptionId()).thenReturn(notTestSubscription);
-        subscriptions.add(mockSubInfo);
-        assertFalse(mNetworkController.hasCorrectMobileControllers(subscriptions));
-    }
-
-    public void testSetCurrentSubscriptions() {
-        // We will not add one controller to make sure it gets created.
-        int indexToSkipController = 0;
-        // We will not add one subscription to make sure it's controller gets removed.
-        int indexToSkipSubscription = 1;
-
-        int[] testSubscriptions = new int[] { 1, 5, 3 };
-        MobileSignalController[] mobileSignalControllers = new MobileSignalController[] {
-                Mockito.mock(MobileSignalController.class),
-                Mockito.mock(MobileSignalController.class),
-                Mockito.mock(MobileSignalController.class),
-        };
-        mNetworkController.mMobileSignalControllers.clear();
-        List<SubscriptionInfo> subscriptions = new ArrayList<>();
-        for (int i = 0; i < testSubscriptions.length; i++) {
-            if (i != indexToSkipController) {
-                // Force the test controllers into NetworkController.
-                mNetworkController.mMobileSignalControllers.put(testSubscriptions[i],
-                        mobileSignalControllers[i]);
-            }
-
-            if (i != indexToSkipSubscription) {
-                // Generate a list of subscriptions we will tell the NetworkController to use.
-                SubscriptionInfo mockSubInfo = Mockito.mock(SubscriptionInfo.class);
-                Mockito.when(mockSubInfo.getSubscriptionId()).thenReturn(testSubscriptions[i]);
-                Mockito.when(mockSubInfo.getSimSlotIndex()).thenReturn(testSubscriptions[i]);
-                subscriptions.add(mockSubInfo);
-            }
-        }
-
-        // We can only test whether unregister gets called if it thinks its in a listening
-        // state.
-        mNetworkController.mListening = true;
-        mNetworkController.setCurrentSubscriptions(subscriptions);
-
-        for (int i = 0; i < testSubscriptions.length; i++) {
-            if (i == indexToSkipController) {
-                // Make sure a controller was created despite us not adding one.
-                assertTrue(mNetworkController.mMobileSignalControllers.containsKey(
-                        testSubscriptions[i]));
-            } else if (i == indexToSkipSubscription) {
-                // Make sure the controller that did exist was removed
-                assertFalse(mNetworkController.mMobileSignalControllers.containsKey(
-                        testSubscriptions[i]));
-            } else {
-                // If a MobileSignalController is around it needs to not be unregistered.
-                Mockito.verify(mobileSignalControllers[i], Mockito.never())
-                        .unregisterListener();
-            }
-        }
-    }
-
-    private void setCdma() {
-        setIsGsm(false);
-        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
-                TelephonyManager.NETWORK_TYPE_CDMA);
-        setCdmaRoaming(false);
-    }
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerWifiTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerWifiTest.java
deleted file mode 100644
index 2e0e9a3..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerWifiTest.java
+++ /dev/null
@@ -1,178 +0,0 @@
-package com.android.systemui.statusbar.policy;
-
-import android.content.Intent;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.net.wifi.WifiInfo;
-import android.net.wifi.WifiManager;
-
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
-
-public class NetworkControllerWifiTest extends NetworkControllerBaseTest {
-    // These match the constants in WifiManager and need to be kept up to date.
-    private static final int MIN_RSSI = -100;
-    private static final int MAX_RSSI = -55;
-
-    public void testWifiIcon() {
-        String testSsid = "Test SSID";
-        setWifiEnabled(true);
-        verifyLastWifiIcon(false, WifiIcons.WIFI_NO_NETWORK);
-
-        setWifiState(true, testSsid);
-        verifyLastWifiIcon(true, WifiIcons.WIFI_SIGNAL_STRENGTH[0][0]);
-
-        for (int testLevel = 0; testLevel < WifiIcons.WIFI_LEVEL_COUNT; testLevel++) {
-            setWifiLevel(testLevel);
-
-            setConnectivity(100, ConnectivityManager.TYPE_WIFI, true);
-            verifyLastWifiIcon(true, WifiIcons.WIFI_SIGNAL_STRENGTH[1][testLevel]);
-            setConnectivity(0, ConnectivityManager.TYPE_WIFI, true);
-            verifyLastWifiIcon(true, WifiIcons.WIFI_SIGNAL_STRENGTH[0][testLevel]);
-        }
-    }
-
-    public void testQsWifiIcon() {
-        String testSsid = "Test SSID";
-
-        setWifiEnabled(false);
-        verifyLastQsWifiIcon(false, false, WifiIcons.QS_WIFI_NO_NETWORK, null);
-
-        setWifiEnabled(true);
-        verifyLastQsWifiIcon(true, false, WifiIcons.QS_WIFI_NO_NETWORK, null);
-
-        setWifiState(true, testSsid);
-        for (int testLevel = 0; testLevel < WifiIcons.WIFI_LEVEL_COUNT; testLevel++) {
-            setWifiLevel(testLevel);
-
-            setConnectivity(100, ConnectivityManager.TYPE_WIFI, true);
-            verifyLastQsWifiIcon(true, true, WifiIcons.QS_WIFI_SIGNAL_STRENGTH[1][testLevel],
-                    testSsid);
-            setConnectivity(0, ConnectivityManager.TYPE_WIFI, true);
-            verifyLastQsWifiIcon(true, true, WifiIcons.QS_WIFI_SIGNAL_STRENGTH[0][testLevel],
-                    testSsid);
-        }
-    }
-
-    public void testQsDataDirection() {
-        // Setup normal connection
-        String testSsid = "Test SSID";
-        int testLevel = 2;
-        setWifiEnabled(true);
-        setWifiState(true, testSsid);
-        setWifiLevel(testLevel);
-        setConnectivity(100, ConnectivityManager.TYPE_WIFI, true);
-        verifyLastQsWifiIcon(true, true,
-                WifiIcons.QS_WIFI_SIGNAL_STRENGTH[1][testLevel], testSsid);
-
-        setWifiActivity(WifiManager.DATA_ACTIVITY_NONE);
-        verifyLastQsDataDirection(false, false);
-        setWifiActivity(WifiManager.DATA_ACTIVITY_IN);
-        verifyLastQsDataDirection(true, false);
-        setWifiActivity(WifiManager.DATA_ACTIVITY_OUT);
-        verifyLastQsDataDirection(false, true);
-        setWifiActivity(WifiManager.DATA_ACTIVITY_INOUT);
-        verifyLastQsDataDirection(true, true);
-    }
-
-    public void testRoamingIconDuringWifi() {
-        // Setup normal connection
-        String testSsid = "Test SSID";
-        int testLevel = 2;
-        setWifiEnabled(true);
-        setWifiState(true, testSsid);
-        setWifiLevel(testLevel);
-        setConnectivity(100, ConnectivityManager.TYPE_WIFI, true);
-        verifyLastWifiIcon(true, WifiIcons.WIFI_SIGNAL_STRENGTH[1][testLevel]);
-
-        setupDefaultSignal();
-        setGsmRoaming(true);
-        // Still be on wifi though.
-        setConnectivity(100, ConnectivityManager.TYPE_WIFI, true);
-        verifyLastMobileDataIndicators(true,
-                TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH_ROAMING[1][DEFAULT_LEVEL],
-                TelephonyIcons.ROAMING_ICON);
-    }
-
-    protected void setWifiActivity(int activity) {
-        // TODO: Not this, because this variable probably isn't sticking around.
-        mNetworkController.mWifiSignalController.setActivity(activity);
-    }
-
-    protected void setWifiLevel(int level) {
-        float amountPerLevel = (MAX_RSSI - MIN_RSSI) / (WifiIcons.WIFI_LEVEL_COUNT - 1);
-        int rssi = (int)(MIN_RSSI + level * amountPerLevel);
-        // Put RSSI in the middle of the range.
-        rssi += amountPerLevel / 2;
-        Intent i = new Intent(WifiManager.RSSI_CHANGED_ACTION);
-        i.putExtra(WifiManager.EXTRA_NEW_RSSI, rssi);
-        mNetworkController.onReceive(mContext, i);
-    }
-
-    protected void setWifiEnabled(boolean enabled) {
-        Intent i = new Intent(WifiManager.WIFI_STATE_CHANGED_ACTION);
-        i.putExtra(WifiManager.EXTRA_WIFI_STATE,
-                enabled ? WifiManager.WIFI_STATE_ENABLED : WifiManager.WIFI_STATE_DISABLED);
-        mNetworkController.onReceive(mContext, i);
-    }
-
-    protected void setWifiState(boolean connected, String ssid) {
-        Intent i = new Intent(WifiManager.NETWORK_STATE_CHANGED_ACTION);
-        NetworkInfo networkInfo = Mockito.mock(NetworkInfo.class);
-        Mockito.when(networkInfo.isConnected()).thenReturn(connected);
-
-        WifiInfo wifiInfo = Mockito.mock(WifiInfo.class);
-        Mockito.when(wifiInfo.getSSID()).thenReturn(ssid);
-
-        i.putExtra(WifiManager.EXTRA_NETWORK_INFO, networkInfo);
-        i.putExtra(WifiManager.EXTRA_WIFI_INFO, wifiInfo);
-        mNetworkController.onReceive(mContext, i);
-    }
-
-    protected void verifyLastQsDataDirection(boolean in, boolean out) {
-        ArgumentCaptor<Boolean> inArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Boolean> outArg = ArgumentCaptor.forClass(Boolean.class);
-
-        Mockito.verify(mNetworkSignalChangedCallback, Mockito.atLeastOnce()).onWifiSignalChanged(
-                ArgumentCaptor.forClass(Boolean.class).capture(),
-                ArgumentCaptor.forClass(Boolean.class).capture(),
-                ArgumentCaptor.forClass(Integer.class).capture(),
-                inArg.capture(), outArg.capture(),
-                ArgumentCaptor.forClass(String.class).capture(),
-                ArgumentCaptor.forClass(String.class).capture());
-        assertEquals("WiFi data in, in quick settings", in, (boolean) inArg.getValue());
-        assertEquals("WiFi data out, in quick settings", out, (boolean) outArg.getValue());
-    }
-
-    protected void verifyLastQsWifiIcon(boolean enabled, boolean connected, int icon,
-            String description) {
-        ArgumentCaptor<Boolean> enabledArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Boolean> connectedArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Integer> iconArg = ArgumentCaptor.forClass(Integer.class);
-        ArgumentCaptor<String> descArg = ArgumentCaptor.forClass(String.class);
-
-        Mockito.verify(mNetworkSignalChangedCallback, Mockito.atLeastOnce()).onWifiSignalChanged(
-                enabledArg.capture(), connectedArg.capture(), iconArg.capture(),
-                ArgumentCaptor.forClass(Boolean.class).capture(),
-                ArgumentCaptor.forClass(Boolean.class).capture(),
-                ArgumentCaptor.forClass(String.class).capture(),
-                descArg.capture());
-        assertEquals("WiFi enabled, in quick settings", enabled, (boolean) enabledArg.getValue());
-        assertEquals("WiFi connected, in quick settings", connected,
-                (boolean) connectedArg.getValue());
-        assertEquals("WiFi signal, in quick settings", icon, (int) iconArg.getValue());
-        assertEquals("WiFI desc (ssid), in quick settings", description,
-                (String) descArg.getValue());
-    }
-
-    protected void verifyLastWifiIcon(boolean visible, int icon) {
-        ArgumentCaptor<Boolean> visibleArg = ArgumentCaptor.forClass(Boolean.class);
-        ArgumentCaptor<Integer> iconArg = ArgumentCaptor.forClass(Integer.class);
-
-        Mockito.verify(mSignalCluster, Mockito.atLeastOnce()).setWifiIndicators(
-                visibleArg.capture(), iconArg.capture(),
-                ArgumentCaptor.forClass(String.class).capture());
-        assertEquals("WiFi visible, in status bar", visible, (boolean) visibleArg.getValue());
-        assertEquals("WiFi signal, in status bar", icon, (int) iconArg.getValue());
-    }
-}
-- 
1.9.1

