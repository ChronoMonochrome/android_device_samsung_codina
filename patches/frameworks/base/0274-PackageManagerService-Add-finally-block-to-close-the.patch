From 23283ecaa71d32ec769cc4490ef5c2e3ad3ebebc Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 274/296] PackageManagerService: Add finally block to close the
 stream pm: Fixes can not boot issue Sometime the bad file foramt will cause
 the device can not be boot, so we need to delete the bad file and throw an
 exception to try reboot.

---
 .../core/java/com/android/server/pm/Settings.java  | 53 ++++++----------------
 1 file changed, 14 insertions(+), 39 deletions(-)

diff --git a/services/core/java/com/android/server/pm/Settings.java b/services/core/java/com/android/server/pm/Settings.java
index 93c666ac7f6..cf2468b7f5b 100644
--- a/services/core/java/com/android/server/pm/Settings.java
+++ b/services/core/java/com/android/server/pm/Settings.java
@@ -1831,22 +1831,16 @@ final class Settings {
                 }
             }
 
-            str.close();
-
             mNextAppLinkGeneration.put(userId, maxAppLinkGeneration + 1);
 
-        } catch (XmlPullParserException e) {
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR,
-                    "Error reading stopped packages: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
-                    e);
-
-        } catch (java.io.IOException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
+                    "Error reading package restrictions: " + e);
+            Slog.wtf(PackageManagerService.TAG, "Error reading package manager package restrictions",
                     e);
+        } finally {
+            IoUtils.closeQuietly(str);
         }
     }
 
@@ -2198,7 +2192,6 @@ final class Settings {
                     "Unable to write package manager user packages state, "
                     + " current changes will be lost at reboot", e);
         }
-
         // Clean up partially written files
         if (userPackagesStateFile.exists()) {
             if (!userPackagesStateFile.delete()) {
@@ -2430,22 +2423,14 @@ final class Settings {
                     XmlUtils.skipCurrentTag(parser);
                 }
             }
-
-            str.close();
-
-        } catch (XmlPullParserException e) {
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR,
                     "Error reading stopped packages: " + e);
             Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
                     e);
-
-        } catch (java.io.IOException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
-                    e);
-
+        } finally {
+            IoUtils.closeQuietly(str);
         }
     }
 
@@ -2603,13 +2588,11 @@ final class Settings {
             writeAllRuntimePermissionsLPr();
             return;
 
-        } catch(XmlPullParserException e) {
-            Slog.wtf(PackageManagerService.TAG, "Unable to write package manager settings, "
-                    + "current changes will be lost at reboot", e);
-        } catch(java.io.IOException e) {
+        } catch(XmlPullParserException | java.io.IOException e) {
             Slog.wtf(PackageManagerService.TAG, "Unable to write package manager settings, "
                     + "current changes will be lost at reboot", e);
         }
+
         // Clean up partially written files
         if (mSettingsFilename.exists()) {
             if (!mSettingsFilename.delete()) {
@@ -3183,18 +3166,12 @@ final class Settings {
                     XmlUtils.skipCurrentTag(parser);
                 }
             }
-
-            str.close();
-
-        } catch (XmlPullParserException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager settings", e);
-
-        } catch (java.io.IOException e) {
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
             Slog.wtf(PackageManagerService.TAG, "Error reading package manager settings", e);
+        } finally {
+            IoUtils.closeQuietly(str);
         }
 
         // If the build is setup to drop runtime permissions
@@ -3331,9 +3308,7 @@ final class Settings {
                     continue;
                 }
                 readDefaultPreferredActivitiesLPw(service, parser, userId);
-            } catch (XmlPullParserException e) {
-                Slog.w(TAG, "Error reading apps file " + f, e);
-            } catch (IOException e) {
+            } catch (XmlPullParserException | IOException e) {
                 Slog.w(TAG, "Error reading apps file " + f, e);
             } finally {
                 if (str != null) {
-- 
2.11.0

