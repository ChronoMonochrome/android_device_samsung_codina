From 9685226eac26408ac393881da8219b5440b4da8a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 25 Jan 2016 01:43:17 +0700
Subject: [PATCH 36/64] Revert "Navbar: configurable IME layout"

This reverts commit 4d2d515ac16d17b822226e475b34f78f8ce518fa.

Change-Id: Ieecb2d228ec7dbc155ba35ab3f980e6ffffe9e57
---
 core/java/android/app/StatusBarManager.java        |   2 +-
 core/java/android/provider/Settings.java           |   6 -
 .../internal/util/aokp/AwesomeConstants.java       |  14 +--
 core/res/res/values/vanir_strings.xml              |   3 -
 core/res/res/values/vanir_symbols.xml              |   2 -
 .../android/systemui/statusbar/BaseStatusBar.java  |   2 +-
 .../android/systemui/statusbar/CommandQueue.java   |   1 -
 .../statusbar/phone/NavigationBarView.java         | 130 +++++++++------------
 .../systemui/statusbar/phone/PhoneStatusBar.java   |  18 +--
 9 files changed, 71 insertions(+), 107 deletions(-)

diff --git a/core/java/android/app/StatusBarManager.java b/core/java/android/app/StatusBarManager.java
index a6c1ca2..2045ed8 100644
--- a/core/java/android/app/StatusBarManager.java
+++ b/core/java/android/app/StatusBarManager.java
@@ -101,7 +101,7 @@ public class StatusBarManager {
             throw new RuntimeException(ex);
         }
     }
-
+    
     /**
      * Expand the notifications panel.
      */
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 410a4ad..03e5127 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3336,12 +3336,6 @@ public final class Settings {
         public static final String NAVIGATION_BAR_ARROWS = "navigation_bar_arrows";
 
         /**
-         * Button layout for IME arrows
-         * @hide
-         */
-        public static final String NAVIGATION_IME_LAYOUT = "navigation_ime_layout";
-
-        /**
          * Whether or not to enable the navring
          * @hide
          */
diff --git a/core/java/com/android/internal/util/aokp/AwesomeConstants.java b/core/java/com/android/internal/util/aokp/AwesomeConstants.java
index 67b27d7..c565eb5 100644
--- a/core/java/com/android/internal/util/aokp/AwesomeConstants.java
+++ b/core/java/com/android/internal/util/aokp/AwesomeConstants.java
@@ -25,6 +25,10 @@ import android.text.TextUtils;
 public class AwesomeConstants {
 
     public static final String ASSIST_ICON_METADATA_NAME = "com.android.systemui.action_assist_icon";
+    public static final String PHONE_IME_LAYOUT =
+            "**back**,,,|**ime**,,,|**arrow_left**,,,|**arrow_up**,,,|**arrow_down**,,,|**arrow_right**,,,";
+    public static final String TABLET_IME_LAYOUT =
+            "**back**,,,|**ime**,,,|**blank**,,,|**arrow_left**,,,|**arrow_up**,,,|**arrow_down**,,,|**arrow_right**,,,";
 
     public final static int SWIPE_LEFT = 0;
     public final static int SWIPE_RIGHT = 1;
@@ -296,13 +300,7 @@ public class AwesomeConstants {
         return value;
     }
 
-    public static String defaultNavbarLayout(Context context) {
-        Resources res = context.getResources();
-        return res.getString(com.android.internal.R.string.def_navbar_layout);
-    }
-
-    public static String defaultIMEKeyLayout(Context context) {
-        Resources res = context.getResources();
-        return res.getString(com.android.internal.R.string.def_ime_layout);
+    public static String imeKeyLayout(boolean isTablet) {
+        return isTablet ? TABLET_IME_LAYOUT : PHONE_IME_LAYOUT;
     }
 }
diff --git a/core/res/res/values/vanir_strings.xml b/core/res/res/values/vanir_strings.xml
index f4e5b7f..62aeb25 100644
--- a/core/res/res/values/vanir_strings.xml
+++ b/core/res/res/values/vanir_strings.xml
@@ -74,9 +74,6 @@
     <string name="action_arrow_down">Cursor down</string>
     <string name="gesture_actions">Gesture panel</string>
 
-    <string name="def_ime_layout">**back**,,,|**ime**,,,|**arrow_left**,,,|**arrow_up**,,,|**arrow_down**,,,|**arrow_right**,,,</string>
-    <string name="def_navbar_layout">**back**,,,|**home**,,,|**recents**,,,</string>
-
     <!-- Title of an application permission that lets an application view/edit revoked permissions. -->
     <string name="permlab_revokePermissions">Allows view and edit of revoked permissions. Not for use by normal applications.</string>
     <!-- Description of an application permission that lets lets an application view/edit revoked permissions. -->
diff --git a/core/res/res/values/vanir_symbols.xml b/core/res/res/values/vanir_symbols.xml
index 6fe7fd8..6d55a00 100644
--- a/core/res/res/values/vanir_symbols.xml
+++ b/core/res/res/values/vanir_symbols.xml
@@ -138,8 +138,6 @@
   <java-symbol type="string" name="action_arrow_up" />
   <java-symbol type="string" name="action_arrow_down" />
   <java-symbol type="string" name="app_killed_message"/>
-  <java-symbol type="string" name="def_ime_layout" />
-  <java-symbol type="string" name="def_navbar_layout" />
   <java-symbol type="string" name="gesture_actions" />
 
   <!-- On-The-Go -->
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 7b8ca6a..a1cbca4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -977,7 +977,7 @@ public abstract class BaseStatusBar extends SystemUI implements
     }
 
     @Override
-    public void setButtonDrawable(int buttonId, int iconId) { }
+    public void setButtonDrawable(int buttonId, int iconId) {}
 
     protected abstract WindowManager.LayoutParams getSearchLayoutParams(
             LayoutParams layoutParams);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
index 4bc49e1..a00919a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
@@ -56,7 +56,6 @@ public class CommandQueue extends IStatusBar.Stub {
     private static final int MSG_PRELOAD_RECENT_APPS        = 14 << MSG_SHIFT;
     private static final int MSG_CANCEL_PRELOAD_RECENT_APPS = 15 << MSG_SHIFT;
     private static final int MSG_SET_WINDOW_STATE           = 16 << MSG_SHIFT;
-    private static final int MSG_CHANGE_BUTTON_LAYOUT       = 17 << MSG_SHIFT;
 
     public static final int FLAG_EXCLUDE_NONE = 0;
     public static final int FLAG_EXCLUDE_SEARCH_PANEL = 1 << 0;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 9646e2e..c4c0724 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -94,7 +94,6 @@ public class NavigationBarView extends LinearLayout {
     final boolean mTablet = isTablet(mContext);
 
     private ArrayList<AwesomeButtonInfo> mNavButtons = new ArrayList<AwesomeButtonInfo>();
-    private ArrayList<AwesomeButtonInfo> mIMEKeyArray = new ArrayList<AwesomeButtonInfo>();
 
     private ContentObserver mSettingsObserver;
     private ContentObserver mDisablePrefsObserver;
@@ -112,7 +111,6 @@ public class NavigationBarView extends LinearLayout {
     private String mPrimaryButtons;
     private boolean mSideKeys;
     private boolean mArrows;
-    private String mIMEKeyLayout;
     boolean showingIME;
 
     // workaround for LayoutTransitions leaving the nav buttons in a weird state (bug 5549288)
@@ -259,16 +257,10 @@ public class NavigationBarView extends LinearLayout {
         mBarTransitions = new NavigationBarTransitions(this);
         mBarTransitions.updateResources(res);
 
+
+        mPrimaryButtons = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS);
         mSideKeys = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
         mArrows = Settings.System.getInt(cr, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
-        mPrimaryButtons = Settings.System.getString(cr, Settings.System.NAVIGATION_BAR_BUTTONS);
-        if (mPrimaryButtons == null || mPrimaryButtons.isEmpty()) {
-            mPrimaryButtons = AwesomeConstants.defaultNavbarLayout(mContext);
-        }
-        mIMEKeyLayout = Settings.System.getString(cr, Settings.System.NAVIGATION_IME_LAYOUT);
-        if (mIMEKeyLayout == null || mIMEKeyLayout.isEmpty()) {
-            mIMEKeyLayout = AwesomeConstants.defaultIMEKeyLayout(mContext);
-        }
 
         mCameraDisabledByDpm = isCameraDisabledByDpm();
         watchForDevicePolicyChanges();
@@ -484,6 +476,8 @@ public class NavigationBarView extends LinearLayout {
 
         mDisabledFlags = disabledFlags;
 
+        if (mNavButtons.isEmpty()) return; // no buttons yet!
+
         final boolean disableHome = ((disabledFlags & View.STATUS_BAR_DISABLE_HOME) != 0);
         final boolean disableRecent = ((disabledFlags & View.STATUS_BAR_DISABLE_RECENT) != 0);
         final boolean disableBack = ((disabledFlags & View.STATUS_BAR_DISABLE_BACK) != 0)
@@ -511,8 +505,6 @@ public class NavigationBarView extends LinearLayout {
             }
         }
 
-        if (getCurrentButtonArray().isEmpty()) return; // no buttons yet!
-
         KeyButtonView[] allButtons = getAllButtons();
         for (KeyButtonView button : allButtons) {
 
@@ -618,7 +610,7 @@ public class NavigationBarView extends LinearLayout {
         mCurrentView = mRotatedViews[Surface.ROTATION_0];
 
         watchForAccessibilityChanges();
-        loadButtonArrays();
+        setupNavigationButtons();
         setDisabledFlags(mDisabledFlags);
     }
 
@@ -633,26 +625,17 @@ public class NavigationBarView extends LinearLayout {
                 @Override
                 public void onChange(boolean selfChange) {
                     mPrimaryButtons = Settings.System.getString(r, Settings.System.NAVIGATION_BAR_BUTTONS);
-                    if (mPrimaryButtons == null || mPrimaryButtons.isEmpty()) {
-                        mPrimaryButtons = AwesomeConstants.defaultNavbarLayout(mContext);
-                    }
-                    mIMEKeyLayout = Settings.System.getString(r, Settings.System.NAVIGATION_IME_LAYOUT);
-                    if (mIMEKeyLayout == null || mIMEKeyLayout.isEmpty()) {
-                        mIMEKeyLayout = AwesomeConstants.defaultIMEKeyLayout(mContext);
-                    }
-                    mArrows = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
                     mSideKeys = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_SIDEKEYS, 1) == 1;
-                    loadButtonArrays();
+                    mArrows = Settings.System.getInt(r, Settings.System.NAVIGATION_BAR_ARROWS, 0) == 1;
+                    setupNavigationButtons();
                 }};
 
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTONS),
-                    false, mSettingsObserver);
+                false, mSettingsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_SIDEKEYS),
-                    false, mSettingsObserver);
+                false, mSettingsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_ARROWS),
-                    false, mSettingsObserver);
-            r.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_IME_LAYOUT),
-                    false, mSettingsObserver);
+                false, mSettingsObserver);
         }
 
         if (mDisablePrefsObserver == null) {
@@ -670,13 +653,13 @@ public class NavigationBarView extends LinearLayout {
                 }};
 
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.LOCKSCREEN_NOTIFICATIONS),
-                    false, mDisablePrefsObserver);
+                false, mDisablePrefsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.ENABLE_NAVIGATION_RING),
-                    false, mDisablePrefsObserver);
+                false, mDisablePrefsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.ACTIVE_NOTIFICATIONS),
-                    false, mDisablePrefsObserver);
+                false, mDisablePrefsObserver);
             r.registerContentObserver(Settings.System.getUriFor(Settings.System.ACTIVE_NOTIFICATIONS_PRIVACY_MODE),
-                    false, mDisablePrefsObserver);
+                false, mDisablePrefsObserver);
 
             // pop goes the weasel
             mDisablePrefsObserver.onChange(true);
@@ -699,41 +682,51 @@ public class NavigationBarView extends LinearLayout {
         }
     }
 
-    private void loadButtonArrays() {
-        String[] userButtons;
-        // Primary navbar
+    private void setupNavigationButtons() {
+        String mUserButtons = mPrimaryButtons;
         mNavButtons.clear();
-        userButtons = mPrimaryButtons.split("\\|");
-        if (userButtons != null) {
-            for (String button : userButtons) {
-                String[] actions = button.split(",", 4);
-                mNavButtons.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
+
+        if (mPrimaryButtons == null || mPrimaryButtons.isEmpty()) {
+            // use default buttons
+            mNavButtons.add(new AwesomeButtonInfo(
+                    AwesomeConstant.ACTION_BACK.value(),    /* short press */
+                    null,                                   /* double press */
+                    null,                                   /* long press */
+                    null                                    /* icon */
+            ));
+            mNavButtons.add(new AwesomeButtonInfo(
+                    AwesomeConstant.ACTION_HOME.value(),           /* short press */
+                    null,                                          /* double press */
+                    null,                                          /* long press */
+                    null                                           /* icon */
+            ));
+            mNavButtons.add(new AwesomeButtonInfo(
+                    AwesomeConstant.ACTION_RECENTS.value(),        /* short press */
+                    null,                                          /* double press */
+                    null,                                          /* long press */
+                    null                                           /* icon */
+            ));
+        } else {
+            // Set up IME specific navbar
+            if (mArrows && showingIME) {
+                mUserButtons = AwesomeConstants.imeKeyLayout(mTablet);
             }
-        }
-        // IME key layout
-        mIMEKeyArray.clear();
-        userButtons = mIMEKeyLayout.split("\\|");
-        if (userButtons != null) {
-            for (String button : userButtons) {
-                String[] actions = button.split(",", 4);
-                mIMEKeyArray.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
+            /**
+             * Format:
+             *
+             * singleTapAction,doubleTapAction,longPressAction,iconUri|singleTap...
+             */
+            String[] userButtons = mUserButtons.split("\\|");
+            if (userButtons != null) {
+                for (String button : userButtons) {
+                    String[] actions = button.split(",", 4);
+                    mNavButtons.add(new AwesomeButtonInfo(actions[0], actions[1], actions[2], actions[3]));
+                }
             }
         }
-        setupNavigationButtons();
-    }
 
-    private ArrayList<AwesomeButtonInfo> getCurrentButtonArray() {
-        return (mArrows && showingIME) ? mIMEKeyArray : mNavButtons;
-    }
-
-    private void setupNavigationButtons() {
-        setupNavigationButtons(getCurrentButtonArray());
-    }
-
-    private void setupNavigationButtons(ArrayList<AwesomeButtonInfo> buttonsArray) {
-        final boolean stockThreeButtonLayout = buttonsArray.size() == 3;
-        final int separatorSize = (int) mMenuButtonWidth;
-        final int length = buttonsArray.size();
+        final boolean stockThreeButtonLayout = mNavButtons.size() == 3;
+        int separatorSize = (int) mMenuButtonWidth;
 
         for (int i = 0; i <= 1; i++) {
             boolean landscape = (i == 1);
@@ -764,9 +757,10 @@ public class NavigationBarView extends LinearLayout {
                 }
             }
 
+            int length = mNavButtons.size();
             for (int j = 0; j < length; j++) {
                 // create the button
-                AwesomeButtonInfo info = buttonsArray.get(j);
+                AwesomeButtonInfo info = mNavButtons.get(j);
                 KeyButtonView button = new KeyButtonView(mContext, null);
                 button.setButtonActions(info);
                 if (mTablet) {
@@ -874,10 +868,6 @@ public class NavigationBarView extends LinearLayout {
         return mVertical;
     }
 
-    void setIMEState(boolean showing) {
-        showingIME = showing;
-    }
-
     public void reorient() {
         final int rot = mDisplay.getRotation();
         for (int i = 0; i < 4; i++) {
@@ -890,11 +880,7 @@ public class NavigationBarView extends LinearLayout {
         mDeadZone = (DeadZone) mCurrentView.findViewById(R.id.deadzone);
 
         // force the low profile & disabled states into compliance
-        try {
-            mBarTransitions.init(mVertical);
-        } finally {
-        }
-
+        mBarTransitions.init(mVertical);
         setMenuVisibility(mShowMenu, true /* force */);
 
         if (DEBUG) {
@@ -917,7 +903,7 @@ public class NavigationBarView extends LinearLayout {
     public KeyButtonView[] getAllButtons() {
         ViewGroup view = (ViewGroup) mCurrentView.findViewById(R.id.nav_buttons);
         int N = view.getChildCount();
-        KeyButtonView[] views = new KeyButtonView[N];
+        KeyButtonView[] views = new KeyButtonView[mNavButtons.size()];
 
         int workingIdx = 0;
         for (int i = 0; i < N; i++) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index d1c23fa..54cc2c1 100755
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -192,8 +192,6 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     private boolean clearable;
     private boolean mAllowCarrierLabelUpdates = true;
 
-    private boolean showingIME;
-
     PhoneStatusBarPolicy mIconPolicy;
 
     // These are no longer handled by the policy, because we need custom strategies for them
@@ -1263,13 +1261,12 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     }
 
     private void prepareNavigationBarView() {
-        mNavigationBarView.setIMEState(showingIME);
         mNavigationBarView.reorient();
 
         if (mNavigationBarView.getRecentsButton() != null) {
             mNavigationBarView.getRecentsButton().setOnClickListener(mRecentsClickListener);
             mNavigationBarView.getRecentsButton().setOnTouchListener(mRecentsPreloadOnTouchListener);
-            if (mCustomRecent == 0) mNavigationBarView.getRecentsButton().setOnTouchListener(mRecentsPreloadOnTouchListener);
+            if(mCustomRecent == 0) mNavigationBarView.getRecentsButton().setOnTouchListener(mRecentsPreloadOnTouchListener);
         }
         if (mNavigationBarView.getHomeButton() != null) {
             mNavigationBarView.getHomeButton().setOnTouchListener(mHomeSearchActionListener);
@@ -2625,12 +2622,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         mNavigationIconHints = hints;
 
         if (mNavigationBarView != null) {
-            boolean nav = true;
-            try {
-                nav = mWindowManagerService.needsNavigationBar();
-            } catch(RemoteException re) {
-            }
-            mNavigationBarView.setNavigationIconHints(hints, !nav);
+            mNavigationBarView.setNavigationIconHints(hints);
         }
         checkBarModes();
     }
@@ -2869,12 +2861,12 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
 
     @Override
     public void setImeWindowStatus(IBinder token, int vis, int backDisposition) {
-        showingIME = (backDisposition == InputMethodService.BACK_DISPOSITION_WILL_DISMISS)
+        boolean altBack = (backDisposition == InputMethodService.BACK_DISPOSITION_WILL_DISMISS)
             || ((vis & InputMethodService.IME_VISIBLE) != 0);
 
-        setNavigationIconHints(showingIME ? (mNavigationIconHints | NAVIGATION_HINT_BACK_ALT)
+        setNavigationIconHints(
+                altBack ? (mNavigationIconHints | NAVIGATION_HINT_BACK_ALT)
                         : (mNavigationIconHints & ~NAVIGATION_HINT_BACK_ALT));
-
         if (mQS != null) mQS.setImeWindowStatus(vis > 0);
         if (vis > 0) {
             mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
-- 
2.5.0

