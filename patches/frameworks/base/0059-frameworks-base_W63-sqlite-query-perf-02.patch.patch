From 710b67bb71897b38d073268dc64e2c9b2b364834 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 26 Dec 2016 18:48:36 +0700
Subject: [PATCH 59/81] frameworks-base_W63-sqlite-query-perf-02.patch

Change-Id: I71deadfd62043c8f6d0013bcc71393db122b7af2
---
 core/java/android/database/AbstractCursor.java     |  90 +++++++++++++----
 .../android/database/sqlite/SQLiteConnection.java  |  41 +++++---
 .../java/android/database/sqlite/SQLiteCursor.java | 108 ++++++++++++++++++---
 core/java/android/database/sqlite/SQLiteQuery.java |  15 +--
 .../android/database/sqlite/SQLiteSession.java     |  12 +--
 core/jni/android_database_SQLiteConnection.cpp     |  85 +++++++++-------
 6 files changed, 260 insertions(+), 91 deletions(-)

diff --git a/core/java/android/database/AbstractCursor.java b/core/java/android/database/AbstractCursor.java
index 581fe7f..1081df5 100644
--- a/core/java/android/database/AbstractCursor.java
+++ b/core/java/android/database/AbstractCursor.java
@@ -215,32 +215,76 @@ public abstract class AbstractCursor implements CrossProcessCursor {
 
     @Override
     public final boolean moveToPosition(int position) {
+        final int moved = onMoveWithBoundsCheck(position);
+        switch (moved) {
+            case MOVE_OK:
+                mPos = position;
+                return true;
+            case MOVE_AFTER_LAST:
+                mPos = getCount();
+                return false;
+            case MOVE_BEFORE_FIRST:
+                mPos = -1;
+                return false;
+            case MOVE_NOP:
+                return true;
+            case MOVE_FAILED:
+                mPos = -1;
+                return false;
+            default:
+                throw new IllegalStateException("Illegal onMoveWithBoundsCheck return: " + moved);
+        }
+    }
+
+    /** @hide */
+    protected static final int MOVE_OK           = 0;
+    /** @hide */
+    protected static final int MOVE_AFTER_LAST   = 1;
+    /** @hide */
+    protected static final int MOVE_BEFORE_FIRST = 2;
+    /** @hide */
+    protected static final int MOVE_NOP          = 3;
+    /** @hide */
+    protected static final int MOVE_FAILED       = 4;
+
+    /**
+     * Subclasses may override this instead of onMove() to do their own bounds checking. This could
+     * be useful in the case where checking bounds can be more efficiently done another way. This is
+     * the method that calls onMove(), so overriding implementations should also do that, for the
+     * sake of potential subclasses.
+     *
+     * @param position the position we're trying to move to
+     * @return In order of precedence (highest first):
+     *         MOVE_AFTER_LAST if the new position is equal to count,
+     *         MOVE_BEFORE_FIRST if the new position is -1,
+     *         MOVE_NOP if the new position was equal to the old position,
+     *         MOVE_FAILED if the move failed (equivalent to onMove() returning false)
+     *         MOVE_OK if the move suceeded
+     *
+     * @hide
+     */
+    protected int onMoveWithBoundsCheck(int position) {
         // Make sure position isn't past the end of the cursor
-        final int count = getCount();
-        if (position >= count) {
-            mPos = count;
-            return false;
+        if (isAfterLast(position)) {
+            return MOVE_AFTER_LAST;
         }
 
         // Make sure position isn't before the beginning of the cursor
         if (position < 0) {
-            mPos = -1;
-            return false;
+            return MOVE_BEFORE_FIRST;
         }
 
         // Check for no-op moves, and skip the rest of the work for them
         if (position == mPos) {
-            return true;
+            return MOVE_NOP;
         }
 
         boolean result = onMove(mPos, position);
         if (result == false) {
-            mPos = -1;
-        } else {
-            mPos = position;
+            return MOVE_FAILED;
         }
 
-        return result;
+        return MOVE_OK;
     }
 
     @Override
@@ -275,18 +319,17 @@ public abstract class AbstractCursor implements CrossProcessCursor {
 
     @Override
     public final boolean isFirst() {
-        return mPos == 0 && getCount() != 0;
+        return mPos == 0 && !isAfterLast(0);
     }
 
     @Override
     public final boolean isLast() {
-        int cnt = getCount();
-        return mPos == (cnt - 1) && cnt != 0;
+        return !isAfterLast(mPos) && isAfterLast(mPos+1);
     }
 
     @Override
     public final boolean isBeforeFirst() {
-        if (getCount() == 0) {
+        if (isAfterLast(0)) {
             return true;
         }
         return mPos == -1;
@@ -294,10 +337,17 @@ public abstract class AbstractCursor implements CrossProcessCursor {
 
     @Override
     public final boolean isAfterLast() {
-        if (getCount() == 0) {
-            return true;
-        }
-        return mPos == getCount();
+        return isAfterLast(Math.max(0, mPos));
+    }
+
+    /**
+     * The default implementation uses getCount(). If subclasses would prefer deferring the full
+     * counting of their result set for performance reasons, they should override this method.
+     * This would eliminate <i>most</i> of AbstractCursor's getCount() calls.
+     * @hide
+     */
+    protected boolean isAfterLast(int position) {
+        return position >= getCount();
     }
 
     @Override
@@ -456,7 +506,7 @@ public abstract class AbstractCursor implements CrossProcessCursor {
      * @throws CursorIndexOutOfBoundsException
      */
     protected void checkPosition() {
-        if (-1 == mPos || getCount() == mPos) {
+        if (-1 == mPos || isAfterLast(mPos)) {
             throw new CursorIndexOutOfBoundsException(mPos, getCount());
         }
     }
diff --git a/core/java/android/database/sqlite/SQLiteConnection.java b/core/java/android/database/sqlite/SQLiteConnection.java
index 24d6d65..41b767d 100644
--- a/core/java/android/database/sqlite/SQLiteConnection.java
+++ b/core/java/android/database/sqlite/SQLiteConnection.java
@@ -30,6 +30,7 @@ import android.os.SystemClock;
 import android.os.Trace;
 import android.util.Log;
 import android.util.LruCache;
+import android.util.MutableBoolean;
 import android.util.Printer;
 
 import java.text.SimpleDateFormat;
@@ -156,7 +157,7 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
             long connectionPtr, long statementPtr);
     private static native long nativeExecuteForCursorWindow(
             long connectionPtr, long statementPtr, long windowPtr,
-            int startPos, int requiredPos, boolean countAllRows);
+            int startPos, int requiredPos, boolean countAllRows, MutableBoolean exhausted);
     private static native int nativeGetDbLookaside(long connectionPtr);
     private static native void nativeCancel(long connectionPtr);
     private static native void nativeResetCancel(long connectionPtr, boolean cancelable);
@@ -867,6 +868,7 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
      * so that it does.  Must be greater than or equal to <code>startPos</code>.
      * @param countAllRows True to count all rows that the query would return
      * regagless of whether they fit in the window.
+     * @param exhausted will be set to true if the full result set was consumed - never set to false
      * @param cancellationSignal A signal to cancel the operation in progress, or null if none.
      * @param cont Continuation cookie: lets us keep statements alive; may speed up future fills.
      * @return the number of rows that have been seen in this query so far. Might not be all rows
@@ -878,15 +880,16 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
      */
     public int executeForCursorWindow(String sql, Object[] bindArgs,
             CursorWindow window, int startPos, int requiredPos, boolean countAllRows,
-            CancellationSignal cancellationSignal, SQLiteContinuation cont) {
+            MutableBoolean exhausted, CancellationSignal cancellationSignal,
+            SQLiteContinuation cont) {
         if (sql == null) {
             throw new IllegalArgumentException("sql must not be null.");
         }
-        if (window == null) {
-            throw new IllegalArgumentException("window must not be null.");
+        if (exhausted == null) {
+            throw new IllegalArgumentException("exhausted must not be null.");
         }
 
-        window.acquireReference();
+        if (window != null) window.acquireReference();
         try {
             int actualPos = -1;
             int countedRows = -1;
@@ -895,7 +898,13 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
             final int cookie = mRecentOperations.beginOperation("executeForCursorWindow",
                     sql, bindArgs);
             try {
-                final PreparedStatement statement = acquirePreparedStatement(sql, requiredPos, cont);
+                final PreparedStatement statement;
+                if (window == null) {
+                    // don't care if the statement has already been stepped, just want the count
+                    statement = acquirePreparedStatement(sql, Integer.MAX_VALUE, cont);
+                } else {
+                    statement = acquirePreparedStatement(sql, requiredPos, cont);
+                }
                 boolean shouldReset = countAllRows; // might as well, if we're consuming everything
                 try {
                     throwIfStatementForbidden(statement);
@@ -913,15 +922,18 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
                         // For a continuation, we may be past startPos. Don't worry, it'll be fine.
                         final int skip = Math.max(0, startPos - statementPos);
                         final int req = requiredPos - statementPos;
+                        final long winPtr = window == null ? 0 : window.mWindowPtr;
                         final long result = nativeExecuteForCursorWindow(
-                                mConnectionPtr, statement.mStatementPtr, window.mWindowPtr,
-                                skip, req, countAllRows);
+                                mConnectionPtr, statement.mStatementPtr, winPtr,
+                                skip, req, countAllRows, exhausted);
                         actualPos = statementPos + (int)(result >> 32);
                         countedRows = (int)result;
-                        filledRows = window.getNumRows();
-                        window.setStartPosition(actualPos);
-                        if (filledRows == countedRows) {
-                            // everything fit in the window; we've exhausted the result set
+                        if (window != null) {
+                            filledRows = window.getNumRows();
+                            window.setStartPosition(actualPos);
+                        }
+                        if (exhausted.value) {
+                            // we've exhausted the result set, no use keeping the query state around
                             shouldReset = true;
                         }
                         seenRows = statementPos + countedRows;
@@ -949,7 +961,7 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
                 }
             }
         } finally {
-            window.releaseReference();
+            if (window != null) window.releaseReference();
         }
     }
 
@@ -1291,8 +1303,9 @@ public final class SQLiteConnection implements CancellationSignal.OnCancelListen
         // We ignore the first row in the database list because it corresponds to
         // the main database which we have already described.
         CursorWindow window = new CursorWindow("collectDbStats");
+        MutableBoolean exh = new MutableBoolean(false);
         try {
-            executeForCursorWindow("PRAGMA database_list;", null, window, 0, 0, false, null, null);
+            executeForCursorWindow("PRAGMA database_list;", null, window, 0, 0, false, exh, null, null);
             for (int i = 1; i < window.getNumRows(); i++) {
                 String name = window.getString(i, 1);
                 String path = window.getString(i, 2);
diff --git a/core/java/android/database/sqlite/SQLiteCursor.java b/core/java/android/database/sqlite/SQLiteCursor.java
index 0818485..73c4519 100644
--- a/core/java/android/database/sqlite/SQLiteCursor.java
+++ b/core/java/android/database/sqlite/SQLiteCursor.java
@@ -21,6 +21,7 @@ import android.database.CursorWindow;
 import android.database.DatabaseUtils;
 import android.os.StrictMode;
 import android.util.Log;
+import android.util.MutableBoolean;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -51,6 +52,16 @@ public class SQLiteCursor extends AbstractWindowedCursor {
     /** The number of rows in the cursor */
     private int mCount = NO_COUNT;
 
+    /** The number of rows we've found so far. Invariants:
+     *  1. mFound >= 0
+     *  2. mFound will decrease only when requery() is called
+     *  3. mFound == mCount iff mCount != NO_COUNT
+     */
+    private int mFound = 0;
+
+    /* Cached here for use in method implementations - don't use this to store "permanent" info. */
+    private final MutableBoolean mTmpBoolean = new MutableBoolean(false);
+
     /** The number of rows that can fit in the cursor window, 0 if unknown */
     private int mCursorWindowCapacity;
 
@@ -115,41 +126,114 @@ public class SQLiteCursor extends AbstractWindowedCursor {
         return mQuery.getDatabase();
     }
 
-    @Override
     public boolean onMove(int oldPosition, int newPosition) {
         // Make sure the row at newPosition is present in the window
         if (mWindow == null || newPosition < mWindow.getStartPosition() ||
                 newPosition >= (mWindow.getStartPosition() + mWindow.getNumRows())) {
-            fillWindow(newPosition);
+            throw new IllegalStateException("newPosition should be in the window at this point");
         }
 
         return true;
     }
 
+    /** @hide */
+    @Override
+    protected int onMoveWithBoundsCheck(int position) {
+        if (mCount != NO_COUNT && position >= mCount) {
+            return MOVE_AFTER_LAST;
+        } else if (position >= mFound) {
+            // okay, there are more rows to find -- maybe enough to reach our new position?
+            fillWindow(position, false);
+            if (position >= mFound) {
+                return MOVE_AFTER_LAST; // we tried.
+            }
+        } else if (position < 0) {
+            return MOVE_BEFORE_FIRST;
+        } else if (position == mPos) {
+            return MOVE_NOP;
+        } else {
+            fillWindow(position, false);
+        }
+
+        if (!onMove(mPos, position)) {
+            return MOVE_FAILED;
+        }
+        return MOVE_OK;
+    }
+
     @Override
     public int getCount() {
         if (mCount == NO_COUNT) {
-            fillWindow(0);
+            // might as well get some data if we don't already have some
+            if (mWindow == null) {
+                fillWindow(0, true);
+            } else {
+                traverseQuery(0, 0, null, true);
+            }
         }
+        assert mCount != NO_COUNT;
         return mCount;
     }
 
-    private void fillWindow(int requiredPos) {
-        clearOrCreateWindow(getDatabase().getPath());
+    /** @hide */
+    @Override
+    protected boolean isAfterLast(int position) {
+        if (position < mFound) {
+            return false; // we've found enough rows to say this wasn't the end
+        } else if (mCount != NO_COUNT) {
+            return true; // position was not in what we've counted, and we've counted everything
+        }
+
+        // might as well get some data if we don't already have some
+        if (mWindow == null) {
+            fillWindow(position, false);
+        } else {
+            traverseQuery(0, position, null, false);
+        }
+        assert mCount == 0 || mFound > 0;
+        return position >= mFound;
+    }
+
 
+    private void fillWindow(int requiredPos, boolean countAll) {
         requiredPos = Math.max(0, requiredPos);
+        final int startPos;
+        if (mWindow == null) {
+            startPos = 0;
+        } else {
+            final int winStart = mWindow.getStartPosition();
+            final int winEnd = winStart + mWindow.getNumRows();
+            if (requiredPos >= winStart && requiredPos < winEnd) {
+                return; // we already have what we need.
+            }
+            startPos = DatabaseUtils.cursorPickFillWindowStartPosition(
+                    requiredPos, mCursorWindowCapacity);
+        }
+
+        clearOrCreateWindow(getDatabase().getPath());
+        traverseQuery(startPos, requiredPos, mWindow, countAll);
+    }
+
+    private void traverseQuery(int requiredPos) {
+        traverseQuery(requiredPos, requiredPos, null, false); // need no data - start=required.
+    }
+
+    private void traverseQuery(int startPos, int requiredPos, CursorWindow w, boolean countAll) {
         try {
-            if (mCount == NO_COUNT) {
-                int startPos = DatabaseUtils.cursorPickFillWindowStartPosition(requiredPos, 0);
-                mCount = mQuery.fillWindow(mWindow, startPos, requiredPos, true);
-                mCursorWindowCapacity = mWindow.getNumRows();
+            MutableBoolean exhausted = mTmpBoolean;
+            exhausted.value = false;
+            final int found = mQuery.traverse(w, startPos, requiredPos, countAll, exhausted);
+            if (w != null && mCursorWindowCapacity == 0) {
+                mCursorWindowCapacity = w.getNumRows();
                 if (Log.isLoggable(TAG, Log.DEBUG)) {
                     Log.d(TAG, "received count(*) from native_fill_window: " + mCount);
                 }
+            }
+            if (exhausted.value) {
+                // we exhausted the whole result set, so we know the count.
+                mCount = mFound = found;
             } else {
-                int startPos = DatabaseUtils.cursorPickFillWindowStartPosition(requiredPos,
-                        mCursorWindowCapacity);
-                mQuery.fillWindow(mWindow, startPos, requiredPos, false);
+                mFound = Math.max(mFound, found);
             }
         } catch (RuntimeException ex) {
             // Close the cursor window if the query failed and therefore will
diff --git a/core/java/android/database/sqlite/SQLiteQuery.java b/core/java/android/database/sqlite/SQLiteQuery.java
index 9903a96..c5a099a4 100644
--- a/core/java/android/database/sqlite/SQLiteQuery.java
+++ b/core/java/android/database/sqlite/SQLiteQuery.java
@@ -21,6 +21,7 @@ import android.database.sqlite.SQLiteConnection.SQLiteContinuation;
 import android.os.CancellationSignal;
 import android.os.OperationCanceledException;
 import android.util.Log;
+import android.util.MutableBoolean;
 
 /**
  * Represents a query that reads the resulting rows into a {@link SQLiteQuery}.
@@ -50,20 +51,22 @@ public final class SQLiteQuery extends SQLiteProgram {
      * If it won't fit, then the query should discard part of what it filled.
      * @param countAllRows True to count all rows that the query would
      * return regardless of whether they fit in the window.
-     * @return Number of rows that were enumerated.  Might not be all rows
-     * unless countAllRows is true.
+     * @param exhausted will be set to true if the full result set was consumed - never set to false
+     * @return Number of rows that have been consumed from this result set so far. Might not be all
+     * rows unless countAllRows is true.
      *
      * @throws SQLiteException if an error occurs.
      * @throws OperationCanceledException if the operation was canceled.
      */
-    int fillWindow(CursorWindow window, int startPos, int requiredPos, boolean countAllRows) {
+    int traverse(CursorWindow window, int startPos, int requiredPos,
+                 boolean countAllRows, MutableBoolean exhausted) {
         acquireReference();
         try {
-            window.acquireReference();
+            if (window != null) window.acquireReference();
             try {
                 int nfound = getSession().executeForCursorWindow(getSql(), getBindArgs(),
                         window, startPos, requiredPos, countAllRows, getConnectionFlags(),
-                        mCancellationSignal, mContinuation);
+                        exhausted, mCancellationSignal, mContinuation);
                 return nfound;
             } catch (SQLiteDatabaseCorruptException ex) {
                 onCorruption();
@@ -72,7 +75,7 @@ public final class SQLiteQuery extends SQLiteProgram {
                 Log.e(TAG, "exception: " + ex.getMessage() + "; query: " + getSql());
                 throw ex;
             } finally {
-                window.releaseReference();
+                if (window != null) window.releaseReference();
             }
         } finally {
             releaseReference();
diff --git a/core/java/android/database/sqlite/SQLiteSession.java b/core/java/android/database/sqlite/SQLiteSession.java
index 14b621d..0a77563 100644
--- a/core/java/android/database/sqlite/SQLiteSession.java
+++ b/core/java/android/database/sqlite/SQLiteSession.java
@@ -23,6 +23,7 @@ import android.os.CancellationSignal;
 import android.os.OperationCanceledException;
 import android.os.ParcelFileDescriptor;
 
+import android.util.MutableBoolean;
 /**
  * Provides a single client the ability to use a database.
  *
@@ -810,6 +811,7 @@ public final class SQLiteSession {
      * @param connectionFlags The connection flags to use if a connection must be
      * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
      * @param cancellationSignal A signal to cancel the operation in progress, or null if none.
+     * @param exhausted will be set to true if the full result set was consumed - never set to false
      * @param cont Continuation cookie: lets us keep statements alive; may speed up future fills.
      * @return the number of rows that have been seen in this query so far. May not be all rows in
      *         the result set unless <code>countAllRows</code> is true.
@@ -820,16 +822,14 @@ public final class SQLiteSession {
      */
     public int executeForCursorWindow(String sql, Object[] bindArgs,
             CursorWindow window, int startPos, int requiredPos, boolean countAllRows,
-            int connectionFlags, CancellationSignal cancellationSignal, SQLiteContinuation cont) {
+            int connectionFlags, MutableBoolean exhausted, CancellationSignal cancellationSignal,
+            SQLiteContinuation cont) {
         if (sql == null) {
             throw new IllegalArgumentException("sql must not be null.");
         }
-        if (window == null) {
-            throw new IllegalArgumentException("window must not be null.");
-        }
 
         if (executeSpecial(sql, bindArgs, connectionFlags, cancellationSignal)) {
-            window.clear();
+            if (window != null) window.clear();
             return 0;
         }
 
@@ -837,7 +837,7 @@ public final class SQLiteSession {
         try {
             return mConnection.executeForCursorWindow(sql, bindArgs,
                     window, startPos, requiredPos, countAllRows,
-                    cancellationSignal, cont); // might throw
+                    exhausted, cancellationSignal, cont); // might throw
         } finally {
             releaseConnection(); // might throw
         }
diff --git a/core/jni/android_database_SQLiteConnection.cpp b/core/jni/android_database_SQLiteConnection.cpp
index a16ea01..f5fc569 100644
--- a/core/jni/android_database_SQLiteConnection.cpp
+++ b/core/jni/android_database_SQLiteConnection.cpp
@@ -68,6 +68,11 @@ static struct {
     jclass clazz;
 } gStringClassInfo;
 
+static struct {
+    jclass clazz;
+    jfieldID value;
+} gMutableBoolClassInfo;
+
 struct SQLiteConnection {
     // Open flags.
     // Must be kept in sync with the constants defined in SQLiteDatabase.java.
@@ -664,27 +669,29 @@ static CopyRowResult copyRow(JNIEnv* env, CursorWindow* window,
 
 static jlong nativeExecuteForCursorWindow(JNIEnv* env, jclass clazz,
         jlong connectionPtr, jlong statementPtr, jlong windowPtr,
-        jint startPos, jint requiredPos, jboolean countAllRows) {
+        jint startPos, jint requiredPos, jboolean countAllRows, jobject exhausted) {
     SQLiteConnection* connection = reinterpret_cast<SQLiteConnection*>(connectionPtr);
     sqlite3_stmt* statement = reinterpret_cast<sqlite3_stmt*>(statementPtr);
     CursorWindow* window = reinterpret_cast<CursorWindow*>(windowPtr);
 
-    status_t status = window->clear();
-    if (status) {
-        String8 msg;
-        msg.appendFormat("Failed to clear the cursor window, status=%d", status);
-        throw_sqlite3_exception(env, connection->db, msg.string());
-        return 0;
-    }
-
     int numColumns = sqlite3_column_count(statement);
-    status = window->setNumColumns(numColumns);
-    if (status) {
-        String8 msg;
-        msg.appendFormat("Failed to set the cursor window column count to %d, status=%d",
-                numColumns, status);
-        throw_sqlite3_exception(env, connection->db, msg.string());
-        return 0;
+    if (window) {
+        status_t status = window->clear();
+        if (status) {
+            String8 msg;
+            msg.appendFormat("Failed to clear the cursor window, status=%d", status);
+            throw_sqlite3_exception(env, connection->db, msg.string());
+            return 0;
+        }
+
+        status = window->setNumColumns(numColumns);
+        if (status) {
+            String8 msg;
+            msg.appendFormat("Failed to set the cursor window column count to %d, status=%d",
+                    numColumns, status);
+            throw_sqlite3_exception(env, connection->db, msg.string());
+            return 0;
+        }
     }
 
     int retryCount = 0;
@@ -711,27 +718,35 @@ static jlong nativeExecuteForCursorWindow(JNIEnv* env, jclass clazz,
                 continue;
             }
 
-            CopyRowResult cpr = copyRow(env, window, statement, numColumns, startPos, addedRows);
-            if (cpr == CPR_FULL && addedRows && startPos + addedRows <= requiredPos) {
-                // We filled the window before we got to the one row that we really wanted.
-                // Clear the window and start filling it again from here.
-                // TODO: Would be nicer if we could progressively replace earlier rows.
-                window->clear();
-                window->setNumColumns(numColumns);
-                startPos += addedRows;
-                addedRows = 0;
-                cpr = copyRow(env, window, statement, numColumns, startPos, addedRows);
-            }
+            if (window) {
+                CopyRowResult cpr = copyRow(env, window, statement, numColumns, startPos, addedRows);
+                if (cpr == CPR_FULL && addedRows && startPos + addedRows <= requiredPos) {
+                    // We filled the window before we got to the one row that we really wanted.
+                    // Clear the window and start filling it again from here.
+                    // TODO: Would be nicer if we could progressively replace earlier rows.
+                    window->clear();
+                    window->setNumColumns(numColumns);
+                    startPos += addedRows;
+                    addedRows = 0;
+                    cpr = copyRow(env, window, statement, numColumns, startPos, addedRows);
+                }
 
-            if (cpr == CPR_OK) {
-                addedRows += 1;
-            } else if (cpr == CPR_FULL) {
-                windowFull = true;
+                if (cpr == CPR_OK) {
+                    addedRows += 1;
+                } else if (cpr == CPR_FULL) {
+                    windowFull = true;
+                } else {
+                    gotException = true;
+                }
             } else {
-                gotException = true;
+                if (requiredPos < totalRows) {
+                    // we've counted the required number of rows; our non-existent window is "full"
+                    windowFull = true;
+                }
             }
         } else if (err == SQLITE_DONE) {
             // All rows processed, bail
+            env->SetBooleanField(exhausted, gMutableBoolClassInfo.value, JNI_TRUE);
             LOG_WINDOW("Processed all rows");
             break;
         } else if (err == SQLITE_LOCKED || err == SQLITE_BUSY) {
@@ -835,7 +850,7 @@ static const JNINativeMethod sMethods[] =
             (void*)nativeExecuteForChangedRowCount },
     { "nativeExecuteForLastInsertedRowId", "(JJ)J",
             (void*)nativeExecuteForLastInsertedRowId },
-    { "nativeExecuteForCursorWindow", "(JJJIIZ)J",
+    { "nativeExecuteForCursorWindow", "(JJJIIZLandroid/util/MutableBoolean;)J",
             (void*)nativeExecuteForCursorWindow },
     { "nativeGetDbLookaside", "(J)I",
             (void*)nativeGetDbLookaside },
@@ -857,6 +872,10 @@ int register_android_database_SQLiteConnection(JNIEnv *env)
     clazz = FindClassOrDie(env, "java/lang/String");
     gStringClassInfo.clazz = MakeGlobalRefOrDie(env, clazz);
 
+    clazz = FindClassOrDie(env, "android/util/MutableBoolean");
+    gMutableBoolClassInfo.clazz = MakeGlobalRefOrDie(env, clazz);
+    gMutableBoolClassInfo.value = GetFieldIDOrDie(env, clazz, "value", "Z");
+
     return RegisterMethodsOrDie(env, "android/database/sqlite/SQLiteConnection", sMethods,
                                 NELEM(sMethods));
 }
-- 
2.9.3

