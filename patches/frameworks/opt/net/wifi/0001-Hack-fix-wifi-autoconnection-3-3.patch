From 927c2e6b3efdb17920556c39d68f4c673f5f6d71 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 27 May 2016 15:45:45 +0700
Subject: [PATCH] Hack: fix wifi autoconnection [3/3]

Change-Id: I02b9420d8ee7639c367f13c1e448f16144d62e9d
Signed-off-by: Shilin Victor <chrono.monochrome@gmail.com>
---
 service/java/com/android/server/wifi/ScanDetailCache.java    |  2 +-
 .../java/com/android/server/wifi/WifiAutoJoinController.java |  2 +-
 service/java/com/android/server/wifi/WifiConfigStore.java    |  8 ++++----
 service/java/com/android/server/wifi/WifiController.java     |  8 ++++----
 service/java/com/android/server/wifi/WifiNative.java         |  2 +-
 .../com/android/server/wifi/WifiScanningServiceImpl.java     |  2 +-
 service/java/com/android/server/wifi/WifiServiceImpl.java    |  2 +-
 service/java/com/android/server/wifi/WifiStateMachine.java   |  4 ++--
 .../com/android/server/wifi/WifiWatchdogStateMachine.java    | 12 ++++++------
 9 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/service/java/com/android/server/wifi/ScanDetailCache.java b/service/java/com/android/server/wifi/ScanDetailCache.java
index 5030ef9..dca633f 100644
--- a/service/java/com/android/server/wifi/ScanDetailCache.java
+++ b/service/java/com/android/server/wifi/ScanDetailCache.java
@@ -153,7 +153,7 @@ class ScanDetailCache {
         WifiConfiguration.Visibility status = new WifiConfiguration.Visibility();
 
         long now_ms = System.currentTimeMillis();
-        long now_elapsed_ms = SystemClock.elapsedRealtime();
+        long now_elapsed_ms = SystemClock.elapsedRealtimeNanos1()/10000000;
         boolean isNetworkFound = false;
         String profileConfigKey = mConfig.configKey();
         for(ScanDetail scanDetail : values()) {
diff --git a/service/java/com/android/server/wifi/WifiAutoJoinController.java b/service/java/com/android/server/wifi/WifiAutoJoinController.java
index e525949..7a6c34c 100644
--- a/service/java/com/android/server/wifi/WifiAutoJoinController.java
+++ b/service/java/com/android/server/wifi/WifiAutoJoinController.java
@@ -236,7 +236,7 @@ public class WifiAutoJoinController {
                 logDbg(" addToScanCache " + result.SSID + " " + result.BSSID
                         + " tsf=" + result.timestamp
                         + " now= " + now + " uptime=" + SystemClock.uptimeMillis()
-                        + " elapsed=" + SystemClock.elapsedRealtime());
+                        + " elapsed=" + SystemClock.elapsedRealtimeNanos1()/10000000);
             }
 
             // Make sure we record the last time we saw this result
diff --git a/service/java/com/android/server/wifi/WifiConfigStore.java b/service/java/com/android/server/wifi/WifiConfigStore.java
index 05b5b2f..70be0bd 100644
--- a/service/java/com/android/server/wifi/WifiConfigStore.java
+++ b/service/java/com/android/server/wifi/WifiConfigStore.java
@@ -1979,9 +1979,9 @@ public class WifiConfigStore extends IpConfigStore {
     }
 
     private String readNetworkVariableFromSupplicantFile(String ssid, String key) {
-        long start = SystemClock.elapsedRealtimeNanos();
+        long start = SystemClock.elapsedRealtimeNanos1();
         Map<String, String> data = readNetworkVariablesFromSupplicantFile(key);
-        long end = SystemClock.elapsedRealtimeNanos();
+        long end = SystemClock.elapsedRealtimeNanos1();
 
         if (VDBG) {
             loge("readNetworkVariableFromSupplicantFile ssid=[" + ssid + "] key=" + key
@@ -3536,14 +3536,14 @@ public class WifiConfigStore extends IpConfigStore {
                 for (ScanDetail sd : scanDetailCache.values()) {
                     loge("     " + sd.getBSSIDString() + " " + sd.getSeen());
                 }
-                now_dbg = SystemClock.elapsedRealtimeNanos();
+                now_dbg = SystemClock.elapsedRealtimeNanos1();
             }
             // Trim the scan result cache to maxNumScanCacheEntries entries max
             // Since this operation is expensive, make sure it is not performed
             // until the cache has grown significantly above the trim treshold
             scanDetailCache.trim(maxNumScanCacheEntries);
             if (VVDBG) {
-                long diff = SystemClock.elapsedRealtimeNanos() - now_dbg;
+                long diff = SystemClock.elapsedRealtimeNanos1() - now_dbg;
                 loge(" Finished trimming config, time(ns) " + diff);
                 for (ScanDetail sd : scanDetailCache.values()) {
                     loge("     " + sd.getBSSIDString() + " " + sd.getSeen());
diff --git a/service/java/com/android/server/wifi/WifiController.java b/service/java/com/android/server/wifi/WifiController.java
index 18d5eca..c614b19 100644
--- a/service/java/com/android/server/wifi/WifiController.java
+++ b/service/java/com/android/server/wifi/WifiController.java
@@ -413,7 +413,7 @@ class WifiController extends StateMachine {
         public void enter() {
             mWifiStateMachine.setSupplicantRunning(false);
             // Supplicant can't restart right away, so not the time we switched off
-            mDisabledTimestamp = SystemClock.elapsedRealtime();
+            mDisabledTimestamp = SystemClock.elapsedRealtimeNanos1()/10000000;
             mDeferredEnableSerialNumber++;
             mHaveDeferredEnable = false;
             mWifiStateMachine.clearANQPCache();
@@ -472,7 +472,7 @@ class WifiController extends StateMachine {
         }
 
         private boolean doDeferEnable(Message msg) {
-            long delaySoFar = SystemClock.elapsedRealtime() - mDisabledTimestamp;
+            long delaySoFar = SystemClock.elapsedRealtimeNanos1()/10000000 - mDisabledTimestamp;
             if (delaySoFar >= mReEnableDelayMillis) {
                 return false;
             }
@@ -549,7 +549,7 @@ class WifiController extends StateMachine {
             mWifiStateMachine.setOperationalMode(WifiStateMachine.SCAN_ONLY_WITH_WIFI_OFF_MODE);
             mWifiStateMachine.setDriverStart(true);
             // Supplicant can't restart right away, so not the time we switched off
-            mDisabledTimestamp = SystemClock.elapsedRealtime();
+            mDisabledTimestamp = SystemClock.elapsedRealtimeNanos1()/10000000;
             mDeferredEnableSerialNumber++;
             mHaveDeferredEnable = false;
             mWifiStateMachine.clearANQPCache();
@@ -609,7 +609,7 @@ class WifiController extends StateMachine {
         }
 
         private boolean doDeferEnable(Message msg) {
-            long delaySoFar = SystemClock.elapsedRealtime() - mDisabledTimestamp;
+            long delaySoFar = SystemClock.elapsedRealtimeNanos1()/10000000 - mDisabledTimestamp;
             if (delaySoFar >= mReEnableDelayMillis) {
                 return false;
             }
diff --git a/service/java/com/android/server/wifi/WifiNative.java b/service/java/com/android/server/wifi/WifiNative.java
index 84c659d..a0a8e56 100644
--- a/service/java/com/android/server/wifi/WifiNative.java
+++ b/service/java/com/android/server/wifi/WifiNative.java
@@ -336,7 +336,7 @@ public class WifiNative {
 
 
     private void logDbg(String debug) {
-        long now = SystemClock.elapsedRealtimeNanos();
+        long now = SystemClock.elapsedRealtimeNanos1();
         String ts = String.format("[%,d us] ", now/1000);
         Log.e("WifiNative: ", ts+debug+ " stack:"
                 + Thread.currentThread().getStackTrace()[2].getMethodName() +" - "
diff --git a/service/java/com/android/server/wifi/WifiScanningServiceImpl.java b/service/java/com/android/server/wifi/WifiScanningServiceImpl.java
index 5084fee..5a41096 100644
--- a/service/java/com/android/server/wifi/WifiScanningServiceImpl.java
+++ b/service/java/com/android/server/wifi/WifiScanningServiceImpl.java
@@ -1205,7 +1205,7 @@ public class WifiScanningServiceImpl extends IWifiScanner.Stub {
         } else {
             if (WifiNative.startScan(s, mStateMachine)) {
                 localLog("Successfully started scan of " + s.num_buckets + " buckets at"
-                        + "time = " + SystemClock.elapsedRealtimeNanos() / 1000 + " period "
+                        + "time = " + SystemClock.elapsedRealtimeNanos1() / 1000 + " period "
                         + s.base_period_ms);
                 return true;
             } else {
diff --git a/service/java/com/android/server/wifi/WifiServiceImpl.java b/service/java/com/android/server/wifi/WifiServiceImpl.java
index 1f060a6..ba39086 100644
--- a/service/java/com/android/server/wifi/WifiServiceImpl.java
+++ b/service/java/com/android/server/wifi/WifiServiceImpl.java
@@ -799,7 +799,7 @@ public final class WifiServiceImpl extends IWifiManager.Stub {
                 }
 
                 // Convert the LinkLayerStats into EnergyActivity
-                energyInfo = new WifiActivityEnergyInfo(SystemClock.elapsedRealtime(),
+                energyInfo = new WifiActivityEnergyInfo(SystemClock.elapsedRealtimeNanos1()/10000000,
                         WifiActivityEnergyInfo.STACK_STATE_STATE_IDLE, stats.tx_time,
                         stats.rx_time, rxIdleTime, energyUsed);
             }
diff --git a/service/java/com/android/server/wifi/WifiStateMachine.java b/service/java/com/android/server/wifi/WifiStateMachine.java
index f435136..330d5ce 100644
--- a/service/java/com/android/server/wifi/WifiStateMachine.java
+++ b/service/java/com/android/server/wifi/WifiStateMachine.java
@@ -2737,7 +2737,7 @@ public class WifiStateMachine extends StateMachine implements WifiNative.WifiPno
     String printTime() {
         StringBuilder sb = new StringBuilder();
         sb.append(" rt=").append(SystemClock.uptimeMillis());
-        sb.append("/").append(SystemClock.elapsedRealtime());
+        sb.append("/").append(SystemClock.elapsedRealtimeNanos1()/10000000);
         return sb.toString();
     }
 
@@ -7651,7 +7651,7 @@ public class WifiStateMachine extends StateMachine implements WifiNative.WifiPno
                     replyToMessage(message, message.what, ok ? SUCCESS : FAILURE);
                     break;
                 case CMD_ENABLE_ALL_NETWORKS:
-                    long time = android.os.SystemClock.elapsedRealtime();
+                    long time = android.os.SystemClock.elapsedRealtimeNanos1()/10000000;
                     if (time - mLastEnableAllNetworksTime > MIN_INTERVAL_ENABLE_ALL_NETWORKS_MS) {
                         mWifiConfigStore.enableAllNetworks();
                         mLastEnableAllNetworksTime = time;
diff --git a/service/java/com/android/server/wifi/WifiWatchdogStateMachine.java b/service/java/com/android/server/wifi/WifiWatchdogStateMachine.java
index 0ef18e6..690f992 100644
--- a/service/java/com/android/server/wifi/WifiWatchdogStateMachine.java
+++ b/service/java/com/android/server/wifi/WifiWatchdogStateMachine.java
@@ -646,7 +646,7 @@ public class WifiWatchdogStateMachine extends StateMachine {
                     int rssi = info.rssi;
                     if (DBG) logd("Fetch RSSI succeed, rssi=" + rssi);
 
-                    long time = mCurrentBssid.mBssidAvoidTimeMax - SystemClock.elapsedRealtime();
+                    long time = mCurrentBssid.mBssidAvoidTimeMax - SystemClock.elapsedRealtimeNanos1()/10000000;
                     if (time <= 0) {
                         // max avoidance time is met
                         if (DBG) logd("Max avoid time elapsed");
@@ -798,7 +798,7 @@ public class WifiWatchdogStateMachine extends StateMachine {
                             + txbad + " txgood=" + txgood);
 
                     // skip the first data point as we want incremental values
-                    long now = SystemClock.elapsedRealtime();
+                    long now = SystemClock.elapsedRealtimeNanos1()/10000000;
                     if (now - mCurrentBssid.mLastTimeSample < LINK_SAMPLING_INTERVAL_MS * 2) {
 
                         // update packet loss statistics
@@ -916,13 +916,13 @@ public class WifiWatchdogStateMachine extends StateMachine {
         if (isGood) {
             mWsmChannel.sendMessage(GOOD_LINK_DETECTED);
             if (mCurrentBssid != null) {
-                mCurrentBssid.mLastTimeGood = SystemClock.elapsedRealtime();
+                mCurrentBssid.mLastTimeGood = SystemClock.elapsedRealtimeNanos1()/10000000;
             }
             if (DBG) logd("Good link notification is sent");
         } else {
             mWsmChannel.sendMessage(POOR_LINK_DETECTED);
             if (mCurrentBssid != null) {
-                mCurrentBssid.mLastTimePoor = SystemClock.elapsedRealtime();
+                mCurrentBssid.mLastTimePoor = SystemClock.elapsedRealtimeNanos1()/10000000;
             }
             logd("Poor link notification is sent");
         }
@@ -1105,7 +1105,7 @@ public class WifiWatchdogStateMachine extends StateMachine {
         public boolean poorLinkDetected(int rssi) {
             if (DBG) logd("Poor link detected, rssi=" + rssi);
 
-            long now = SystemClock.elapsedRealtime();
+            long now = SystemClock.elapsedRealtimeNanos1()/10000000;
             long lastGood = now - mLastTimeGood;
             long lastPoor = now - mLastTimePoor;
 
@@ -1155,7 +1155,7 @@ public class WifiWatchdogStateMachine extends StateMachine {
             int to = BSSID_STAT_RANGE_HIGH_DBM;
             mGoodLinkTargetRssi = findRssiTarget(from, to, GOOD_LINK_LOSS_THRESHOLD);
             mGoodLinkTargetCount = 1;
-            mBssidAvoidTimeMax = SystemClock.elapsedRealtime() + MAX_AVOID_TIME[0].TIME_MS;
+            mBssidAvoidTimeMax = SystemClock.elapsedRealtimeNanos1()/10000000 + MAX_AVOID_TIME[0].TIME_MS;
             if (DBG) logd("New link verifying target set, rssi=" + mGoodLinkTargetRssi + " count="
                     + mGoodLinkTargetCount);
         }
-- 
2.5.0

