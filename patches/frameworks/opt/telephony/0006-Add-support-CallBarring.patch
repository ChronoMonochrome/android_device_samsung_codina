From 14c6a7e9fcff371e98d84f88e5b73eec5c0df7a3 Mon Sep 17 00:00:00 2001
From: Manish Kumar <manishku@codeaurora.org>
Date: Tue, 30 Jul 2013 06:11:00 -0400
Subject: [PATCH 06/11] Add support CallBarring.

Add support for CallBarring in the Phone App
CallBarring now supports the following
-Barr All Outgoing Calls
-Barr Outgoing International Calls
-Barr Outgoing International Calls except to Home Country
-Barr All Incoming Calls
-Barr Incoming Calls when Roaming outside the home country
-All Barring services

CRs-Fixed: 520315
Change-Id: I6b69aaa422a06a8a839537ef658f24af32ace52c
---
 src/java/com/android/internal/telephony/Phone.java | 16 +++++++++
 .../com/android/internal/telephony/PhoneBase.java  | 13 ++++++++
 .../com/android/internal/telephony/PhoneProxy.java | 16 +++++++++
 .../android/internal/telephony/gsm/GSMPhone.java   | 38 ++++++++++++++++++++++
 4 files changed, 83 insertions(+)

diff --git a/src/java/com/android/internal/telephony/Phone.java b/src/java/com/android/internal/telephony/Phone.java
index da25e89..dbf428f 100644
--- a/src/java/com/android/internal/telephony/Phone.java
+++ b/src/java/com/android/internal/telephony/Phone.java
@@ -1857,6 +1857,22 @@ public interface Phone {
     void removeReferences();
 
     /**
+     * Query call barring option from network
+     */
+    void getCallBarringOption(String facility, String password, Message onComplete);
+
+    /**
+     * Set user desired call barring option
+     */
+    void setCallBarringOption(String facility, boolean lockState, String password,
+            Message onComplete);
+
+    /**
+     * Request to change call barring password
+     */
+    void requestChangeCbPsw(String facility, String oldPwd, String newPwd, Message result);
+
+    /**
      * Update the phone object if the voice radio technology has changed
      *
      * @param voiceRadioTech The new voice radio technology
diff --git a/src/java/com/android/internal/telephony/PhoneBase.java b/src/java/com/android/internal/telephony/PhoneBase.java
index 9064926..e4249d0 100644
--- a/src/java/com/android/internal/telephony/PhoneBase.java
+++ b/src/java/com/android/internal/telephony/PhoneBase.java
@@ -2677,4 +2677,17 @@ public abstract class PhoneBase extends Handler implements Phone {
         pw.flush();
         pw.println("++++++++++++++++++++++++++++++++");
     }
+
+    public void getCallBarringOption(String facility, String password, Message onComplete) {
+        logUnexpectedCdmaMethodCall("getCallBarringOption");
+    }
+
+    public void setCallBarringOption(String facility, boolean lockState, String password,
+            Message onComplete) {
+        logUnexpectedCdmaMethodCall("setCallBarringOption");
+    }
+
+    public void requestChangeCbPsw(String facility, String oldPwd, String newPwd, Message result) {
+        logUnexpectedCdmaMethodCall("requestChangeCbPsw");
+    }
 }
diff --git a/src/java/com/android/internal/telephony/PhoneProxy.java b/src/java/com/android/internal/telephony/PhoneProxy.java
index 87d0357..964acad 100644
--- a/src/java/com/android/internal/telephony/PhoneProxy.java
+++ b/src/java/com/android/internal/telephony/PhoneProxy.java
@@ -1664,4 +1664,20 @@ public class PhoneProxy extends Handler implements Phone {
         pw.flush();
         pw.println("++++++++++++++++++++++++++++++++");
     }
+
+    @Override
+    public void getCallBarringOption(String facility, String password, Message onComplete) {
+        mActivePhone.getCallBarringOption(facility, password, onComplete);
+    }
+
+    @Override
+    public void setCallBarringOption(String facility, boolean lockState, String password,
+            Message onComplete) {
+        mActivePhone.setCallBarringOption(facility, lockState, password, onComplete);
+    }
+
+    @Override
+    public void requestChangeCbPsw(String facility, String oldPwd, String newPwd, Message result) {
+        mActivePhone.requestChangeCbPsw(facility, oldPwd, newPwd, result);
+    }
 }
diff --git a/src/java/com/android/internal/telephony/gsm/GSMPhone.java b/src/java/com/android/internal/telephony/gsm/GSMPhone.java
index 5520f01..f30f884 100644
--- a/src/java/com/android/internal/telephony/gsm/GSMPhone.java
+++ b/src/java/com/android/internal/telephony/gsm/GSMPhone.java
@@ -2019,4 +2019,42 @@ public class GSMPhone extends PhoneBase {
         }
     }
 
+    private boolean isValidFacilityString(String facility) {
+        if ((facility.equals(CommandsInterface.CB_FACILITY_BAOC))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BAOIC))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BAOICxH))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BAIC))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BAICr))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BA_ALL))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BA_MO))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BA_MT))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BA_SIM))
+                || (facility.equals(CommandsInterface.CB_FACILITY_BA_FD))) {
+            return true;
+        }
+        Rlog.e(LOG_TAG, " Invalid facility String : " + facility);
+        return false;
+    }
+
+    @Override
+    public void getCallBarringOption(String facility, String password, Message onComplete) {
+        if (isValidFacilityString(facility)) {
+            mCi.queryFacilityLock(facility, password, CommandsInterface.SERVICE_CLASS_NONE,
+                    onComplete);
+        }
+    }
+
+    @Override
+    public void setCallBarringOption(String facility, boolean lockState, String password,
+            Message onComplete) {
+        if (isValidFacilityString(facility)) {
+            mCi.setFacilityLock(facility, lockState, password,
+                    CommandsInterface.SERVICE_CLASS_VOICE, onComplete);
+        }
+    }
+
+    @Override
+    public void requestChangeCbPsw(String facility, String oldPwd, String newPwd, Message result) {
+        mCi.changeBarringPassword(facility, oldPwd, newPwd, result);
+    }
 }
-- 
2.5.0

