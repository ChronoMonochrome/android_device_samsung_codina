From 48fcee413af54c7fbd9da7350ddfc870a3ec76e9 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 6 Sep 2015 21:48:23 +0300
Subject: [PATCH 2/6] Revert "[2/3] telephony: Add two new AppOps"

This reverts commit 76c91c1c645175efd1059b8362e27f7bcc4015cd.
---
 .../android/internal/telephony/PhoneSubInfo.java   | 34 ++++++++--------------
 1 file changed, 12 insertions(+), 22 deletions(-)

diff --git a/src/java/com/android/internal/telephony/PhoneSubInfo.java b/src/java/com/android/internal/telephony/PhoneSubInfo.java
index 6ddc2bd..264d335 100755
--- a/src/java/com/android/internal/telephony/PhoneSubInfo.java
+++ b/src/java/com/android/internal/telephony/PhoneSubInfo.java
@@ -18,7 +18,6 @@ package com.android.internal.telephony;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 
-import android.app.AppOpsManager;
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.os.Binder;
@@ -37,7 +36,6 @@ public class PhoneSubInfo {
 
     private Phone mPhone;
     private Context mContext;
-    private AppOpsManager mAppOps;
     private static final String READ_PHONE_STATE =
         android.Manifest.permission.READ_PHONE_STATE;
     // TODO: change getCompleteVoiceMailNumber() to require READ_PRIVILEGED_PHONE_STATE
@@ -45,12 +43,10 @@ public class PhoneSubInfo {
         android.Manifest.permission.CALL_PRIVILEGED;
     private static final String READ_PRIVILEGED_PHONE_STATE =
         android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE;
-    private static final int READ_PHONE_INFO = AppOpsManager.OP_READ_PHONE_INFO;
 
     public PhoneSubInfo(Phone phone) {
         mPhone = phone;
         mContext = phone.getContext();
-        mAppOps = (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);
     }
 
     public void dispose() {
@@ -66,18 +62,12 @@ public class PhoneSubInfo {
         if (DBG) log("PhoneSubInfo finalized");
     }
 
-    private boolean isOpAllowed(int op) {
-        String[] names = mContext.getPackageManager().getPackagesForUid(Binder.getCallingUid());
-        return mAppOps.noteOp(op, Binder.getCallingUid(), names==null ? null : names[0])
-                == AppOpsManager.MODE_ALLOWED;
-    }
-
     /**
      * Retrieves the unique device ID, e.g., IMEI for GSM phones and MEID for CDMA phones.
      */
     public String getDeviceId() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getDeviceId() : "009999012345678";
+        return mPhone.getDeviceId();
     }
 
     /**
@@ -85,7 +75,7 @@ public class PhoneSubInfo {
      */
     public String getImei() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getImei() : "009999012345678";
+        return mPhone.getImei();
     }
 
     /**
@@ -102,7 +92,7 @@ public class PhoneSubInfo {
      */
     public String getDeviceSvn() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getDeviceSvn() : "0099990123456799";
+        return mPhone.getDeviceSvn();
     }
 
     /**
@@ -110,7 +100,7 @@ public class PhoneSubInfo {
      */
     public String getSubscriberId() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getSubscriberId() : "001010123456789";
+        return mPhone.getSubscriberId();
     }
 
     /**
@@ -118,7 +108,7 @@ public class PhoneSubInfo {
      */
     public String getGroupIdLevel1() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getGroupIdLevel1() : "";
+        return mPhone.getGroupIdLevel1();
     }
 
     /**
@@ -126,7 +116,7 @@ public class PhoneSubInfo {
      */
     public String getIccSerialNumber() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getIccSerialNumber() : "899990000123456789";
+        return mPhone.getIccSerialNumber();
     }
 
     /**
@@ -134,7 +124,7 @@ public class PhoneSubInfo {
      */
     public String getLine1Number() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getLine1Number() : "+99900123456";
+        return mPhone.getLine1Number();
     }
 
     /**
@@ -142,7 +132,7 @@ public class PhoneSubInfo {
      */
     public String getLine1AlphaTag() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getLine1AlphaTag() : "+99900123456";
+        return mPhone.getLine1AlphaTag();
     }
 
     /**
@@ -150,7 +140,7 @@ public class PhoneSubInfo {
      */
     public String getMsisdn() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getMsisdn() : "99900123456";
+        return mPhone.getMsisdn();
     }
 
     /**
@@ -160,7 +150,7 @@ public class PhoneSubInfo {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
         String number = PhoneNumberUtils.extractNetworkPortion(mPhone.getVoiceMailNumber());
         if (VDBG) log("VM: PhoneSubInfo.getVoiceMailNUmber: " + number);
-        return isOpAllowed(READ_PHONE_INFO) ? number : "+99900123456";
+        return number;
     }
 
     /**
@@ -173,7 +163,7 @@ public class PhoneSubInfo {
                 "Requires CALL_PRIVILEGED");
         String number = mPhone.getVoiceMailNumber();
         if (VDBG) log("VM: PhoneSubInfo.getCompleteVoiceMailNUmber: " + number);
-        return isOpAllowed(READ_PHONE_INFO) ? number : "+99900123456";
+        return number;
     }
 
     /**
@@ -181,7 +171,7 @@ public class PhoneSubInfo {
      */
     public String getVoiceMailAlphaTag() {
         mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, "Requires READ_PHONE_STATE");
-        return isOpAllowed(READ_PHONE_INFO) ? mPhone.getVoiceMailAlphaTag() : "";
+        return mPhone.getVoiceMailAlphaTag();
     }
 
     /**
-- 
1.9.1

