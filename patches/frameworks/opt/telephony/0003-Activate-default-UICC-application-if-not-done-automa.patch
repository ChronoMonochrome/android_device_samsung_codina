From 2bbaba89f07afb5a1cae372396cddc8ed207d003 Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Thu, 5 Nov 2015 11:06:09 +0100
Subject: [PATCH 03/11] Activate default UICC application if not done
 automatically.

Provides compatibility to the pre-M behaviour.

Change-Id: Ie87e40cf1da3b19fd37e2c07ff50845f0842216a
---
 .../android/internal/telephony/BaseCommands.java   |  3 +-
 .../internal/telephony/CommandsInterface.java      | 11 ++------
 src/java/com/android/internal/telephony/RIL.java   | 12 ++++----
 .../android/internal/telephony/uicc/UiccCard.java  | 33 ++++++++++++++++++++++
 4 files changed, 42 insertions(+), 17 deletions(-)

diff --git a/src/java/com/android/internal/telephony/BaseCommands.java b/src/java/com/android/internal/telephony/BaseCommands.java
index 472004a..7742973 100644
--- a/src/java/com/android/internal/telephony/BaseCommands.java
+++ b/src/java/com/android/internal/telephony/BaseCommands.java
@@ -846,8 +846,7 @@ public abstract class BaseCommands implements CommandsInterface {
         return mRilVersion;
     }
 
-    public void setUiccSubscription(int slotId, int appIndex, int subId, int subStatus,
-            Message response) {
+    public void setUiccSubscription(int appIndex, boolean activate, Message response) {
     }
 
     public void setDataAllowed(boolean allowed, Message response) {
diff --git a/src/java/com/android/internal/telephony/CommandsInterface.java b/src/java/com/android/internal/telephony/CommandsInterface.java
index fd8081b..1101b93 100644
--- a/src/java/com/android/internal/telephony/CommandsInterface.java
+++ b/src/java/com/android/internal/telephony/CommandsInterface.java
@@ -1901,20 +1901,15 @@ public interface CommandsInterface {
    /**
      * Sets user selected subscription at Modem.
      *
-     * @param slotId
-     *          Slot.
      * @param appIndex
      *          Application index in the card.
-     * @param subId
-     *          Indicates subscription 0 or subscription 1.
-     * @param subStatus
-     *          Activation status, 1 = activate and 0 = deactivate.
+     * @param activate
+     *          Whether to activate or deactivate the subscription
      * @param result
      *          Callback message contains the information of SUCCESS/FAILURE.
      */
     // FIXME Update the doc and consider modifying the request to make more generic.
-    public void setUiccSubscription(int slotId, int appIndex, int subId, int subStatus,
-            Message result);
+    public void setUiccSubscription(int appIndex, boolean activate, Message result);
 
     /**
      * Tells the modem if data is allowed or not.
diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index 768a9f6..5fb77ef 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -731,19 +731,17 @@ public class RIL extends BaseCommands implements CommandsInterface {
         send(rr);
     }
 
-    public void setUiccSubscription(int slotId, int appIndex, int subId,
-            int subStatus, Message result) {
+    public void setUiccSubscription(int appIndex, boolean activate, Message result) {
         //Note: This RIL request is also valid for SIM and RUIM (ICC card)
         RILRequest rr = RILRequest.obtain(RIL_REQUEST_SET_UICC_SUBSCRIPTION, result);
 
         if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest)
-                + " slot: " + slotId + " appIndex: " + appIndex
-                + " subId: " + subId + " subStatus: " + subStatus);
+                + " appIndex: " + appIndex + " activate: " + activate);
 
-        rr.mParcel.writeInt(slotId);
+        rr.mParcel.writeInt(mInstanceId);
         rr.mParcel.writeInt(appIndex);
-        rr.mParcel.writeInt(subId);
-        rr.mParcel.writeInt(subStatus);
+        rr.mParcel.writeInt(mInstanceId);
+        rr.mParcel.writeInt(activate ? 1 : 0);
 
         send(rr);
     }
diff --git a/src/java/com/android/internal/telephony/uicc/UiccCard.java b/src/java/com/android/internal/telephony/uicc/UiccCard.java
index c75f234..117ea7d 100644
--- a/src/java/com/android/internal/telephony/uicc/UiccCard.java
+++ b/src/java/com/android/internal/telephony/uicc/UiccCard.java
@@ -88,6 +88,7 @@ public class UiccCard {
     private CatService mCatService;
     private RadioState mLastRadioState =  RadioState.RADIO_UNAVAILABLE;
     private UiccCarrierPrivilegeRules mCarrierPrivilegeRules;
+    private boolean m3GPPAppActivated, m3GPP2AppActivated;
 
     private RegistrantList mAbsentRegistrants = new RegistrantList();
     private RegistrantList mCarrierPrivilegeRegistrants = new RegistrantList();
@@ -194,6 +195,38 @@ public class UiccCard {
                     mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_ADDED, null));
                 }
             }
+            if (mGsmUmtsSubscriptionAppIndex < 0
+                    && mCdmaSubscriptionAppIndex < 0
+                    && mCardState == CardState.CARDSTATE_PRESENT
+                    && mCi.needsOldRilFeature("simactivation")) {
+                // Activate/Deactivate first 3GPP and 3GPP2 app in the SIM, if available
+                for (int i = 0; i < mUiccApplications.length; i++) {
+                    if (mUiccApplications[i] == null) {
+                        continue;
+                    }
+
+                    AppType appType = mUiccApplications[i].getType();
+                    if (!m3GPPAppActivated &&
+                            (appType == AppType.APPTYPE_USIM || appType == AppType.APPTYPE_SIM)) {
+                        mCi.setUiccSubscription(i, true, null);
+                        m3GPPAppActivated = true;
+                    } else if (!m3GPP2AppActivated &&
+                            (appType == AppType.APPTYPE_CSIM || appType == AppType.APPTYPE_RUIM)) {
+                        mCi.setUiccSubscription(i, true, null);
+                        m3GPP2AppActivated = true;
+                    }
+
+                    if (m3GPPAppActivated && m3GPP2AppActivated) {
+                        break;
+                    }
+                }
+            } else {
+                // SIM removed, reset activation flags to make sure
+                // to re-run the activation at the next insertion
+                m3GPPAppActivated = false;
+                m3GPP2AppActivated = false;
+            }
+
             mLastRadioState = radioState;
         }
     }
-- 
2.5.0

