From 0f805acb9131edd7baa93ae547e526049458b2ab Mon Sep 17 00:00:00 2001
From: Tom Joseph <tomjoseph@in.ibm.com>
Date: Fri, 2 Mar 2018 19:49:17 +0530
Subject: [PATCH 33/44] Revert "Set sensor operation parameter implementation"

---
 libs/sensor/ISensorServer.cpp              | 42 ------------------------------
 libs/sensor/Sensor.cpp                     |  9 ++-----
 libs/sensor/SensorManager.cpp              | 10 -------
 libs/sensor/include/sensor/ISensorServer.h |  3 ---
 libs/sensor/include/sensor/Sensor.h        |  1 -
 libs/sensor/include/sensor/SensorManager.h |  1 -
 6 files changed, 2 insertions(+), 64 deletions(-)

diff --git a/libs/sensor/ISensorServer.cpp b/libs/sensor/ISensorServer.cpp
index f20668d1e..f41f18713 100644
--- a/libs/sensor/ISensorServer.cpp
+++ b/libs/sensor/ISensorServer.cpp
@@ -40,7 +40,6 @@ enum {
     ENABLE_DATA_INJECTION,
     GET_DYNAMIC_SENSOR_LIST,
     CREATE_SENSOR_DIRECT_CONNECTION,
-    SET_OPERATION_PARAMETER,
 };
 
 class BpSensorServer : public BpInterface<ISensorServer>
@@ -118,25 +117,6 @@ public:
         remote()->transact(CREATE_SENSOR_DIRECT_CONNECTION, data, &reply);
         return interface_cast<ISensorEventConnection>(reply.readStrongBinder());
     }
-
-    virtual int setOperationParameter(int32_t handle, int32_t type,
-                                      const Vector<float> &floats,
-                                      const Vector<int32_t> &ints) {
-        Parcel data, reply;
-        data.writeInterfaceToken(ISensorServer::getInterfaceDescriptor());
-        data.writeInt32(handle);
-        data.writeInt32(type);
-        data.writeUint32(static_cast<uint32_t>(floats.size()));
-        for (auto i : floats) {
-            data.writeFloat(i);
-        }
-        data.writeUint32(static_cast<uint32_t>(ints.size()));
-        for (auto i : ints) {
-            data.writeInt32(i);
-        }
-        remote()->transact(SET_OPERATION_PARAMETER, data, &reply);
-        return reply.readInt32();
-    }
 };
 
 // Out-of-line virtual method definition to trigger vtable emission in this
@@ -203,28 +183,6 @@ status_t BnSensorServer::onTransact(
             reply->writeStrongBinder(IInterface::asBinder(ch));
             return NO_ERROR;
         }
-        case SET_OPERATION_PARAMETER: {
-            CHECK_INTERFACE(ISensorServer, data, reply);
-            int32_t handle;
-            int32_t type;
-            Vector<float> floats;
-            Vector<int32_t> ints;
-
-            handle = data.readInt32();
-            type = data.readInt32();
-            floats.resize(data.readUint32());
-            for (auto &i : floats) {
-                i = data.readFloat();
-            }
-            ints.resize(data.readUint32());
-            for (auto &i : ints) {
-                i = data.readInt32();
-            }
-
-            int32_t ret = setOperationParameter(handle, type, floats, ints);
-            reply->writeInt32(ret);
-            return NO_ERROR;
-        }
     }
     return BBinder::onTransact(code, data, reply, flags);
 }
diff --git a/libs/sensor/Sensor.cpp b/libs/sensor/Sensor.cpp
index a0e368c7e..c2d477e4b 100644
--- a/libs/sensor/Sensor.cpp
+++ b/libs/sensor/Sensor.cpp
@@ -30,7 +30,7 @@ Sensor::Sensor(const char * name) :
         mName(name), mHandle(0), mType(0),
         mMinValue(0), mMaxValue(0), mResolution(0),
         mPower(0), mMinDelay(0), mVersion(0), mFifoReservedEventCount(0),
-        mFifoMaxEventCount(0), mRequiredAppOp(-1),
+        mFifoMaxEventCount(0), mRequiredAppOp(0),
         mMaxDelay(0), mFlags(0) {
 }
 
@@ -38,8 +38,7 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion) :
         Sensor(*hwSensor, uuid_t(), halVersion) {
 }
 
-Sensor::Sensor(struct sensor_t const& hwSensor, const uuid_t& uuid, int halVersion) :
-        Sensor("") {
+Sensor::Sensor(struct sensor_t const& hwSensor, const uuid_t& uuid, int halVersion) {
     mName = hwSensor.name;
     mVendor = hwSensor.vendor;
     mVersion = hwSensor.version;
@@ -413,10 +412,6 @@ bool Sensor::isDynamicSensor() const {
     return (mFlags & SENSOR_FLAG_DYNAMIC_SENSOR) != 0;
 }
 
-bool Sensor::isDataInjectionSupported() const {
-    return (mFlags & SENSOR_FLAG_DATA_INJECTION) != 0;
-}
-
 bool Sensor::hasAdditionalInfo() const {
     return (mFlags & SENSOR_FLAG_ADDITIONAL_INFO) != 0;
 }
diff --git a/libs/sensor/SensorManager.cpp b/libs/sensor/SensorManager.cpp
index 3564816bf..8181fcade 100644
--- a/libs/sensor/SensorManager.cpp
+++ b/libs/sensor/SensorManager.cpp
@@ -334,15 +334,5 @@ int SensorManager::configureDirectChannel(int channelNativeHandle, int sensorHan
     return ret;
 }
 
-int SensorManager::setOperationParameter(
-        int handle, int type,
-        const Vector<float> &floats, const Vector<int32_t> &ints) {
-    Mutex::Autolock _l(mLock);
-    if (assertStateLocked() != NO_ERROR) {
-        return NO_INIT;
-    }
-    return mSensorServer->setOperationParameter(handle, type, floats, ints);
-}
-
 // ----------------------------------------------------------------------------
 }; // namespace android
diff --git a/libs/sensor/include/sensor/ISensorServer.h b/libs/sensor/include/sensor/ISensorServer.h
index edf3e0f4c..f922307e3 100644
--- a/libs/sensor/include/sensor/ISensorServer.h
+++ b/libs/sensor/include/sensor/ISensorServer.h
@@ -50,9 +50,6 @@ public:
 
     virtual sp<ISensorEventConnection> createSensorDirectConnection(const String16& opPackageName,
             uint32_t size, int32_t type, int32_t format, const native_handle_t *resource) = 0;
-
-    virtual int setOperationParameter(
-            int32_t handle, int32_t type, const Vector<float> &floats, const Vector<int32_t> &ints) = 0;
 };
 
 // ----------------------------------------------------------------------------
diff --git a/libs/sensor/include/sensor/Sensor.h b/libs/sensor/include/sensor/Sensor.h
index 6926f7f34..043e6352a 100644
--- a/libs/sensor/include/sensor/Sensor.h
+++ b/libs/sensor/include/sensor/Sensor.h
@@ -90,7 +90,6 @@ public:
     uint32_t getFlags() const;
     bool isWakeUpSensor() const;
     bool isDynamicSensor() const;
-    bool isDataInjectionSupported() const;
     bool hasAdditionalInfo() const;
     int32_t getHighestDirectReportRateLevel() const;
     bool isDirectChannelTypeSupported(int32_t sharedMemType) const;
diff --git a/libs/sensor/include/sensor/SensorManager.h b/libs/sensor/include/sensor/SensorManager.h
index 10616f0fe..f72c91007 100644
--- a/libs/sensor/include/sensor/SensorManager.h
+++ b/libs/sensor/include/sensor/SensorManager.h
@@ -85,7 +85,6 @@ public:
     int createDirectChannel(size_t size, int channelType, const native_handle_t *channelData);
     void destroyDirectChannel(int channelNativeHandle);
     int configureDirectChannel(int channelNativeHandle, int sensorHandle, int rateLevel);
-    int setOperationParameter(int handle, int type, const Vector<float> &floats, const Vector<int32_t> &ints);
 
 private:
     // DeathRecipient interface
-- 
2.11.0

