From 4aa04261d3bd3a241f4bbc5efc0079b62ec97939 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 26 Dec 2016 19:45:42 +0700
Subject: [PATCH 21/26] 
 frameworks-native_WW11-Add-minimum-delay-SensorDevice.patch

---
 services/sensorservice/SensorDevice.cpp | 14 ++++++++++++++
 services/sensorservice/SensorDevice.h   |  4 ++++
 services/sensorservice/SensorFusion.cpp |  7 +++++++
 3 files changed, 25 insertions(+)

diff --git a/services/sensorservice/SensorDevice.cpp b/services/sensorservice/SensorDevice.cpp
index 4fbaa50..36025e0 100644
--- a/services/sensorservice/SensorDevice.cpp
+++ b/services/sensorservice/SensorDevice.cpp
@@ -64,6 +64,7 @@ SensorDevice::SensorDevice()
             Info model;
             for (size_t i=0 ; i<size_t(count) ; i++) {
                 mActivationCount.add(list[i].handle, model);
+                minDelayMap[list[i].handle] = list[i].minDelay * 1000;
                 mSensorDevice->activate(
                         reinterpret_cast<struct sensors_poll_device_t *>(mSensorDevice),
                         list[i].handle, 0);
@@ -236,6 +237,12 @@ status_t SensorDevice::batch(void* ident, int handle, int flags, int64_t samplin
                              int64_t maxBatchReportLatencyNs) {
     if (!mSensorDevice) return NO_INIT;
 
+    if (minDelayMap.find(handle) != minDelayMap.end()) {
+        if (samplingPeriodNs < minDelayMap[handle]) {
+            samplingPeriodNs = minDelayMap[handle];
+        }
+    }
+
     if (samplingPeriodNs < MINIMUM_EVENTS_PERIOD) {
         samplingPeriodNs = MINIMUM_EVENTS_PERIOD;
     }
@@ -299,6 +306,13 @@ status_t SensorDevice::batch(void* ident, int handle, int flags, int64_t samplin
 
 status_t SensorDevice::setDelay(void* ident, int handle, int64_t samplingPeriodNs) {
     if (!mSensorDevice) return NO_INIT;
+
+    if (minDelayMap.find(handle) != minDelayMap.end()) {
+        if (samplingPeriodNs < minDelayMap[handle]) {
+            samplingPeriodNs = minDelayMap[handle];
+        }
+    }
+
     if (samplingPeriodNs < MINIMUM_EVENTS_PERIOD) {
         samplingPeriodNs = MINIMUM_EVENTS_PERIOD;
     }
diff --git a/services/sensorservice/SensorDevice.h b/services/sensorservice/SensorDevice.h
index 68bb853..252c94d 100644
--- a/services/sensorservice/SensorDevice.h
+++ b/services/sensorservice/SensorDevice.h
@@ -27,6 +27,8 @@
 #include <stdint.h>
 #include <sys/types.h>
 
+#include <unordered_map>
+
 // ---------------------------------------------------------------------------
 
 namespace android {
@@ -108,6 +110,8 @@ private:
     SortedVector<void *> mDisabledClients;
     SensorDevice();
 
+    std::unordered_map<int, nsecs_t> minDelayMap;
+
     bool isClientDisabled(void* ident);
     bool isClientDisabledLocked(void* ident);
 };
diff --git a/services/sensorservice/SensorFusion.cpp b/services/sensorservice/SensorFusion.cpp
index 9863f62..0b819aa 100644
--- a/services/sensorservice/SensorFusion.cpp
+++ b/services/sensorservice/SensorFusion.cpp
@@ -18,6 +18,8 @@
 #include "SensorFusion.h"
 #include "SensorService.h"
 
+#include <inttypes.h>
+
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -157,6 +159,11 @@ status_t SensorFusion::activate(int mode, void* ident, bool enabled) {
 }
 
 status_t SensorFusion::setDelay(int mode, void* ident, int64_t ns) {
+
+   ALOGD_IF(DEBUG_CONNECTIONS,
+            "SensorFusion::setDelay[acc=%" PRId64 ", mag=%" PRId64 ", gyro=%" PRId64 "]",
+            ns, ms2ns(20), mTargetDelayNs);
+
     // Call batch with timeout zero instead of setDelay().
     if (ns > (int64_t)5e7) {
         ns = (int64_t)(5e7);
-- 
2.9.3

