From 074d914e74be2e0fda74ddaadeaa7f5ce90548d6 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 24/43] surfaceflinger: make critical threads SCHED_FIFO

Sets the main thread, EventThread, and SFEventThread to SCHED_FIFO to minimize jitter.
---
 services/sensorservice/Android.bp               | 1 +
 services/sensorservice/SensorService.cpp        | 2 ++
 services/sensorservice/hidl/Android.bp          | 1 +
 services/sensorservice/hidl/SensorManager.cpp   | 2 ++
 services/surfaceflinger/DispSync.cpp            | 4 ++--
 services/surfaceflinger/SurfaceFlinger_hwc1.cpp | 7 ++++++-
 services/surfaceflinger/main_surfaceflinger.cpp | 2 ++
 7 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/services/sensorservice/Android.bp b/services/sensorservice/Android.bp
index 8d381b1c3..49e95ad92 100644
--- a/services/sensorservice/Android.bp
+++ b/services/sensorservice/Android.bp
@@ -29,6 +29,7 @@ cc_library_shared {
         "-Wall",
         "-Werror",
         "-Wextra",
+        "-DHARDWARE_FIFO_SENSOR_SERVICE",
         "-fvisibility=hidden"
     ],
 
diff --git a/services/sensorservice/SensorService.cpp b/services/sensorservice/SensorService.cpp
index a1f07b281..eaeefb25e 100644
--- a/services/sensorservice/SensorService.cpp
+++ b/services/sensorservice/SensorService.cpp
@@ -274,8 +274,10 @@ void SensorService::onFirstRef() {
             mAckReceiver->run("SensorEventAckReceiver", PRIORITY_URGENT_DISPLAY);
             run("SensorService", PRIORITY_URGENT_DISPLAY);
 
+#ifndef HARDWARE_FIFO_SENSOR_SERVICE
             // priority can only be changed after run
             enableSchedFifoMode();
+#endif
         }
     }
 }
diff --git a/services/sensorservice/hidl/Android.bp b/services/sensorservice/hidl/Android.bp
index 02c13fa57..e480566d5 100644
--- a/services/sensorservice/hidl/Android.bp
+++ b/services/sensorservice/hidl/Android.bp
@@ -9,6 +9,7 @@ cc_library_shared {
     cflags: [
         "-Wall",
         "-Werror",
+        "-DHARDWARE_FIFO_SENSOR_SERVICE",
     ],
     shared_libs: [
         "libbase",
diff --git a/services/sensorservice/hidl/SensorManager.cpp b/services/sensorservice/hidl/SensorManager.cpp
index fee6da1e6..ed30b79a1 100644
--- a/services/sensorservice/hidl/SensorManager.cpp
+++ b/services/sensorservice/hidl/SensorManager.cpp
@@ -142,12 +142,14 @@ sp<Looper> SensorManager::getLooper() {
         mStopThread = false;
         std::thread pollThread{[&stopThread = mStopThread, looper = mLooper, javaVm = mJavaVm] {
 
+#ifndef HARDWARE_FIFO_SENSOR_SERVICE
             struct sched_param p = {0};
             p.sched_priority = 10;
             if (sched_setscheduler(0 /* current thread*/, SCHED_FIFO, &p) != 0) {
                 LOG(WARNING) << "Could not use SCHED_FIFO for looper thread: "
                         << strerror(errno);
             }
+#endif
 
             // set looper
             Looper::setForThread(looper);
diff --git a/services/surfaceflinger/DispSync.cpp b/services/surfaceflinger/DispSync.cpp
index 6d9054718..abf4aaee5 100644
--- a/services/surfaceflinger/DispSync.cpp
+++ b/services/surfaceflinger/DispSync.cpp
@@ -387,14 +387,14 @@ void DispSync::init(bool hasSyncFramework, int64_t dispSyncPresentTimeOffset) {
     mIgnorePresentFences = !hasSyncFramework;
     mPresentTimeOffset = dispSyncPresentTimeOffset;
     mThread->run("DispSync", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
-
+#ifndef HARDWARE_SCHED_FIFO
     // set DispSync to SCHED_FIFO to minimize jitter
     struct sched_param param = {0};
     param.sched_priority = 2;
     if (sched_setscheduler(mThread->getTid(), SCHED_FIFO, &param) != 0) {
         ALOGE("Couldn't set SCHED_FIFO for DispSyncThread");
     }
-
+#endif
     android_set_rt_ioprio(mThread->getTid(), 1);
 
     reset();
diff --git a/services/surfaceflinger/SurfaceFlinger_hwc1.cpp b/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
index 5850b2916..647eb4bc5 100644
--- a/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
+++ b/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
@@ -543,6 +543,7 @@ void SurfaceFlinger::init() {
     mSFEventThread = new EventThread(sfVsyncSrc, *this, true);
     mEventQueue.setEventThread(mSFEventThread);
 
+#ifndef HARDWARE_SCHED_FIFO
     // set EventThread and SFEventThread to SCHED_FIFO to minimize jitter
     struct sched_param param = {0};
     param.sched_priority = 2;
@@ -552,7 +553,7 @@ void SurfaceFlinger::init() {
     if (sched_setscheduler(mEventThread->getTid(), SCHED_FIFO, &param) != 0) {
         ALOGE("Couldn't set SCHED_FIFO for EventThread");
     }
-
+#endif
     // Initialize the H/W composer object.  There may or may not be an
     // actual hardware composer underneath.
     mHwc.reset(new HWComposer(this,
@@ -2912,17 +2913,21 @@ void SurfaceFlinger::setPowerModeInternal(const sp<DisplayDevice>& hw,
         mHasPoweredOff = true;
         repaintEverything();
 
+#ifndef HARDWARE_SCHED_FIFO
         struct sched_param param = {0};
         param.sched_priority = 1;
         if (sched_setscheduler(0, SCHED_FIFO, &param) != 0) {
             ALOGW("Couldn't set SCHED_FIFO on display on");
         }
+#endif
     } else if (mode == HWC_POWER_MODE_OFF) {
+#ifndef HARDWARE_SCHED_FIFO
         // Turn off the display
         struct sched_param param = {0};
         if (sched_setscheduler(0, SCHED_OTHER, &param) != 0) {
             ALOGW("Couldn't set SCHED_OTHER on display off");
         }
+#endif
 
         if (type == DisplayDevice::DISPLAY_PRIMARY) {
             disableHardwareVsync(true); // also cancels any in-progress resync
diff --git a/services/surfaceflinger/main_surfaceflinger.cpp b/services/surfaceflinger/main_surfaceflinger.cpp
index e50f3ce1f..36f0b2017 100644
--- a/services/surfaceflinger/main_surfaceflinger.cpp
+++ b/services/surfaceflinger/main_surfaceflinger.cpp
@@ -111,11 +111,13 @@ int main(int, char**) {
     sp<GpuService> gpuservice = new GpuService();
     sm->addService(String16(GpuService::SERVICE_NAME), gpuservice, false);
 
+#ifndef HARDWARE_SCHED_FIFO
     struct sched_param param = {0};
     param.sched_priority = 2;
     if (sched_setscheduler(0, SCHED_FIFO, &param) != 0) {
         ALOGE("Couldn't set SCHED_FIFO");
     }
+#endif
 
     // run surface flinger in this thread
     flinger->run();
-- 
2.11.0

