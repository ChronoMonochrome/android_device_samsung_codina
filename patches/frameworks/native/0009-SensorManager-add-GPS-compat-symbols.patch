From a7ccc481f92cd276037060fc4c48998ee8e4c01e Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 5 Dec 2016 01:14:16 +0700
Subject: [PATCH 09/26] SensorManager: add GPS-compat symbols

credit: Sergey@4pda.ru
---
 include/gui/SensorManager.h | 15 +++++++++++++++
 libs/gui/SensorManager.cpp  | 20 ++++++++++++++++++++
 2 files changed, 35 insertions(+)

diff --git a/include/gui/SensorManager.h b/include/gui/SensorManager.h
index 4066181..772547a 100644
--- a/include/gui/SensorManager.h
+++ b/include/gui/SensorManager.h
@@ -48,11 +48,21 @@ class SensorEventQueue;
 // ----------------------------------------------------------------------------
 
 class SensorManager :
+#ifdef STE_HARDWARE
+    public ASensorManager,
+    public Singleton<SensorManager>
+#else
     public ASensorManager
+#endif
 {
 public:
     static SensorManager& getInstanceForPackage(const String16& packageName);
+#ifdef STE_HARDWARE
+    SensorManager();
+    ~SensorManager();
+#else
     ~SensorManager();
+#endif
 
 #ifdef COMPAT_SENSORS_M
     ssize_t getSensorList(Sensor const* const** list) const;
@@ -61,7 +71,12 @@ public:
 #endif
     ssize_t getDynamicSensorList(Vector<Sensor>& list);
     Sensor const* getDefaultSensor(int type);
+#ifdef STE_HARDWARE
+    sp<SensorEventQueue> createEventQueue();
+    sp<SensorEventQueue> createEventQueue(String8 packageName, int mode = 0);
+#else
     sp<SensorEventQueue> createEventQueue(String8 packageName = String8(""), int mode = 0);
+#endif
     bool isDataInjectionEnabled();
 
 private:
diff --git a/libs/gui/SensorManager.cpp b/libs/gui/SensorManager.cpp
index 6a380d5..83d2a4d 100644
--- a/libs/gui/SensorManager.cpp
+++ b/libs/gui/SensorManager.cpp
@@ -39,6 +39,10 @@ namespace android {
 android::Mutex android::SensorManager::sLock;
 std::map<String16, SensorManager*> android::SensorManager::sPackageInstances;
 
+#ifdef STE_HARDWARE
+ANDROID_SINGLETON_STATIC_INSTANCE(SensorManager)
+#endif
+
 SensorManager& SensorManager::getInstanceForPackage(const String16& packageName) {
     Mutex::Autolock _l(sLock);
     SensorManager* sensorManager;
@@ -94,6 +98,15 @@ SensorManager::SensorManager(const String16& opPackageName)
     assertStateLocked();
 }
 
+#ifdef STE_HARDWARE
+SensorManager::SensorManager()
+    : mSensorList(0), mOpPackageName(String16(""))
+{
+    // okay we're not locked here, but it's not needed during construction
+    assertStateLocked();
+}
+#endif
+
 SensorManager::~SensorManager() {
     free(mSensorList);
 }
@@ -220,6 +233,13 @@ Sensor const* SensorManager::getDefaultSensor(int type)
     return NULL;
 }
 
+#ifdef STE_HARDWARE
+sp<SensorEventQueue> SensorManager::createEventQueue()
+{
+    return createEventQueue(String8(""), 0);
+}
+#endif
+
 sp<SensorEventQueue> SensorManager::createEventQueue(String8 packageName, int mode) {
     sp<SensorEventQueue> queue;
 
-- 
2.9.3

