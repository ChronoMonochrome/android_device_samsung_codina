 SF: Share cputime slices when RT sched priority is identical

We can reach an improvement by switching
to the round-robin (SCHED_RR) scheduling policy.

This will allow RT tasks with identical
sched priority to smartly preempt each
other to share cputime between them.

A SCHED_FIFO task would not allow tasks
with identical sched priority to
preempt it until it gets force-throttled
by the scheduler.

So overall this change switches to smart
syncing of cputime between all long-running
SF tasks and between all short-running SF
tasks, since these share an identical
sched priority.

diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 4e122da..064e1d5 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -488,11 +488,11 @@ void SurfaceFlinger::init() {
         mEventQueue.setEventThread(mSFEventThread);
 
 #ifndef HARDWARE_SCHED_FIFO
-        // set SFEventThread to SCHED_FIFO to minimize jitter
+        // set SFEventThread to SCHED_RR to minimize jitter
         struct sched_param param = {0};
         param.sched_priority = 4;
-        if (sched_setscheduler(mSFEventThread->getTid(), SCHED_FIFO, &param) != 0) {
-            ALOGE("Couldn't set SCHED_FIFO for SFEventThread");
+        if (sched_setscheduler(mSFEventThread->getTid(), SCHED_RR, &param) != 0) {
+            ALOGE("Couldn't set SCHED_RR for SFEventThread");
         }
 #endif
 
@@ -2745,8 +2745,8 @@ void SurfaceFlinger::setPowerModeInternal(const sp<DisplayDevice>& hw,
 #ifndef HARDWARE_SCHED_FIFO
         struct sched_param param = {0};
         param.sched_priority = 2;
-        if (sched_setscheduler(0, SCHED_FIFO, &param) != 0) {
-            ALOGW("Couldn't set SCHED_FIFO on display on");
+        if (sched_setscheduler(0, SCHED_RR, &param) != 0) {
+            ALOGW("Couldn't set SCHED_RR on display on");
         }
 #endif
     } else if (mode == HWC_POWER_MODE_OFF) {
diff --git a/services/surfaceflinger/SurfaceFlinger_hwc1.cpp b/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
index 4e122da..064e1d5 100644
--- a/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
+++ b/services/surfaceflinger/SurfaceFlinger_hwc1.cpp
@@ -480,11 +480,11 @@ void SurfaceFlinger::init() {
         mEventQueue.setEventThread(mSFEventThread);
 
 #ifndef HARDWARE_SCHED_FIFO
-       // set SFEventThread to SCHED_FIFO to minimize jitter
+       // set SFEventThread to SCHED_RR to minimize jitter
        struct sched_param param = {0};
        param.sched_priority = 4;
-       if (sched_setscheduler(mSFEventThread->getTid(), SCHED_FIFO, &param) != 0) {
-           ALOGE("Couldn't set SCHED_FIFO for SFEventThread");
+       if (sched_setscheduler(mSFEventThread->getTid(), SCHED_RR, &param) != 0) {
+           ALOGE("Couldn't set SCHED_RR for SFEventThread");
        }
 #endif
     } else {
@@ -494,11 +494,11 @@ void SurfaceFlinger::init() {
         mEventQueue.setEventThread(mEventThread);
 
 #ifndef HARDWARE_SCHED_FIFO
-       // set EventThread to SCHED_FIFO to minimize jitter
+       // set SFEventThread to SCHED_RR to minimize jitter
        struct sched_param param = {0};
        param.sched_priority = 4;
-       if (sched_setscheduler(mEventThread->getTid(), SCHED_FIFO, &param) != 0) {
-           ALOGE("Couldn't set SCHED_FIFO for SFEventThread");
+       if (sched_setscheduler(mEventThread->getTid(), SCHED_RR, &param) != 0) {
+           ALOGE("Couldn't set SCHED_RR for SFEventThread");
        }
 #endif
     }
@@ -2745,8 +2745,8 @@ void SurfaceFlinger::setPowerModeInternal(const sp<DisplayDevice>& hw,
 #ifndef HARDWARE_SCHED_FIFO
         struct sched_param param = {0};
         param.sched_priority = 2;
-        if (sched_setscheduler(0, SCHED_FIFO, &param) != 0) {
-            ALOGW("Couldn't set SCHED_FIFO on display on");
+        if (sched_setscheduler(0, SCHED_RR, &param) != 0) {
+            ALOGW("Couldn't set SCHED_RR on display on");
         }
 #endif
     } else if (mode == HWC_POWER_MODE_OFF) {
diff --git a/services/surfaceflinger/main_surfaceflinger.cpp b/services/surfaceflinger/main_surfaceflinger.cpp
index 4e122da..064e1d5 100644
--- a/services/surfaceflinger/main_surfaceflinger.cpp
+++ b/services/surfaceflinger/main_surfaceflinger.cpp
@@ -65,8 +65,8 @@ int main(int, char**) {
 #ifndef HARDWARE_SCHED_FIFO
     struct sched_param param = {0};
     param.sched_priority = 4;
-    if (sched_setscheduler(0, SCHED_FIFO, &param) != 0) {
-        ALOGE("Couldn't set SCHED_FIFO");
+    if (sched_setscheduler(0, SCHED_RR, &param) != 0) {
+        ALOGE("Couldn't set SCHED_RR");
     }
 #endif
 
diff --git a/services/surfaceflinger/DispSync.cpp b/services/surfaceflinger/DispSync.cpp
index 4e122da..064e1d5 100644
--- a/services/surfaceflinger/DispSync.cpp
+++ b/services/surfaceflinger/DispSync.cpp
@@ -384,11 +384,11 @@ DispSync::DispSync(const char* name) :
 
     mThread->run("DispSync", PRIORITY_REALTIME);
 #ifndef HARDWARE_SCHED_FIFO
-    // set DispSync to SCHED_FIFO to minimize jitter
+    // set DispSync to SCHED_RR to minimize jitter
     struct sched_param param = {0};
     param.sched_priority = 4;
-    if (sched_setscheduler(mThread->getTid(), SCHED_FIFO, &param) != 0) {
-        ALOGE("Couldn't set SCHED_FIFO for DispSyncThread");
+    if (sched_setscheduler(mThread->getTid(), SCHED_RR, &param) != 0) {
+        ALOGE("Couldn't set SCHED_RR for DispSyncThread");
     }
 #endif
 
