From 64acdad175ab97da97bf0e5180832ee47c864164 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 5 Dec 2016 01:13:17 +0700
Subject: [PATCH 07/26] libgui: Provide M-compatible sensors ABI

* Enable with -DCOMPAT_SENSORS_M
---
 include/gui/SensorManager.h | 16 ++++++++++++++++
 libs/gui/SensorManager.cpp  | 14 ++++++++++++--
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/include/gui/SensorManager.h b/include/gui/SensorManager.h
index 6c6230f..4066181 100644
--- a/include/gui/SensorManager.h
+++ b/include/gui/SensorManager.h
@@ -54,7 +54,11 @@ public:
     static SensorManager& getInstanceForPackage(const String16& packageName);
     ~SensorManager();
 
+#ifdef COMPAT_SENSORS_M
+    ssize_t getSensorList(Sensor const* const** list) const;
+#else
     ssize_t getSensorList(Sensor const* const** list);
+#endif
     ssize_t getDynamicSensorList(Vector<Sensor>& list);
     Sensor const* getDefaultSensor(int type);
     sp<SensorEventQueue> createEventQueue(String8 packageName = String8(""), int mode = 0);
@@ -65,17 +69,29 @@ private:
     void sensorManagerDied();
 
     SensorManager(const String16& opPackageName);
+#ifdef COMPAT_SENSORS_M
+    status_t assertStateLocked() const;
+#else
     status_t assertStateLocked();
+#endif
 
 private:
     static Mutex sLock;
     static std::map<String16, SensorManager*> sPackageInstances;
 
+#ifdef COMPAT_SENSORS_M
+    mutable Mutex mLock;
+    mutable sp<ISensorServer> mSensorServer;
+    mutable Sensor const** mSensorList;
+    mutable Vector<Sensor> mSensors;
+    mutable sp<IBinder::DeathRecipient> mDeathObserver;
+#else
     Mutex mLock;
     sp<ISensorServer> mSensorServer;
     Sensor const** mSensorList;
     Vector<Sensor> mSensors;
     sp<IBinder::DeathRecipient> mDeathObserver;
+#endif
     const String16 mOpPackageName;
 };
 
diff --git a/libs/gui/SensorManager.cpp b/libs/gui/SensorManager.cpp
index 225bfa8..6a380d5 100644
--- a/libs/gui/SensorManager.cpp
+++ b/libs/gui/SensorManager.cpp
@@ -106,7 +106,12 @@ void SensorManager::sensorManagerDied() {
     mSensors.clear();
 }
 
-status_t SensorManager::assertStateLocked() {
+#ifdef COMPAT_SENSORS_M
+status_t SensorManager::assertStateLocked() const
+#else
+status_t SensorManager::assertStateLocked()
+#endif
+{
     bool initSensorManager = false;
     if (mSensorServer == NULL) {
         initSensorManager = true;
@@ -161,7 +166,12 @@ status_t SensorManager::assertStateLocked() {
     return NO_ERROR;
 }
 
-ssize_t SensorManager::getSensorList(Sensor const* const** list) {
+#ifdef COMPAT_SENSORS_M
+ssize_t SensorManager::getSensorList(Sensor const* const** list) const
+#else
+ssize_t SensorManager::getSensorList(Sensor const* const** list)
+#endif
+{
     Mutex::Autolock _l(mLock);
     status_t err = assertStateLocked();
     if (err < 0) {
-- 
2.9.3

