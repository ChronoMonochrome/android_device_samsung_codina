From e50496339409bfa3a84304e6f74925c872f0007c Mon Sep 17 00:00:00 2001
From: mengsun <msun@codeaurora.org>
Date: Wed, 15 Apr 2015 17:46:42 +0800
Subject: [PATCH] Optimization for calling process.

Keep incallui process alive with a property control.

Change-Id: If85d8a74d3a9e650ca7e1b61c4a134d779c8afeb
---

diff --git a/src/com/android/server/telecom/CallsManager.java b/src/com/android/server/telecom/CallsManager.java
index fec20af..40a59ef 100644
--- a/src/com/android/server/telecom/CallsManager.java
+++ b/src/com/android/server/telecom/CallsManager.java
@@ -203,7 +203,8 @@
         mProximitySensorManager = new ProximitySensorManager(context);
         mPhoneStateBroadcaster = new PhoneStateBroadcaster();
         mCallLogManager = new CallLogManager(context);
-        mInCallController = new InCallController(context);
+        mInCallController = new InCallController(context,
+                SystemProperties.getBoolean("persist.radio.incalluialwayson", true));
         mDtmfLocalTonePlayer = new DtmfLocalTonePlayer(context);
         mConnectionServiceRepository = new ConnectionServiceRepository(mPhoneAccountRegistrar,
                 context);
diff --git a/src/com/android/server/telecom/InCallController.java b/src/com/android/server/telecom/InCallController.java
index 4c748c8..3f9f90d 100755
--- a/src/com/android/server/telecom/InCallController.java
+++ b/src/com/android/server/telecom/InCallController.java
@@ -17,9 +17,11 @@
 package com.android.server.telecom;
 
 import android.Manifest;
+import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.ServiceConnection;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
@@ -150,18 +152,36 @@
 
     private final Context mContext;
 
-    public InCallController(Context context) {
+    private final boolean mKeepInCallUIAlive;
+
+    public InCallController(Context context, boolean keepAlive) {
         mContext = context;
         Resources resources = mContext.getResources();
 
         mInCallComponentName = TelephonyUtil.getInCallComponentName(context);
+
+        mKeepInCallUIAlive = keepAlive;
+        if (mKeepInCallUIAlive) {
+            bind(null, true);
+        }
+        mContext.registerReceiver(new BroadcastReceiver() {
+
+            public void onReceive(Context context, Intent intent) {
+                // refresh the service for current user
+                if (Intent.ACTION_USER_SWITCHED.equals(intent.getAction())
+                        && mKeepInCallUIAlive) {
+                    Log.d(InCallController.this, "bind service again for user switched!");
+                    unbind(false);
+                    bind(null, true);
+                }
+            }
+
+        }, new IntentFilter(Intent.ACTION_USER_SWITCHED));
     }
 
     @Override
     public void onCallAdded(Call call) {
-        if (mInCallServices.isEmpty()) {
-            bind(call);
-        } else {
+        if (!mInCallServices.isEmpty()) {
             Log.i(this, "onCallAdded: %s", call);
             // Track the call if we don't already know about it.
             addCall(call);
@@ -178,6 +198,7 @@
                 }
             }
         }
+        bind(call, false);
     }
 
     @Override
@@ -185,7 +206,7 @@
         Log.i(this, "onCallRemoved: %s", call);
         if (CallsManager.getInstance().getCalls().isEmpty()) {
             // TODO: Wait for all messages to be delivered to the service before unbinding.
-            unbind();
+            unbind(mKeepInCallUIAlive);
         }
         call.removeListener(mCallListener);
         mCallIdMapper.removeCall(call);
@@ -270,8 +291,14 @@
     /**
      * Unbinds an existing bound connection to the in-call app.
      */
-    private void unbind() {
+    private void unbind(boolean skipOriginal) {
         ThreadUtil.checkOnMainThread();
+        InCallServiceConnection originalConn = null;
+        IInCallService originalService = null;
+        if (skipOriginal) {
+            originalConn = mServiceConnections.remove(mInCallComponentName);
+            originalService = mInCallServices.remove(mInCallComponentName);
+        }
         Iterator<Map.Entry<ComponentName, InCallServiceConnection>> iterator =
             mServiceConnections.entrySet().iterator();
         while (iterator.hasNext()) {
@@ -280,6 +307,12 @@
             iterator.remove();
         }
         mInCallServices.clear();
+        if (originalConn != null) {
+            mServiceConnections.put(mInCallComponentName, originalConn);
+        }
+        if (originalService != null) {
+            mInCallServices.put(mInCallComponentName, originalService);
+        }
     }
 
     /**
@@ -288,64 +321,70 @@
      *
      * @param call The newly added call that triggered the binding to the in-call services.
      */
-    private void bind(Call call) {
+    private void bind(Call call, boolean originalOnly) {
         ThreadUtil.checkOnMainThread();
-        if (mInCallServices.isEmpty()) {
-            PackageManager packageManager = mContext.getPackageManager();
-            Intent serviceIntent = new Intent(InCallService.SERVICE_INTERFACE);
+        PackageManager packageManager = mContext.getPackageManager();
+        Intent serviceIntent = new Intent(InCallService.SERVICE_INTERFACE);
 
-            for (ResolveInfo entry : packageManager.queryIntentServices(serviceIntent, 0)) {
-                ServiceInfo serviceInfo = entry.serviceInfo;
-                if (serviceInfo != null) {
-                    boolean hasServiceBindPermission = serviceInfo.permission != null &&
-                            serviceInfo.permission.equals(
-                                    Manifest.permission.BIND_INCALL_SERVICE);
-                    boolean hasControlInCallPermission = packageManager.checkPermission(
-                            Manifest.permission.CONTROL_INCALL_EXPERIENCE,
-                            serviceInfo.packageName) == PackageManager.PERMISSION_GRANTED;
+        for (ResolveInfo entry : packageManager.queryIntentServices(serviceIntent, 0)) {
+            ServiceInfo serviceInfo = entry.serviceInfo;
+            if (serviceInfo != null) {
+                boolean hasServiceBindPermission = serviceInfo.permission != null &&
+                        serviceInfo.permission.equals(
+                                Manifest.permission.BIND_INCALL_SERVICE);
+                boolean hasControlInCallPermission = packageManager.checkPermission(
+                        Manifest.permission.CONTROL_INCALL_EXPERIENCE,
+                        serviceInfo.packageName) == PackageManager.PERMISSION_GRANTED;
 
-                    if (!hasServiceBindPermission) {
-                        Log.w(this, "InCallService does not have BIND_INCALL_SERVICE permission: " +
-                                serviceInfo.packageName);
-                        continue;
+                if (!hasServiceBindPermission) {
+                    Log.w(this, "InCallService does not have BIND_INCALL_SERVICE permission: " +
+                            serviceInfo.packageName);
+                    continue;
+                }
+
+                if (!hasControlInCallPermission) {
+                    Log.w(this,
+                            "InCall UI does not have CONTROL_INCALL_EXPERIENCE permission: " +
+                                    serviceInfo.packageName);
+                    continue;
+                }
+
+                InCallServiceConnection inCallServiceConnection = new InCallServiceConnection();
+                ComponentName componentName = new ComponentName(serviceInfo.packageName,
+                        serviceInfo.name);
+
+                if (mInCallServices.containsKey(componentName)) {
+                    Log.w(this, "skip the service already bind!");
+                    continue;
+                }
+
+                if (originalOnly && !componentName.equals(mInCallComponentName)) {
+                    Log.w(this, "skip third party incall service bind");
+                    continue;
+                }
+
+                Log.i(this, "Attempting to bind to InCall %s, is dupe? %b ",
+                        serviceInfo.packageName,
+                        mServiceConnections.containsKey(componentName));
+
+                if (!mServiceConnections.containsKey(componentName)) {
+                    Intent intent = new Intent(InCallService.SERVICE_INTERFACE);
+                    intent.setComponent(componentName);
+
+                    int bindFlags = Context.BIND_AUTO_CREATE;
+                    if (call != null && mInCallComponentName.equals(componentName)) {
+                        bindFlags |= Context.BIND_IMPORTANT;
+                        if (!call.isIncoming()) {
+                            intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS,
+                                    call.getExtras());
+                            intent.putExtra(TelecomManager.EXTRA_PHONE_ACCOUNT_HANDLE,
+                                    call.getTargetPhoneAccount());
+                        }
                     }
 
-                    if (!hasControlInCallPermission) {
-                        Log.w(this,
-                                "InCall UI does not have CONTROL_INCALL_EXPERIENCE permission: " +
-                                        serviceInfo.packageName);
-                        continue;
-                    }
-
-                    InCallServiceConnection inCallServiceConnection = new InCallServiceConnection();
-                    ComponentName componentName = new ComponentName(serviceInfo.packageName,
-                            serviceInfo.name);
-
-                    Log.i(this, "Attempting to bind to InCall %s, is dupe? %b ",
-                            serviceInfo.packageName,
-                            mServiceConnections.containsKey(componentName));
-
-                    if (!mServiceConnections.containsKey(componentName)) {
-                        Intent intent = new Intent(InCallService.SERVICE_INTERFACE);
-                        intent.setComponent(componentName);
-
-                        final int bindFlags;
-                        if (mInCallComponentName.equals(componentName)) {
-                            bindFlags = Context.BIND_AUTO_CREATE | Context.BIND_IMPORTANT;
-                            if (!call.isIncoming()) {
-                                intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS,
-                                        call.getExtras());
-                                intent.putExtra(TelecomManager.EXTRA_PHONE_ACCOUNT_HANDLE,
-                                        call.getTargetPhoneAccount());
-                            }
-                        } else {
-                            bindFlags = Context.BIND_AUTO_CREATE;
-                        }
-
-                        if (mContext.bindServiceAsUser(intent, inCallServiceConnection, bindFlags,
-                                UserHandle.CURRENT)) {
-                            mServiceConnections.put(componentName, inCallServiceConnection);
-                        }
+                    if (mContext.bindServiceAsUser(intent, inCallServiceConnection, bindFlags,
+                            UserHandle.CURRENT)) {
+                        mServiceConnections.put(componentName, inCallServiceConnection);
                     }
                 }
             }
@@ -396,7 +435,7 @@
             onAudioStateChanged(null, CallsManager.getInstance().getAudioState());
             onCanAddCallChanged(CallsManager.getInstance().canAddCall());
         } else {
-            unbind();
+            unbind(mKeepInCallUIAlive);
         }
         Trace.endSection();
     }
@@ -421,7 +460,10 @@
             if (disconnectedComponent.equals(mInCallComponentName)) {
                 Log.i(this, "In-call UI %s disconnected.", disconnectedComponent);
                 CallsManager.getInstance().disconnectAllCalls();
-                unbind();
+                unbind(false);
+                if (mKeepInCallUIAlive) {
+                    bind(null, true);
+                }
             } else {
                 Log.i(this, "In-Call Service %s suddenly disconnected", disconnectedComponent);
                 // Else, if it wasn't the default in-call UI, then one of the other in-call services
