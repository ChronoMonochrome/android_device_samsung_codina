From 36cc5e3ddba1c320560903f1ba970a28be11531f Mon Sep 17 00:00:00 2001
From: mickybart <mickybart@pygoscelis.org>
Date: Thu, 6 Aug 2015 12:07:11 -0400
Subject: [PATCH 11/13] nAOSP patches

Change-Id: I2b17ea035abbf61a786d689a924b15240a81b826
---
 Android.mk                                         |   7 +-
 AndroidManifest.xml                                |  66 +++++
 proguard.flags                                     |   2 +
 res/drawable/color_tuning_preview.xml              |  24 ++
 res/layout/display_color_calibration.xml           |  89 +++++++
 res/values/arrays.xml                              |  98 ++++++++
 res/values/strings.xml                             |  41 ++++
 res/xml/dashboard_categories.xml                   |   8 +
 res/xml/development_prefs.xml                      |  63 +++++
 src/com/android/settings/DevelopmentSettings.java  | 190 +++++++++++++++
 src/com/android/settings/DisplayColor.java         | 265 +++++++++++++++++++++
 .../settings/fuelgauge/PowerUsageSummary.java      |  17 ++
 src/com/android/settings/util/FileUtils.java       |  76 ++++++
 13 files changed, 945 insertions(+), 1 deletion(-)
 create mode 100644 res/drawable/color_tuning_preview.xml
 create mode 100644 res/layout/display_color_calibration.xml
 create mode 100644 src/com/android/settings/DisplayColor.java
 create mode 100644 src/com/android/settings/util/FileUtils.java

diff --git a/Android.mk b/Android.mk
index ce422d9..5655574 100644
--- a/Android.mk
+++ b/Android.mk
@@ -28,8 +28,13 @@ LOCAL_PRIVILEGED_MODULE := true
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
 
-include frameworks/opt/setupwizard/navigationbar/common.mk
+LOCAL_AAPT_INCLUDE_ALL_RESOURCES := true
+LOCAL_AAPT_FLAGS += --extra-packages com.koushikdutta.superuser:com.koushikdutta.widgets --auto-add-overlay
+
+LOCAL_SRC_FILES += $(call all-java-files-under,../../../external/koush/Superuser/Superuser/src) $(call all-java-files-under,../../../external/koush/Widgets/Widgets/src)
+LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res $(LOCAL_PATH)/../../../external/koush/Widgets/Widgets/res $(LOCAL_PATH)/../../../external/koush/Superuser/Superuser/res
 
+include frameworks/opt/setupwizard/navigationbar/common.mk
 include $(BUILD_PACKAGE)
 
 # Use the following include to make our test apk.
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 8e81f34..81eafa6 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -5,6 +5,7 @@
 
     <original-package android:name="com.android.settings" />
 
+    <uses-permission android:name="android.permission.ACCESS_SUPERUSER" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.WRITE_SETTINGS" />
@@ -71,6 +72,30 @@
     <uses-permission android:name="android.permission.READ_SEARCH_INDEXABLES" />
     <uses-permission android:name="android.permission.OEM_UNLOCK_STATE" />
 
+    <permission
+        android:name="android.permission.REQUEST_SUPERUSER"
+        android:protectionLevel="signature" />
+
+    <permission
+        android:name="android.permission.REPORT_SUPERUSER"
+        android:protectionLevel="signature" />
+
+    <permission-group
+        android:name="android.permission-group.SUPERUSER"
+        android:description="@string/superuser_description_more"
+        android:icon="@drawable/ic_action_permission"
+        android:label="@string/superuser"
+        android:priority="10000" />
+
+    <permission
+        android:name="android.permission.ACCESS_SUPERUSER"
+        android:description="@string/superuser_description_more"
+        android:icon="@drawable/ic_action_permission"
+        android:label="@string/superuser_description"
+        android:logo="@drawable/ic_action_permission"
+        android:permissionGroup="android.permission-group.SUPERUSER"
+        android:protectionLevel="dangerous" />
+
     <application android:label="@string/settings_label"
             android:icon="@mipmap/ic_launcher_settings"
             android:taskAffinity=""
@@ -80,6 +105,47 @@
             android:supportsRtl="true"
             android:allowBackup="false">
 
+        <!-- Only system/su can open this activity -->
+        <!-- This activity will then call the MultitaskSuRequestActivity to create a new task stack -->
+        <activity
+            android:name="com.koushikdutta.superuser.RequestActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:label="@string/superuser"
+            android:launchMode="singleTask"
+            android:excludeFromRecents="true"
+            android:permission="android.permission.REQUEST_SUPERUSER"
+            android:process=":superuser"
+            android:taskAffinity="com.android.settings.superuser"
+            android:theme="@style/RequestThemeDark" />
+        <!-- Only system/su can open this activity -->
+        <!-- This is activity is started in multiuser mode when the user invoking su -->
+        <!-- is not the device owner (user id 0). -->
+        <activity
+            android:name="com.koushikdutta.superuser.NotifyActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:label="@string/superuser"
+            android:launchMode="singleTask"
+            android:excludeFromRecents="true"
+            android:permission="android.permission.REQUEST_SUPERUSER"
+            android:process=":superuser"
+            android:taskAffinity="com.android.settings.superuser"
+            android:theme="@style/RequestThemeDark" />
+
+        <!-- Multiple instances of this activity can be running for multiple su requests -->
+        <activity
+            android:name="com.koushikdutta.superuser.MultitaskSuRequestActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:excludeFromRecents="true"
+            android:exported="false"
+            android:label="@string/request"
+            android:process=":superuser"
+            android:taskAffinity="com.android.settings.superuser"
+            android:theme="@style/RequestThemeDark" />
+
+        <receiver
+            android:name="com.koushikdutta.superuser.SuReceiver"
+            android:permission="android.permission.REPORT_SUPERUSER" />
+
         <!-- Settings -->
 
         <activity android:name="Settings"
diff --git a/proguard.flags b/proguard.flags
index 3a76abe..ca95cde 100644
--- a/proguard.flags
+++ b/proguard.flags
@@ -20,6 +20,8 @@
 -keep class org.omnirom.omnigears.*
 -keep class org.**
 
+-keep class com.koushikdutta.**
+
 # Keep click responders
 -keepclassmembers class com.android.settings.inputmethod.UserDictionaryAddWordActivity {
   *** onClick*(...);
diff --git a/res/drawable/color_tuning_preview.xml b/res/drawable/color_tuning_preview.xml
new file mode 100644
index 0000000..589237a
--- /dev/null
+++ b/res/drawable/color_tuning_preview.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+
+    <gradient
+        android:angle="0"
+        android:startColor="#000000"
+        android:endColor="#FFFFFF" />
+</shape>
diff --git a/res/layout/display_color_calibration.xml b/res/layout/display_color_calibration.xml
new file mode 100644
index 0000000..72d6ded
--- /dev/null
+++ b/res/layout/display_color_calibration.xml
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center_horizontal"
+            android:paddingStart="20dip"
+            android:paddingEnd="20dip"
+            android:paddingBottom="20dip">
+
+        <TextView android:id="@+id/color_red_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/color_red_title"
+                android:paddingTop="10dip" />
+        <TextView android:id="@+id/color_red_value"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:paddingTop="10dip" />
+        <SeekBar android:id="@+id/color_red_seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_red_text"
+                android:paddingTop="2dip" />
+
+        <TextView android:id="@+id/color_green_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_red_seekbar"
+                android:text="@string/color_green_title"
+                android:paddingTop="10dip" />
+        <TextView android:id="@+id/color_green_value"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_red_seekbar"
+                android:layout_alignParentRight="true"
+                android:paddingTop="10dip" />
+        <SeekBar android:id="@+id/color_green_seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_green_text"
+                android:paddingTop="2dip" />
+
+        <TextView android:id="@+id/color_blue_text"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_green_seekbar"
+                android:text="@string/color_blue_title"
+                android:paddingTop="10dip" />
+        <TextView android:id="@+id/color_blue_value"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_green_seekbar"
+                android:layout_alignParentRight="true"
+                android:paddingTop="10dip" />
+        <SeekBar android:id="@+id/color_blue_seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/color_blue_text"
+                android:paddingTop="2dip" />
+
+        <ImageView android:id="@+id/black_scale_picture_color"
+                android:src="@drawable/color_tuning_preview"
+                android:layout_width="match_parent"
+                android:layout_height="40dip"
+                android:layout_below="@id/color_blue_seekbar"
+                android:paddingTop="20dip" />
+
+    </RelativeLayout>
+</ScrollView>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 5a0a1e8..8c34e86 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1262,6 +1262,104 @@
         <item>Cached (activity client)</item>
         <item>Cached (empty)</item>
     </string-array>
+    
+    <!-- urom -->
+    <!-- Arrays for ram minfree -->
+    <string-array name="ram_minfree_entries" translatable="false">
+        <item>@string/ram_minfree_automatic</item>
+        <item>75 MiB</item>
+        <item>90 MiB</item>
+        <item>105 MiB</item>
+        <item>120 MiB</item>
+        <item>135 MiB</item>
+        <item>150 MiB</item>
+        <item>165 MiB</item>
+        <item>@string/urom_generic_custom</item>
+    </string-array>
+
+    <string-array name="ram_minfree_values" translatable="false">
+        <item>-1</item>
+        <item>76800</item>
+        <item>92160</item>
+        <item>107520</item>
+        <item>122880</item>
+        <item>138240</item>
+        <item>153600</item>
+        <item>168960</item>
+        <item>-2</item>
+    </string-array>
+    
+    <!-- Array for zram -->
+    <string-array name="zram_size_entries">
+        <item>@string/urom_generic_disabled</item>
+        <item>96 MiB</item>
+        <item>128 MiB</item>
+        <item>160 MiB</item>
+        <item>192 MiB</item>
+        <item>224 MiB</item>
+        <item>256 MiB</item>
+        <item>288 MiB</item>
+        <item>@string/urom_generic_custom</item>
+    </string-array>
+
+    <string-array name="zram_size_values" translatable="false" >
+        <item>0</item>
+        <item>100663296</item>
+        <item>134217728</item>
+        <item>167772160</item>
+        <item>201326592</item>
+        <item>234881024</item>
+        <item>268435456</item>
+        <item>301989888</item>
+        <item>-2</item>
+    </string-array>
+    
+    <!-- Array for doze brightness -->
+    <string-array name="doze_brightness_entries">
+        <item>@string/urom_generic_default</item>
+        <item>@string/urom_screen_adaptive</item>
+        <item>10%</item>
+        <item>15%</item>
+        <item>20%</item>
+        <item>25%</item>
+        <item>30%</item>
+        <item>@string/urom_generic_custom</item>
+    </string-array>
+
+    <string-array name="doze_brightness_values" translatable="false" >
+        <item>-1</item>
+        <item>0</item>
+        <item>25</item>
+        <item>38</item>
+        <item>51</item>
+        <item>64</item>
+        <item>77</item>
+        <item>-2</item>
+    </string-array>
+    
+    <!-- Array for lightbar -->
+    <string-array name="lightbar_mode_entries">
+        <item>Always off</item>
+        <item>On with 5s timeout</item>
+        <item>On/Off with the screen</item>
+    </string-array>
+
+    <string-array name="lightbar_mode_values" translatable="false" >
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+    </string-array>
+
+    <!-- Array for mainkeys layout -->
+    <string-array name="mainkeys_layout_entries">
+        <item>Deprecated (Android 2.3)</item>
+        <item>Modern (Android 4.4+)</item>
+    </string-array>
+
+    <string-array name="mainkeys_layout_values" translatable="false" >
+        <item>0</item>
+        <item>1</item>
+    </string-array>
 
     <!-- Array of titles for sim color for multi-sim -->
     <string-array name="color_picker">
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 50f42d1..7c70608 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -6064,6 +6064,47 @@
 
    <!-- Message for encryption dialog telling the user that Talkback and other accessibility services will be disabled. -->
    <string name="encrypt_talkback_dialog_message_password">When you enter your password to start this device, accessibility services like <xliff:g id="service" example="TalkBack">%1$s</xliff:g> won\'t yet be available.</string>
+   
+   <!-- uRom -->
+   <string name="urom_category">Ultimate ROM</string>
+   <string name="urom_generic_custom">Custom</string>
+   <string name="urom_generic_disabled">Disabled</string>
+   <string name="urom_generic_default">Default</string>
+   <string name="urom_generic_reset">Reset</string>
+   <string name="urom_help_summary">(*) need a reboot, (**) need a reflash</string>
+   <string name="urom_screen_adaptive">Adaptive</string>
+
+   <!-- Ram minfree -->
+   <string name="ram_minfree_title">Low memory killer (*)</string>
+   <string name="ram_minfree_automatic">Automatic</string>
+
+   <!-- zram -->
+   <string name="zram_size_title">Swap in memory (*)</string>
+   
+   <!-- lightbar -->
+   <string name="lightbar_mode_title">Light bar (*)</string>
+   <string name="lightbar_flash_title">Light bar notification (*)</string>
+   <string name="lightbar_flash_summary">Flash on incoming notification</string>
+   
+   <!-- hw keys layout -->
+   <string name="mainkeys_layout_title">Physical Keys Layout (*)</string>
+   
+   <!-- hw keys music -->
+   <string name="mainkeys_music_title">Physical Keys Music (*)</string>
+   <string name="mainkeys_music_summary">Music controls when screen is off</string>
+   
+   <!-- doze brightness -->
+   <string name="doze_brightness_title">Ambient brightness level (*)</string>
+   
+   <!-- color calibration -->
+   <string name="color_calibration_title">Color calibration</string>
+   <string name="color_calibration_summary">Calibrate on-screen colors</string>
+   <string name="color_red_title">Red</string>
+   <string name="color_green_title">Green</string>
+   <string name="color_blue_title">Blue</string>
+
+   <!-- fast charge -->
+   <string name="fast_charge">USB Fast Charge</string>
 
    <!-- Title and summary for SIM Status -->
    <string name="imei_information_title">IMEI information</string>
diff --git a/res/xml/dashboard_categories.xml b/res/xml/dashboard_categories.xml
index f0d6246..3f96824 100644
--- a/res/xml/dashboard_categories.xml
+++ b/res/xml/dashboard_categories.xml
@@ -274,6 +274,14 @@
                 android:icon="@drawable/ic_settings_print"
                 />
 
+        <!-- Superuser -->
+        <dashboard-tile
+                android:id="@+id/superuser_settings"
+                android:title="@string/superuser"
+                android:fragment="com.koushikdutta.superuser.PolicyNativeFragment"
+                android:icon="@drawable/ic_action_permission"
+                />
+
         <!-- Development -->
         <dashboard-tile
                 android:id="@+id/development_settings"
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 665ea8a..df1ac61 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -342,5 +342,68 @@
             android:summary="@string/show_all_anrs_summary"/>
 
      </PreferenceCategory>
+     
+     <!-- uRom -->
+     <PreferenceCategory android:key="urom_category"
+            android:title="@string/urom_category">
+       
+       <Preference
+            android:key="help_urom"
+            android:summary="@string/urom_help_summary"
+            android:selectable="false"/>
+
+        <ListPreference
+            android:key="ram_minfree"
+            android:title="@string/ram_minfree_title"
+            android:persistent="false"
+            android:entries="@array/ram_minfree_entries"
+            android:entryValues="@array/ram_minfree_values" />
+
+        <ListPreference
+            android:key="zram_size"
+            android:title="@string/zram_size_title"
+            android:persistent="false"
+            android:entries="@array/zram_size_entries"
+            android:entryValues="@array/zram_size_values" />
+
+        <ListPreference
+            android:key="doze_brightness"
+            android:title="@string/doze_brightness_title"
+            android:persistent="false"
+            android:entries="@array/doze_brightness_entries"
+            android:entryValues="@array/doze_brightness_values" />
+
+        <ListPreference
+            android:key="lightbar_mode"
+            android:title="@string/lightbar_mode_title"
+            android:persistent="false"
+            android:entries="@array/lightbar_mode_entries"
+            android:entryValues="@array/lightbar_mode_values" />
+
+        <SwitchPreference
+            android:key="lightbar_flash"
+            android:title="@string/lightbar_flash_title"
+            android:summary="@string/lightbar_flash_summary"/>
+
+        <ListPreference
+            android:key="mainkeys_layout"
+            android:title="@string/mainkeys_layout_title"
+            android:persistent="false"
+            android:entries="@array/mainkeys_layout_entries"
+            android:entryValues="@array/mainkeys_layout_values" />
+
+        <SwitchPreference
+            android:key="mainkeys_music"
+            android:title="@string/mainkeys_music_title"
+            android:summary="@string/mainkeys_music_summary"/>
+
+        <com.android.settings.DisplayColor
+            android:key="color_calibration"
+            android:title="@string/color_calibration_title"
+            android:dialogTitle="@string/color_calibration_title"
+            android:summary="@string/color_calibration_summary"
+            android:persistent="false" />
+
+     </PreferenceCategory>
 
 </PreferenceScreen>
diff --git a/src/com/android/settings/DevelopmentSettings.java b/src/com/android/settings/DevelopmentSettings.java
index bfe5dd4..b569a62 100644
--- a/src/com/android/settings/DevelopmentSettings.java
+++ b/src/com/android/settings/DevelopmentSettings.java
@@ -178,6 +178,28 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
     private static final int REQUEST_CODE_ENABLE_OEM_UNLOCK = 0;
 
     private static String DEFAULT_LOG_RING_BUFFER_SIZE_IN_BYTES = "262144"; // 256K
+    
+    //urom
+    private static final String RAM_MINFREE_KEY = "ram_minfree";
+    private static final String RAM_MINFREE_PROPERTY = "persist.sys.ram_minfree";
+    
+    private static final String ZRAM_SIZE_KEY = "zram_size";
+    private static final String ZRAM_SIZE_PROPERTY = "persist.sys.zram_size";
+    private static final String ZRAM_ENABLE_PROPERTY = "persist.sys.zram_enable";
+    
+    private static final String DOZE_BRIGHTNESS_KEY = "doze_brightness";
+    private static final String DOZE_BRIGHTNESS_PROPERTY = "persist.screen.doze_brightness";
+    
+    private static final String LIGHTBAR_MODE_KEY = "lightbar_mode";
+    private static final String LIGHTBAR_MODE_PROPERTY = "persist.sys.lightbar_mode";
+    private static final String LIGHTBAR_FLASH_KEY = "lightbar_flash";
+    private static final String LIGHTBAR_FLASH_PROPERTY = "persist.sys.lightbar_flash";
+
+    private static final String MAINKEYS_LAYOUT_KEY = "mainkeys_layout";
+    private static final String MAINKEYS_LAYOUT_PROPERTY = "persist.qemu.hw.mainkeys_layout";
+    
+    private static final String MAINKEYS_MUSIC_KEY = "mainkeys_music";
+    private static final String MAINKEYS_MUSIC_PROPERTY = "persist.qemu.hw.mainkeys_music";
 
     private IWindowManager mWindowManager;
     private IBackupManager mBackupManager;
@@ -247,6 +269,15 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
     private SwitchPreference mShowAllANRs;
     private SwitchPreference mAdvancedReboot;
 
+    //urom
+    private ListPreference mRamMinfree;
+    private ListPreference mZramSize;
+    private ListPreference mDozeBrightness;
+    private ListPreference mLightbarMode;
+    private SwitchPreference mLightbarFlash;
+    private ListPreference mMainkeysLayout;
+    private SwitchPreference mMainkeysMusic;
+
     private PreferenceScreen mProcessStats;
     private final ArrayList<Preference> mAllPrefs = new ArrayList<Preference>();
 
@@ -400,6 +431,15 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
                 Settings.Secure.BUGREPORT_IN_POWER_MENU, 0) == 1) {
             Settings.Secure.putInt(cr, Settings.Secure.BUGREPORT_IN_POWER_MENU, 0);
         }
+
+        //urom
+        mRamMinfree = addListPreference(RAM_MINFREE_KEY);
+        mZramSize = addListPreference(ZRAM_SIZE_KEY);
+        mDozeBrightness = addListPreference(DOZE_BRIGHTNESS_KEY);
+        mLightbarMode = addListPreference(LIGHTBAR_MODE_KEY);
+        mLightbarFlash = (SwitchPreference) findPreference(LIGHTBAR_FLASH_KEY);
+        mMainkeysLayout = addListPreference(MAINKEYS_LAYOUT_KEY);
+        mMainkeysMusic = (SwitchPreference) findPreference(MAINKEYS_MUSIC_KEY);
     }
 
     private ListPreference addListPreference(String prefKey) {
@@ -583,6 +623,15 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         updateUseNuplayerOptions();
         updateUSBAudioOptions();
         updateAdvancedRebootOptions();
+
+        //urom
+        updateRamMinfreeOptions();
+        updateZramSizeOptions();
+        updateDozeBrightnessOptions();
+        updateLightbarModeOptions();
+        updateLightbarFlashOptions();
+        updateMainkeysLayoutOptions();
+        updateMainkeysMusicOptions();
     }
 
     private void resetAdvancedRebootOptions() {
@@ -1356,7 +1405,129 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
                 .create()
                 .show();
     }
+    
+    //urom
+    private void updateRamMinfreeOptions() {
+        String value = SystemProperties.get(RAM_MINFREE_PROPERTY, "-1");
+        int index = mRamMinfree.findIndexOfValue(value);
+        if (index == -1) {
+            index = mRamMinfree.getEntryValues().length - 1;
+        }
+        mRamMinfree.setValueIndex(index);
+        mRamMinfree.setSummary(mRamMinfree.getEntries()[index]);
+    }
+
+    private void writeRamMinfreeOptions(Object newValue) {
+        if (newValue.toString().contentEquals("-2")) {
+            // custom
+            return;
+        }
+        
+        SystemProperties.set(RAM_MINFREE_PROPERTY, newValue.toString());
+        updateRamMinfreeOptions();
+    }
 
+    private void updateZramSizeOptions() {
+        String value = SystemProperties.get(ZRAM_SIZE_PROPERTY, "0");
+        int index = mZramSize.findIndexOfValue(value);
+        if (index == -1) {
+            index = mZramSize.getEntryValues().length - 1;
+        }
+        mZramSize.setValueIndex(index);
+        mZramSize.setSummary(mZramSize.getEntries()[index]);
+    }
+
+    private void writeZramSizeOptions(Object newValue) {
+        String value = newValue.toString();
+    
+        if (value.contentEquals("-2")) {
+            // custom
+            return;
+        }
+        
+        SystemProperties.set(ZRAM_SIZE_PROPERTY, value);
+        
+        if (value.contentEquals("0")) {
+            SystemProperties.set(ZRAM_ENABLE_PROPERTY, "false");
+        } else {
+            SystemProperties.set(ZRAM_ENABLE_PROPERTY, "true");
+        }
+        
+        updateZramSizeOptions();
+    }
+    
+    private void updateDozeBrightnessOptions() {
+        String value = SystemProperties.get(DOZE_BRIGHTNESS_PROPERTY, "-1");
+        int index = mDozeBrightness.findIndexOfValue(value);
+        if (index == -1) {
+            index = mDozeBrightness.getEntryValues().length - 1;
+        }
+        mDozeBrightness.setValueIndex(index);
+        mDozeBrightness.setSummary((mDozeBrightness.getEntries()[index]).toString().replace("%","%%"));
+    }
+
+    private void writeDozeBrightnessOptions(Object newValue) {
+        if (newValue.toString().contentEquals("-2")) {
+            // custom
+            return;
+        }
+        
+        SystemProperties.set(DOZE_BRIGHTNESS_PROPERTY, newValue.toString());
+        updateDozeBrightnessOptions();
+    }
+    
+    private void updateLightbarModeOptions() {
+        String value = SystemProperties.get(LIGHTBAR_MODE_PROPERTY, "1");
+        int index = mLightbarMode.findIndexOfValue(value);
+        if (index == -1) {
+            index = 1;
+        }
+        mLightbarMode.setValueIndex(index);
+        mLightbarMode.setSummary(mLightbarMode.getEntries()[index]);
+    }
+    
+    private void writeLightbarModeOptions(Object newValue) {
+        SystemProperties.set(LIGHTBAR_MODE_PROPERTY, newValue.toString());
+        updateLightbarModeOptions();
+    }
+    
+    private void updateLightbarFlashOptions() {
+        updateSwitchPreference(mLightbarFlash, 
+                !SystemProperties.get(LIGHTBAR_FLASH_PROPERTY, "1").contentEquals("0"));
+    }
+    
+    private void writeLightbarFlashOptions() {
+        SystemProperties.set(LIGHTBAR_FLASH_PROPERTY, 
+                mLightbarFlash.isChecked() ? "1" : "0");
+        updateLightbarFlashOptions();
+    }
+    
+    private void updateMainkeysLayoutOptions() {
+        String value = SystemProperties.get(MAINKEYS_LAYOUT_PROPERTY, "1");
+        int index = mMainkeysLayout.findIndexOfValue(value);
+        if (index == -1) {
+            index = 1;
+        }
+        mMainkeysLayout.setValueIndex(index);
+        mMainkeysLayout.setSummary(mMainkeysLayout.getEntries()[index]);
+    }
+    
+    private void writeMainkeysLayoutOptions(Object newValue) {
+        SystemProperties.set(MAINKEYS_LAYOUT_PROPERTY, newValue.toString());
+        updateMainkeysLayoutOptions();
+    }
+    
+    private void updateMainkeysMusicOptions() {
+        updateSwitchPreference(mMainkeysMusic, 
+                !SystemProperties.get(MAINKEYS_MUSIC_PROPERTY, "1").contentEquals("0"));
+    }
+    
+    private void writeMainkeysMusicOptions() {
+        SystemProperties.set(MAINKEYS_MUSIC_PROPERTY, 
+                mMainkeysMusic.isChecked() ? "1" : "0");
+        updateMainkeysMusicOptions();
+    }
+    
     @Override
     public void onSwitchChanged(Switch switchView, boolean isChecked) {
         if (switchView != mSwitchBar.getSwitch()) {
@@ -1553,6 +1724,10 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
             writeUSBAudioOptions();
         } else if (preference == mAdvancedReboot) {
             writeAdvancedRebootOptions();
+        } else if (preference == mMainkeysMusic) {
+            writeMainkeysMusicOptions();
+        } else if (preference == mLightbarFlash) {
+            writeLightbarFlashOptions();
         } else {
             return super.onPreferenceTreeClick(preferenceScreen, preference);
         }
@@ -1607,6 +1782,21 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         } else if (preference == mSimulateColorSpace) {
             writeSimulateColorSpace(newValue);
             return true;
+        } else if (preference == mRamMinfree) {
+            writeRamMinfreeOptions(newValue);
+            return true;
+        } else if (preference == mZramSize) {
+            writeZramSizeOptions(newValue);
+            return true;
+        } else if (preference == mDozeBrightness) {
+            writeDozeBrightnessOptions(newValue);
+            return true;
+        } else if (preference == mLightbarMode) {
+            writeLightbarModeOptions(newValue);
+            return true;
+        } else if (preference == mMainkeysLayout) {
+            writeMainkeysLayoutOptions(newValue);
+            return true;
         }
         return false;
     }
diff --git a/src/com/android/settings/DisplayColor.java b/src/com/android/settings/DisplayColor.java
new file mode 100644
index 0000000..83dfa93
--- /dev/null
+++ b/src/com/android/settings/DisplayColor.java
@@ -0,0 +1,265 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.os.SystemProperties;
+import android.preference.DialogPreference;
+import android.preference.PreferenceManager;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.widget.Button;
+
+import com.android.settings.R;
+import com.android.settings.util.FileUtils;
+
+/**
+ * Special preference type that allows configuration of Color settings
+ */
+public class DisplayColor extends DialogPreference {
+    private static final String TAG = "ColorCalibration";
+    private static final String COLOR_FILE = "/sys/devices/platform/mdp.458753/kcal";
+    private static final String COLOR_CALIBRATION_PROPERTY = "persist.screen.color_control";
+
+    // These arrays must all match in length and order
+    private static final int[] SEEKBAR_ID = new int[] {
+        R.id.color_red_seekbar,
+        R.id.color_green_seekbar,
+        R.id.color_blue_seekbar
+    };
+
+    private static final int[] SEEKBAR_VALUE_ID = new int[] {
+        R.id.color_red_value,
+        R.id.color_green_value,
+        R.id.color_blue_value
+    };
+
+    private ColorSeekBar[] mSeekBars = new ColorSeekBar[SEEKBAR_ID.length];
+    private String[] mCurrentColors;
+    private String mOriginalColors;
+
+    public DisplayColor(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        setDialogLayoutResource(R.layout.display_color_calibration);
+    }
+
+    private String getCurColors() {
+        return FileUtils.readOneLine(COLOR_FILE);
+    }
+
+    private boolean setColors(String colors) {
+        return FileUtils.writeLine(COLOR_FILE, colors);
+    }
+
+    public int getMaxValue()  {
+        return 255;
+    }
+    public int getMinValue()  {
+        return 0;
+    }
+    public int getDefValue() {
+        return getMaxValue();
+    }
+
+    @Override
+    protected void onPrepareDialogBuilder(AlertDialog.Builder builder) {
+        builder.setNeutralButton(R.string.urom_generic_reset,
+                new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            }
+        });
+    }
+
+    @Override
+    protected void onBindDialogView(View view) {
+        super.onBindDialogView(view);
+
+        mOriginalColors = getCurColors();
+        mCurrentColors = mOriginalColors.split(" ");
+
+        for (int i = 0; i < SEEKBAR_ID.length; i++) {
+            SeekBar seekBar = (SeekBar) view.findViewById(SEEKBAR_ID[i]);
+            TextView value = (TextView) view.findViewById(SEEKBAR_VALUE_ID[i]);
+            mSeekBars[i] = new ColorSeekBar(seekBar, value, i);
+            mSeekBars[i].setValueFromString(mCurrentColors[i]);
+        }
+    }
+
+    @Override
+    protected void showDialog(Bundle state) {
+        super.showDialog(state);
+
+        // Can't use onPrepareDialogBuilder for this as we want the dialog
+        // to be kept open on click
+        AlertDialog d = (AlertDialog) getDialog();
+        Button defaultsButton = d.getButton(DialogInterface.BUTTON_NEUTRAL);
+        defaultsButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                int defaultValue = getDefValue();
+                for (int i = 0; i < mSeekBars.length; i++) {
+                    mSeekBars[i].mSeekBar.setProgress(defaultValue);
+                    mCurrentColors[i] = String.valueOf(defaultValue);
+                }
+                setColors(TextUtils.join(" ", mCurrentColors));
+            }
+        });
+    }
+
+    @Override
+    protected void onDialogClosed(boolean positiveResult) {
+        super.onDialogClosed(positiveResult);
+
+        if (positiveResult) {
+            SystemProperties.set(COLOR_CALIBRATION_PROPERTY, getCurColors());
+        } else if (mOriginalColors != null) {
+            setColors(mOriginalColors);
+        }
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        final Parcelable superState = super.onSaveInstanceState();
+        if (getDialog() == null || !getDialog().isShowing()) {
+            return superState;
+        }
+
+        // Save the dialog state
+        final SavedState myState = new SavedState(superState);
+        myState.currentColors = mCurrentColors;
+        myState.originalColors = mOriginalColors;
+
+        // Restore the old state when the activity or dialog is being paused
+        setColors(mOriginalColors);
+        mOriginalColors = null;
+
+        return myState;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state == null || !state.getClass().equals(SavedState.class)) {
+            // Didn't save state for us in onSaveInstanceState
+            super.onRestoreInstanceState(state);
+            return;
+        }
+
+        SavedState myState = (SavedState) state;
+        super.onRestoreInstanceState(myState.getSuperState());
+        mOriginalColors = myState.originalColors;
+        mCurrentColors = myState.currentColors;
+        for (int i = 0; i < mSeekBars.length; i++) {
+            mSeekBars[i].setValueFromString(mCurrentColors[i]);
+        }
+        setColors(TextUtils.join(" ", mCurrentColors));
+    }
+
+/*
+    public void restore(Context context) {
+        String value = SystemProperties.get(COLOR_CALIBRATION_PROPERTY, "255 255 255");
+
+        setColors(value);
+    }
+*/
+
+    private static class SavedState extends BaseSavedState {
+        String originalColors;
+        String[] currentColors;
+
+        public SavedState(Parcelable superState) {
+            super(superState);
+        }
+
+        public SavedState(Parcel source) {
+            super(source);
+            originalColors = source.readString();
+            currentColors = source.createStringArray();
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            super.writeToParcel(dest, flags);
+            dest.writeString(originalColors);
+            dest.writeStringArray(currentColors);
+        }
+
+        public static final Parcelable.Creator<SavedState> CREATOR =
+                new Parcelable.Creator<SavedState>() {
+
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
+            }
+
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
+            }
+        };
+    }
+
+    private class ColorSeekBar implements SeekBar.OnSeekBarChangeListener {
+        private int mIndex;
+        private SeekBar mSeekBar;
+        private TextView mValue;
+
+        public ColorSeekBar(SeekBar seekBar, TextView value, int index) {
+            mSeekBar = seekBar;
+            mValue = value;
+            mIndex = index;
+
+            mSeekBar.setMax(getMaxValue() - getMinValue());
+            mSeekBar.setOnSeekBarChangeListener(this);
+        }
+
+        public void setValueFromString(String valueString) {
+            mSeekBar.setProgress(Integer.valueOf(valueString));
+        }
+
+        @Override
+        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+            int min = getMinValue();
+            int max = getMaxValue();
+
+            if (fromUser) {
+                mCurrentColors[mIndex] = String.valueOf(progress + min);
+                setColors(TextUtils.join(" ", mCurrentColors));
+            }
+
+            int percent = Math.round(100F * progress / (max - min));
+            mValue.setText(String.format("%d%%", percent));
+        }
+
+        @Override
+        public void onStartTrackingTouch(SeekBar seekBar) {
+            // Do nothing here
+        }
+
+        @Override
+        public void onStopTrackingTouch(SeekBar seekBar) {
+            // Do nothing here
+        }
+    }
+}
diff --git a/src/com/android/settings/fuelgauge/PowerUsageSummary.java b/src/com/android/settings/fuelgauge/PowerUsageSummary.java
index 4ddbd23..3d89998 100644
--- a/src/com/android/settings/fuelgauge/PowerUsageSummary.java
+++ b/src/com/android/settings/fuelgauge/PowerUsageSummary.java
@@ -46,6 +46,7 @@ import com.android.settings.DevelopmentSettings;
 import com.android.settings.HelpUtils;
 import com.android.settings.R;
 import com.android.settings.SettingsActivity;
+import com.android.settings.util.FileUtils;
 
 import java.util.List;
 
@@ -63,10 +64,13 @@ public class PowerUsageSummary extends PreferenceFragment {
 
     private static final String BATTERY_HISTORY_FILE = "tmp_bat_history.bin";
 
+    private static final String FAST_CHARGE_FILE = "/sys/kernel/fast_charge/force_fast_charge";
+
     private static final int MENU_STATS_TYPE = Menu.FIRST;
     private static final int MENU_STATS_REFRESH = Menu.FIRST + 1;
     private static final int MENU_BATTERY_SAVER = Menu.FIRST + 2;
     private static final int MENU_HELP = Menu.FIRST + 3;
+    private static final int MENU_FAST_CHARGE = Menu.FIRST + 4;
 
     private UserManager mUm;
 
@@ -196,6 +200,14 @@ public class PowerUsageSummary extends PreferenceFragment {
         MenuItem batterySaver = menu.add(0, MENU_BATTERY_SAVER, 0, R.string.battery_saver);
         batterySaver.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
 
+        String fastChargeState = FileUtils.readOneLine(FAST_CHARGE_FILE);
+        if (fastChargeState != null) {
+            MenuItem fastCharge = menu.add(0, MENU_FAST_CHARGE, 0, R.string.fast_charge);
+            fastCharge.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
+            fastCharge.setCheckable(true);
+            fastCharge.setChecked(fastChargeState.contentEquals("1"));
+        }
+
         String helpUrl;
         if (!TextUtils.isEmpty(helpUrl = getResources().getString(R.string.help_url_battery))) {
             final MenuItem help = menu.add(0, MENU_HELP, 0, R.string.help_label);
@@ -224,6 +236,11 @@ public class PowerUsageSummary extends PreferenceFragment {
                 sa.startPreferencePanel(BatterySaverSettings.class.getName(), null,
                         R.string.battery_saver, null, null, 0);
                 return true;
+            case MENU_FAST_CHARGE:
+                if (FileUtils.writeLine(FAST_CHARGE_FILE, item.isChecked() ? "0" : "1")) {
+                    item.setChecked(!item.isChecked());
+                }
+                return true;
             default:
                 return false;
         }
diff --git a/src/com/android/settings/util/FileUtils.java b/src/com/android/settings/util/FileUtils.java
new file mode 100644
index 0000000..62b35e1
--- /dev/null
+++ b/src/com/android/settings/util/FileUtils.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.util;
+
+import android.util.Log;
+
+import java.io.BufferedReader;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.IOException;
+
+public final class FileUtils {
+    private static final String TAG = "FileUtils";
+
+    private FileUtils() {
+        // this class is not supposed to be instantiated
+    }
+
+    /**
+     * Reads the first line of text from the given file
+     */
+    public static String readOneLine(String fileName) {
+        String line = null;
+        BufferedReader reader = null;
+
+        try {
+            reader = new BufferedReader(new FileReader(fileName), 512);
+            line = reader.readLine();
+        } catch (IOException e) {
+            Log.e(TAG, "Could not read from file " + fileName, e);
+        } finally {
+            try {
+                if (reader != null) {
+                    reader.close();
+                }
+            } catch (IOException e) {
+                // ignored, not much we can do anyway
+            }
+        }
+
+        return line;
+    }
+
+    /**
+     * Writes the given value into the given file
+     *
+     * @return true on success, false on failure
+     */
+    public static boolean writeLine(String fileName, String value) {
+        try {
+            FileOutputStream fos = new FileOutputStream(fileName);
+            fos.write(value.getBytes());
+            fos.flush();
+            fos.close();
+        } catch (IOException e) {
+            Log.e(TAG, "Could not write to file " + fileName, e);
+            return false;
+        }
+
+        return true;
+    }
+}
-- 
2.5.0

