From 478e9638a227efe5df9f9ac3e4fabe43c6f31af6 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 04/30] Settings: Add support for fake signatures, enabled by
 developer setting

---
 res/values/cr_strings.xml                          |  5 +++
 res/xml/development_prefs.xml                      |  5 +++
 .../settings/development/DevelopmentSettings.java  | 46 ++++++++++++++++++++++
 3 files changed, 56 insertions(+)

diff --git a/res/values/cr_strings.xml b/res/values/cr_strings.xml
index 2e98ba8bdc..c2a32511e8 100644
--- a/res/values/cr_strings.xml
+++ b/res/values/cr_strings.xml
@@ -19,4 +19,9 @@
     <string name="enable_mtp_dirtyhack_title">MTP instead Charging</string>
     <string name="enable_mtp_dirtyhack_summary">Enable MTP instead Charging after connect to PC</string>
 
+    <!-- Allow fake signature checkbox in developer settings -->
+    <string name="allow_signature_fake">Allow signature spoofing</string>
+    <string name="allow_signature_fake_summary">Allow apps to bypass security systems by pretending to be a different app</string>
+    <string name="allow_signature_fake_warning">Allowing apps to bypass security systems can lead to serious security and privacy problems! Check that only benign apps use the corresponding permission when this is active.</string>
+
 </resources>
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 70e93dcc3b..b0c2f14b6a 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -478,6 +478,11 @@
             android:title="@string/immediately_destroy_activities"
             android:summary="@string/immediately_destroy_activities_summary"/>
 
+        <SwitchPreference
+            android:key="allow_signature_fake"
+            android:title="@string/allow_signature_fake"
+            android:summary="@string/allow_signature_fake_summary"/>
+
         <ListPreference
             android:key="app_process_limit"
             android:title="@string/app_process_limit_title"
diff --git a/src/com/android/settings/development/DevelopmentSettings.java b/src/com/android/settings/development/DevelopmentSettings.java
index bd532a8913..6f09313809 100644
--- a/src/com/android/settings/development/DevelopmentSettings.java
+++ b/src/com/android/settings/development/DevelopmentSettings.java
@@ -243,6 +243,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
 
     private static final String IMMEDIATELY_DESTROY_ACTIVITIES_KEY
             = "immediately_destroy_activities";
+    private static final String ALLOW_SIGNATURE_FAKE_KEY = "allow_signature_fake";
     private static final String APP_PROCESS_LIMIT_KEY = "app_process_limit";
 
     private static final String BACKGROUND_CHECK_KEY = "background_check";
@@ -350,6 +351,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
 
     private SwitchPreference mUSBAudio;
     private SwitchPreference mImmediatelyDestroyActivities;
+    private SwitchPreference mAllowSignatureFake;
 
     private ListPreference mAppProcessLimit;
 
@@ -382,6 +384,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
     private Dialog mAdbKeysDialog;
     private boolean mUnavailable;
     private Dialog mRootDialog;
+    private Dialog mAllowSignatureFakeDialog;
 
     private boolean mLogpersistCleared;
     private Dialog mLogpersistClearDialog;
@@ -567,6 +570,10 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
         mAllPrefs.add(mImmediatelyDestroyActivities);
         mResetSwitchPrefs.add(mImmediatelyDestroyActivities);
 
+        mAllowSignatureFake = (SwitchPreference) findPreference(ALLOW_SIGNATURE_FAKE_KEY);
+        mAllPrefs.add(mAllowSignatureFake);
+        mResetSwitchPrefs.add(mAllowSignatureFake);
+
         mAppProcessLimit = addListPreference(APP_PROCESS_LIMIT_KEY);
 
         mShowAllANRs = (SwitchPreference) findPreference(
@@ -891,6 +898,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
         updateAnimationScaleOptions();
         updateOverlayDisplayDevicesOptions();
         updateImmediatelyDestroyActivitiesOptions();
+        updateAllowSignatureFakeOption();
         updateAppProcessLimitOptions();
         updateShowAllANRsOptions();
         updateShowNotificationChannelWarningsOptions();
@@ -2396,6 +2404,11 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
                 != 0);
     }
 
+    private void updateAllowSignatureFakeOption() {
+        updateSwitchPreference(mAllowSignatureFake, Settings.Secure.getInt(
+                getActivity().getContentResolver(), Settings.Secure.ALLOW_SIGNATURE_FAKE, 0) != 0);
+    }
+
     private void updateAnimationScaleValue(int which, ListPreference pref) {
         try {
             float scale = mWindowManager.getAnimationScale(which);
@@ -2716,6 +2729,24 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
             writeDisableOverlaysOption();
         } else if (preference == mImmediatelyDestroyActivities) {
             writeImmediatelyDestroyActivitiesOptions();
+        } else if (preference == mAllowSignatureFake) {
+            if (mAllowSignatureFake.isChecked()) {
+                if (mAllowSignatureFakeDialog != null) {
+                    dismissDialogs();
+                }
+                mAllowSignatureFakeDialog = new AlertDialog.Builder(getActivity()).setMessage(
+                        getResources().getString(R.string.allow_signature_fake_warning))
+                        .setTitle(R.string.allow_signature_fake)
+                        .setIconAttribute(android.R.attr.alertDialogIcon)
+                        .setPositiveButton(android.R.string.yes, this)
+                        .setNegativeButton(android.R.string.no, this)
+                        .show();
+                mAllowSignatureFakeDialog.setOnDismissListener(this);
+            } else {
+                Settings.Secure.putInt(getActivity().getContentResolver(),
+                        Settings.Secure.ALLOW_SIGNATURE_FAKE, 0);
+                updateAllowSignatureFakeOption();
+            }
         } else if (preference == mShowAllANRs) {
             writeShowAllANRsOptions();
         } else if (preference == mShowNotificationChannelWarnings) {
@@ -2870,6 +2901,10 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
             mRootDialog.dismiss();
             mRootDialog = null;
         }
+        if (mAllowSignatureFakeDialog != null) {
+            mAllowSignatureFakeDialog.dismiss();
+            mAllowSignatureFakeDialog = null;
+        }
     }
 
     public void onClick(DialogInterface dialog, int which) {
@@ -2910,6 +2945,14 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
                 // Reset the option
                 writeRootAccessOptions("0");
             }
+        } else if (dialog == mAllowSignatureFakeDialog) {
+            if (which == DialogInterface.BUTTON_POSITIVE) {
+                Settings.Secure.putInt(getActivity().getContentResolver(),
+                        Settings.Secure.ALLOW_SIGNATURE_FAKE, 1);
+            } else {
+                // Reset the toggle
+                mAllowSignatureFake.setChecked(false);
+            }
         }
     }
 
@@ -2928,6 +2971,9 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
         } else if (dialog == mRootDialog) {
             updateRootAccessOptions();
             mRootDialog = null;
+        } else if (dialog == mAllowSignatureFakeDialog) {
+            updateAllowSignatureFakeOption();
+            mAllowSignatureFakeDialog = null;
         }
     }
 
-- 
2.11.0

