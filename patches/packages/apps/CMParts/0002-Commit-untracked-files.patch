From cce6aadf9c838b8c5346d412db16304b2fad327f Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 30 Apr 2017 10:15:35 +0300
Subject: [PATCH] Commit untracked files

Change-Id: Ie7fd5701f0200331b90f5c2c12cc66e8abbffbff
---
 ...pps-CMParts_s00-Allow-Network-Traffic-new.patch | 462 +++++++++++++++++++++
 res/layout/preference_nettraffic_slider.xml        |  54 +++
 res/xml/network_traffic_settings.xml               |  48 +++
 .../cmparts/statusbar/NetworkTrafficSettings.java  |  62 +++
 .../NetworkTrafficThresholdSeekBarPreference.java  | 104 +++++
 5 files changed, 730 insertions(+)
 create mode 100644 packages-apps-CMParts_s00-Allow-Network-Traffic-new.patch
 create mode 100644 res/layout/preference_nettraffic_slider.xml
 create mode 100644 res/xml/network_traffic_settings.xml
 create mode 100644 src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java
 create mode 100644 src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java

diff --git a/packages-apps-CMParts_s00-Allow-Network-Traffic-new.patch b/packages-apps-CMParts_s00-Allow-Network-Traffic-new.patch
new file mode 100644
index 0000000..2206b2a
--- /dev/null
+++ b/packages-apps-CMParts_s00-Allow-Network-Traffic-new.patch
@@ -0,0 +1,462 @@
+Subject: [PATCH] CMParts: Network Traffic [3/3]
+
+diff --git a/res/layout/preference_nettraffic_slider.xml b/res/layout/preference_nettraffic_slider.xml
+new file mode 100644
+index 0000000..04e11ca
+--- /dev/null
++++ b/res/layout/preference_nettraffic_slider.xml
+@@ -0,0 +1,54 @@
++<?xml version="1.0" encoding="utf-8"?>
++<!-- Copyright (C) 2015 The Android Open Source Project
++
++     Licensed under the Apache License, Version 2.0 (the "License");
++     you may not use this file except in compliance with the License.
++     You may obtain a copy of the License at
++
++          http://www.apache.org/licenses/LICENSE-2.0
++
++     Unless required by applicable law or agreed to in writing, software
++     distributed under the License is distributed on an "AS IS" BASIS,
++     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++     See the License for the specific language governing permissions and
++     limitations under the License.
++-->
++
++<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
++    android:layout_width="match_parent"
++    android:layout_height="wrap_content"
++    android:minHeight="?android:attr/listPreferredItemHeight"
++    android:gravity="center_vertical"
++    android:paddingTop="16dip"
++    android:paddingBottom="16dip"
++    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
++    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
++    android:background="?android:attr/activatedBackgroundIndicator"
++    android:orientation="vertical">
++
++    <TextView android:id="@android:id/title"
++        android:layout_width="wrap_content"
++        android:layout_height="wrap_content"
++        android:singleLine="true"
++        android:textAppearance="?android:attr/textAppearanceListItem"
++        android:ellipsize="marquee"
++        android:fadingEdge="horizontal" />
++
++    <SeekBar
++       android:id="@+id/seekbar"
++       android:layout_gravity="center_vertical"
++       android:layout_width="match_parent"
++       android:layout_height="48dp"
++       style="@android:style/Widget.Material.SeekBar.Discrete"
++       android:tickMarkTint="@android:color/black" />
++
++    <TextView
++        android:id="@android:id/summary"
++        android:paddingTop="4dp"
++        android:layout_width="wrap_content"
++        android:layout_height="wrap_content"
++        android:textAppearance="?android:attr/textAppearanceListItemSecondary"
++        android:textColor="?android:attr/textColorSecondary"
++        android:maxLines="4" />
++
++</LinearLayout>
+diff --git a/res/values/arrays.xml b/res/values/arrays.xml
+index c9058be..3e66d07 100644
+--- a/res/values/arrays.xml
++++ b/res/values/arrays.xml
+@@ -109,13 +109,13 @@
+         <item>@string/profile_action_disable</item>
+         <item>@string/profile_action_enable</item>
+     </string-array>
+-    
++
+     <string-array name="profile_doze_entries" translatable="false">
+         <item>@string/profile_action_none</item>
+         <item>@string/profile_action_enable</item>
+         <item>@string/profile_action_disable</item>
+     </string-array>
+-    
++
+     <string-array name="profile_notification_light_entries" translatable="false">
+         <item>@string/profile_action_none</item>
+         <item>@string/profile_action_enable</item>
+@@ -322,4 +322,47 @@
+         <item>8</item>
+         <item>9</item>
+     </string-array>
++
++    <!-- Network Traffic -->
++    <string-array name="network_traffic_mode_entries" translatable="false">
++        <item>@string/network_traffic_mode_disable</item>
++        <item>@string/network_traffic_mode_up</item>
++        <item>@string/network_traffic_mode_down</item>
++        <item>@string/network_traffic_mode_all</item>
++    </string-array>
++
++    <string-array name="network_traffic_mode_values" translatable="false">
++        <item>0</item>
++        <item>1</item>
++        <item>2</item>
++        <item>3</item>
++    </string-array>
++
++    <string-array name="network_traffic_refresh_interval_entries" translatable="false">
++        <item>@string/network_traffic_interval_500</item>
++        <item>@string/network_traffic_interval_1000</item>
++        <item>@string/network_traffic_interval_1500</item>
++        <item>@string/network_traffic_interval_2000</item>
++    </string-array>
++
++    <string-array name="network_traffic_refresh_interval_values" translatable="false">
++        <item>500</item>
++        <item>1000</item>
++        <item>1500</item>
++        <item>2000</item>
++    </string-array>
++
++    <integer-array name="network_traffic_threshold_values">
++        <item>1</item>
++        <item>2</item>
++        <item>5</item>
++        <item>10</item>
++        <item>20</item>
++        <item>50</item>
++        <item>100</item>
++        <item>200</item>
++        <item>300</item>
++        <item>500</item>
++    </integer-array>
++
+ </resources>
+diff --git a/res/values/strings.xml b/res/values/strings.xml
+index c13655e..46a34ca 100644
+--- a/res/values/strings.xml
++++ b/res/values/strings.xml
+@@ -622,4 +622,25 @@
+     <string name="touchscreen_gesture_action_play_pause_music">Play/pause music playback</string>
+     <string name="touchscreen_gesture_action_previous_track">Navigate to the previous music track</string>
+     <string name="touchscreen_gesture_action_next_track">Skip to the next music track</string>
++
++    <!-- Status bar - Network Traffic -->
++    <string name="network_traffic_settings_title">Network traffic monitor</string>
++    <string name="network_traffic_settings_summary">Shows current amount of network traffic in the status bar</string>
++
++    <string name="network_traffic_mode_title">Display mode</string>
++    <string name="network_traffic_refresh_interval_title">Update interval</string>
++    <string name="network_traffic_mode_disable">Disabled</string>
++    <string name="network_traffic_mode_up">Outgoing</string>
++    <string name="network_traffic_mode_down">Incoming</string>
++    <string name="network_traffic_mode_all">Outgoing and incoming</string>
++    <string name="network_traffic_interval_500">500 ms</string>
++    <string name="network_traffic_interval_1000">1000 ms</string>
++    <string name="network_traffic_interval_1500">1500 ms</string>
++    <string name="network_traffic_interval_2000">2000 ms</string>
++    <string name="network_traffic_refresh_interval_summary">Network traffic will be updated every <xliff:g id="interval">%s</xliff:g></string>
++    <string name="network_traffic_autohide">Auto hide</string>
++    <string name="network_traffic_autohide_summary">Hide the traffic monitor when there is no activity</string>
++    <string name="network_traffic_autohide_threshold_title">Inactivity threshold</string>
++    <string name="network_traffic_autohide_threshold_summary">The traffic display will be hidden if there\'s less than <xliff:g id="value">%1$s</xliff:g> <xliff:g id="unit" example="kB">%2$s</xliff:g>/s of traffic</string>
++
+ </resources>
+diff --git a/res/xml/network_traffic_settings.xml b/res/xml/network_traffic_settings.xml
+new file mode 100644
+index 0000000..eb90e3d
+--- /dev/null
++++ b/res/xml/network_traffic_settings.xml
+@@ -0,0 +1,48 @@
++<?xml version="1.0" encoding="utf-8"?>
++<!--
++     Copyright (C) 2017 The LineageOS Project
++
++     Licensed under the Apache License, Version 2.0 (the "License");
++     you may not use this file except in compliance with the License.
++     You may obtain a copy of the License at
++
++          http://www.apache.org/licenses/LICENSE-2.0
++
++     Unless required by applicable law or agreed to in writing, software
++     distributed under the License is distributed on an "AS IS" BASIS,
++     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++     See the License for the specific language governing permissions and
++     limitations under the License.
++-->
++
++<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
++    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
++
++    <DropDownPreference
++        android:key="network_traffic_mode"
++        android:title="@string/network_traffic_mode_title"
++        android:entries="@array/network_traffic_mode_entries"
++        android:entryValues="@array/network_traffic_mode_values"
++        android:summary="%s"
++        android:persistent="false" />
++
++    <DropDownPreference
++        android:key="network_traffic_refresh_interval"
++        android:title="@string/network_traffic_refresh_interval_title"
++        android:entries="@array/network_traffic_refresh_interval_entries"
++        android:entryValues="@array/network_traffic_refresh_interval_values"
++        android:summary="@string/network_traffic_refresh_interval_summary"
++        android:persistent="false" />
++
++    <cyanogenmod.preference.CMSecureSettingSwitchPreference
++        android:key="network_traffic_autohide"
++        android:title="@string/network_traffic_autohide"
++        android:summary="@string/network_traffic_autohide_summary"
++        android:defaultValue="false" />
++
++    <org.cyanogenmod.cmparts.statusbar.NetworkTrafficThresholdSeekBarPreference
++        android:key="network_traffic_autohide_threshold"
++        android:title="@string/network_traffic_autohide_threshold_title"
++        android:persistent="false" />
++
++</PreferenceScreen>
+diff --git a/res/xml/status_bar_settings.xml b/res/xml/status_bar_settings.xml
+index 7213aeb..5c530ce 100644
+--- a/res/xml/status_bar_settings.xml
++++ b/res/xml/status_bar_settings.xml
+@@ -1,6 +1,7 @@
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!--
+      Copyright (C) 2014-2016 The CyanogenMod Project
++                   2017 The LineageOS Project
+ 
+      Licensed under the Apache License, Version 2.0 (the "License");
+      you may not use this file except in compliance with the License.
+@@ -26,6 +27,12 @@
+         android:entryValues="@array/status_bar_quick_qs_pulldown_values"
+         android:defaultValue="0" />
+ 
++    <PreferenceScreen
++        android:fragment="org.cyanogenmod.cmparts.statusbar.NetworkTrafficSettings"
++        android:key="network_traffic_settings"
++        android:title="@string/network_traffic_settings_title"
++        android:summary="@string/network_traffic_settings_summary" />
++
+     <cyanogenmod.preference.CMSystemSettingSwitchPreference
+         android:key="status_bar_brightness_control"
+         android:title="@string/status_bar_toggle_brightness"
+diff --git a/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java
+new file mode 100644
+index 0000000..e05ca1c
+--- /dev/null
++++ b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java
+@@ -0,0 +1,107 @@
++/*
++ * Copyright (C) 2017 The LineageOS Project
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ * http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package org.cyanogenmod.cmparts.statusbar;
++
++import android.content.ContentResolver;
++import android.os.Bundle;
++import android.support.v7.preference.DropDownPreference;
++import android.support.v7.preference.Preference;
++
++import cyanogenmod.preference.CMSecureSettingSwitchPreference;
++import cyanogenmod.providers.CMSettings;
++import org.cyanogenmod.cmparts.R;
++import org.cyanogenmod.cmparts.SettingsPreferenceFragment;
++
++
++public class NetworkTrafficSettings extends SettingsPreferenceFragment
++        implements Preference.OnPreferenceChangeListener  {
++
++    private static final String TAG = "NetworkTrafficSettings";
++
++    private DropDownPreference mNetTrafficMode;
++    private DropDownPreference mNetTrafficPeriod;
++    private CMSecureSettingSwitchPreference mNetTrafficAutohide;
++    private NetworkTrafficThresholdSeekBarPreference mNetTrafficAutohideThreshold;
++
++    @Override
++    public void onCreate(Bundle savedInstanceState) {
++        super.onCreate(savedInstanceState);
++        addPreferencesFromResource(R.xml.network_traffic_settings);
++        final ContentResolver resolver = getActivity().getContentResolver();
++
++        mNetTrafficMode = (DropDownPreference)
++                findPreference(CMSettings.Secure.NETWORK_TRAFFIC_MODE);
++        mNetTrafficMode.setOnPreferenceChangeListener(this);
++        int mode = CMSettings.Secure.getInt(resolver,
++                CMSettings.Secure.NETWORK_TRAFFIC_MODE, 0);
++        mNetTrafficMode.setValue(String.valueOf(mode));
++
++        mNetTrafficPeriod = (DropDownPreference)
++                findPreference(CMSettings.Secure.NETWORK_TRAFFIC_REFRESH_INTERVAL);
++        mNetTrafficPeriod.setOnPreferenceChangeListener(this);
++        int interval = CMSettings.Secure.getInt(resolver,
++                CMSettings.Secure.NETWORK_TRAFFIC_REFRESH_INTERVAL, 1000);
++        mNetTrafficPeriod.setValue(String.valueOf(interval));
++
++        mNetTrafficAutohide = (CMSecureSettingSwitchPreference)
++                findPreference(CMSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE);
++        mNetTrafficAutohide.setOnPreferenceChangeListener(this);
++
++        mNetTrafficAutohideThreshold = (NetworkTrafficThresholdSeekBarPreference)
++                findPreference(CMSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD);
++        int netTrafficAutohideThreshold = CMSettings.Secure.getInt(resolver,
++                CMSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD, 10);
++        mNetTrafficAutohideThreshold.setThreshold(netTrafficAutohideThreshold);
++        mNetTrafficAutohideThreshold.setOnPreferenceChangeListener(this);
++
++        updateEnabledStates(null, null);
++    }
++
++    @Override
++    public boolean onPreferenceChange(Preference preference, Object newValue) {
++        if (preference == mNetTrafficMode) {
++            int intState = Integer.valueOf((String) newValue);
++            CMSettings.Secure.putInt(getActivity().getContentResolver(),
++                    CMSettings.Secure.NETWORK_TRAFFIC_MODE, intState);
++            updateEnabledStates(intState, null);
++            return true;
++        } else if (preference == mNetTrafficPeriod) {
++            int intState = Integer.valueOf((String)newValue);
++            CMSettings.Secure.putInt(getActivity().getContentResolver(),
++                    CMSettings.Secure.NETWORK_TRAFFIC_REFRESH_INTERVAL, intState);
++            return true;
++        } else if (preference == mNetTrafficAutohide) {
++            updateEnabledStates(null, (Boolean) newValue);
++            return true;
++        } else if (preference == mNetTrafficAutohideThreshold) {
++            int threshold = (Integer) newValue;
++            CMSettings.Secure.putInt(getActivity().getContentResolver(),
++                    CMSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD, threshold);
++            return true;
++        }
++        return false;
++    }
++
++    private void updateEnabledStates(Integer mode, Boolean autoHide) {
++        boolean disabled = mode == null ? "0".equals(mNetTrafficMode.getValue()) : mode == 0;
++        boolean autoHideEnabled = autoHide == null ? mNetTrafficAutohide.isChecked() : autoHide;
++
++        mNetTrafficPeriod.setEnabled(!disabled);
++        mNetTrafficAutohide.setEnabled(!disabled);
++        mNetTrafficAutohideThreshold.setEnabled(!disabled && autoHideEnabled);
++    }
++}
+diff --git a/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
+new file mode 100644
+index 0000000..123376d
+--- /dev/null
++++ b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
+@@ -0,0 +1,104 @@
++/*
++ * Copyright (C) 2017 The LineageOS Project
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ * http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package org.cyanogenmod.cmparts.statusbar;
++
++import android.content.Context;
++import android.content.res.Resources;
++import android.support.v7.preference.PreferenceViewHolder;
++import android.text.format.Formatter;
++import android.util.AttributeSet;
++import android.widget.SeekBar;
++import android.widget.TextView;
++
++import org.cyanogenmod.cmparts.R;
++import org.cyanogenmod.cmparts.widget.SeekBarPreference;
++
++public class NetworkTrafficThresholdSeekBarPreference extends SeekBarPreference {
++    private int[] mValues;
++    private Formatter.BytesResult mFormattedValue;
++    private Resources mResources;
++    private TextView mSummaryView;
++
++    public NetworkTrafficThresholdSeekBarPreference(Context context) {
++        this(context, null);
++    }
++
++    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs) {
++        this(context, attrs, 0);
++    }
++
++    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
++            int defStyleAttr) {
++        this(context, attrs, defStyleAttr, 0);
++    }
++
++    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
++            int defStyleAttr, int defStyleRes) {
++        super(context, attrs, defStyleAttr, defStyleRes);
++        setLayoutResource(R.layout.preference_nettraffic_slider);
++        mResources = context.getResources();
++        mValues = mResources.getIntArray(R.array.network_traffic_threshold_values);
++        setMax(mValues.length - 1);
++    }
++
++    public void setThreshold(int threshold) {
++        int delta = Integer.MAX_VALUE;
++        int bestIndex = 0;
++        for (int i = 0; i < mValues.length; i++) {
++            if (Math.abs(mValues[i] - threshold) < delta) {
++                bestIndex = i;
++                delta = Math.abs(mValues[i] - threshold);
++            }
++        }
++        setProgress(bestIndex);
++        updateFormattedValue(bestIndex);
++    }
++
++    public int getThreshold() {
++        return mValues[getProgress()];
++    }
++
++    @Override
++    public void onBindViewHolder(PreferenceViewHolder view) {
++        super.onBindViewHolder(view);
++        mSummaryView = (TextView) view.findViewById(com.android.internal.R.id.summary);
++    }
++
++    @Override
++    public CharSequence getSummary() {
++        if (mFormattedValue == null) {
++            return null;
++        }
++        return getContext().getString(R.string.network_traffic_autohide_threshold_summary,
++                mFormattedValue.value, mFormattedValue.units);
++    }
++
++    @Override
++    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) {
++        super.onProgressChanged(seekBar, progress, fromTouch);
++        updateFormattedValue(progress);
++        if (mSummaryView != null) {
++            mSummaryView.setText(getSummary());
++        }
++    }
++
++    private void updateFormattedValue(int index) {
++        mFormattedValue = Formatter.formatBytes(mResources, mValues[index] * 1024,
++                Formatter.FLAG_SHORTER);
++    }
++}
++
diff --git a/res/layout/preference_nettraffic_slider.xml b/res/layout/preference_nettraffic_slider.xml
new file mode 100644
index 0000000..04e11ca
--- /dev/null
+++ b/res/layout/preference_nettraffic_slider.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingTop="16dip"
+    android:paddingBottom="16dip"
+    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
+    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
+    android:background="?android:attr/activatedBackgroundIndicator"
+    android:orientation="vertical">
+
+    <TextView android:id="@android:id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:textAppearance="?android:attr/textAppearanceListItem"
+        android:ellipsize="marquee"
+        android:fadingEdge="horizontal" />
+
+    <SeekBar
+       android:id="@+id/seekbar"
+       android:layout_gravity="center_vertical"
+       android:layout_width="match_parent"
+       android:layout_height="48dp"
+       style="@android:style/Widget.Material.SeekBar.Discrete"
+       android:tickMarkTint="@android:color/black" />
+
+    <TextView
+        android:id="@android:id/summary"
+        android:paddingTop="4dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceListItemSecondary"
+        android:textColor="?android:attr/textColorSecondary"
+        android:maxLines="4" />
+
+</LinearLayout>
diff --git a/res/xml/network_traffic_settings.xml b/res/xml/network_traffic_settings.xml
new file mode 100644
index 0000000..eb90e3d
--- /dev/null
+++ b/res/xml/network_traffic_settings.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2017 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+    <DropDownPreference
+        android:key="network_traffic_mode"
+        android:title="@string/network_traffic_mode_title"
+        android:entries="@array/network_traffic_mode_entries"
+        android:entryValues="@array/network_traffic_mode_values"
+        android:summary="%s"
+        android:persistent="false" />
+
+    <DropDownPreference
+        android:key="network_traffic_refresh_interval"
+        android:title="@string/network_traffic_refresh_interval_title"
+        android:entries="@array/network_traffic_refresh_interval_entries"
+        android:entryValues="@array/network_traffic_refresh_interval_values"
+        android:summary="@string/network_traffic_refresh_interval_summary"
+        android:persistent="false" />
+
+    <cyanogenmod.preference.CMSecureSettingSwitchPreference
+        android:key="network_traffic_autohide"
+        android:title="@string/network_traffic_autohide"
+        android:summary="@string/network_traffic_autohide_summary"
+        android:defaultValue="false" />
+
+    <org.cyanogenmod.cmparts.statusbar.NetworkTrafficThresholdSeekBarPreference
+        android:key="network_traffic_autohide_threshold"
+        android:title="@string/network_traffic_autohide_threshold_title"
+        android:persistent="false" />
+
+</PreferenceScreen>
diff --git a/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java
new file mode 100644
index 0000000..60860e6
--- /dev/null
+++ b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficSettings.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2017 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.cyanogenmod.cmparts.statusbar;
+
+import android.content.ContentResolver;
+import android.os.Bundle;
+import android.support.v7.preference.DropDownPreference;
+import android.support.v7.preference.Preference;
+
+import cyanogenmod.preference.CMSecureSettingSwitchPreference;
+import cyanogenmod.providers.CMSettings;
+import org.cyanogenmod.cmparts.R;
+import org.cyanogenmod.cmparts.SettingsPreferenceFragment;
+
+
+public class NetworkTrafficSettings extends SettingsPreferenceFragment
+        implements Preference.OnPreferenceChangeListener  {
+
+    private static final String TAG = "NetworkTrafficSettings";
+
+    private DropDownPreference mNetTrafficMode;
+    private DropDownPreference mNetTrafficPeriod;
+    private CMSecureSettingSwitchPreference mNetTrafficAutohide;
+    private NetworkTrafficThresholdSeekBarPreference mNetTrafficAutohideThreshold;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.network_traffic_settings);
+        final ContentResolver resolver = getActivity().getContentResolver();
+
+        updateEnabledStates(null, null);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        return false;
+    }
+
+    private void updateEnabledStates(Integer mode, Boolean autoHide) {
+        boolean disabled = mode == null ? "0".equals(mNetTrafficMode.getValue()) : mode == 0;
+        boolean autoHideEnabled = autoHide == null ? mNetTrafficAutohide.isChecked() : autoHide;
+
+        mNetTrafficPeriod.setEnabled(!disabled);
+        mNetTrafficAutohide.setEnabled(!disabled);
+        mNetTrafficAutohideThreshold.setEnabled(!disabled && autoHideEnabled);
+    }
+}
diff --git a/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
new file mode 100644
index 0000000..123376d
--- /dev/null
+++ b/src/org/cyanogenmod/cmparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2017 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.cyanogenmod.cmparts.statusbar;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.support.v7.preference.PreferenceViewHolder;
+import android.text.format.Formatter;
+import android.util.AttributeSet;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import org.cyanogenmod.cmparts.R;
+import org.cyanogenmod.cmparts.widget.SeekBarPreference;
+
+public class NetworkTrafficThresholdSeekBarPreference extends SeekBarPreference {
+    private int[] mValues;
+    private Formatter.BytesResult mFormattedValue;
+    private Resources mResources;
+    private TextView mSummaryView;
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context) {
+        this(context, null);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
+            int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
+            int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        setLayoutResource(R.layout.preference_nettraffic_slider);
+        mResources = context.getResources();
+        mValues = mResources.getIntArray(R.array.network_traffic_threshold_values);
+        setMax(mValues.length - 1);
+    }
+
+    public void setThreshold(int threshold) {
+        int delta = Integer.MAX_VALUE;
+        int bestIndex = 0;
+        for (int i = 0; i < mValues.length; i++) {
+            if (Math.abs(mValues[i] - threshold) < delta) {
+                bestIndex = i;
+                delta = Math.abs(mValues[i] - threshold);
+            }
+        }
+        setProgress(bestIndex);
+        updateFormattedValue(bestIndex);
+    }
+
+    public int getThreshold() {
+        return mValues[getProgress()];
+    }
+
+    @Override
+    public void onBindViewHolder(PreferenceViewHolder view) {
+        super.onBindViewHolder(view);
+        mSummaryView = (TextView) view.findViewById(com.android.internal.R.id.summary);
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        if (mFormattedValue == null) {
+            return null;
+        }
+        return getContext().getString(R.string.network_traffic_autohide_threshold_summary,
+                mFormattedValue.value, mFormattedValue.units);
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) {
+        super.onProgressChanged(seekBar, progress, fromTouch);
+        updateFormattedValue(progress);
+        if (mSummaryView != null) {
+            mSummaryView.setText(getSummary());
+        }
+    }
+
+    private void updateFormattedValue(int index) {
+        mFormattedValue = Formatter.formatBytes(mResources, mValues[index] * 1024,
+                Formatter.FLAG_SHORTER);
+    }
+}
+
-- 
2.5.0

