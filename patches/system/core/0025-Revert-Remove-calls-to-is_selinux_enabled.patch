From 7df92f6a65b14f8adf046ec57fe912e66e0c053a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:43:08 +0700
Subject: [PATCH 25/28] Revert "Remove calls to is_selinux_enabled()"

This reverts commit 4d87095ebfefdb9e641492462f0a0e21d5b96ecf.

Change-Id: I9a08aeda8b4a55a1a83437727b6a371cfaa963aa
---
 adb/daemon/main.cpp       |  7 ++---
 debuggerd/debuggerd.cpp   |  8 ++++--
 init/devices.cpp          | 15 ++++++----
 init/property_service.cpp |  3 ++
 init/service.cpp          | 70 ++++++++++++++++++++++++-----------------------
 5 files changed, 58 insertions(+), 45 deletions(-)

diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index 4721e2f..8d00527 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -142,10 +142,9 @@ static void drop_privileges(int server_port) {
     } else {
         // minijail_enter() will abort if any priv-dropping step fails.
         minijail_enter(jail.get());
-
-        if (root_seclabel != nullptr) {
-            if (selinux_android_setcon(root_seclabel) < 0) {
-                LOG(FATAL) << "Could not set SELinux context";
+        if ((root_seclabel != nullptr) && (is_selinux_enabled() > 0)) {
+            if (setcon(root_seclabel) < 0) {
+                LOG(FATAL) << "Could not set selinux context";
             }
         }
         std::string error;
diff --git a/debuggerd/debuggerd.cpp b/debuggerd/debuggerd.cpp
index 6189a76..d007822 100644
--- a/debuggerd/debuggerd.cpp
+++ b/debuggerd/debuggerd.cpp
@@ -128,6 +128,8 @@ static int get_process_info(pid_t tid, pid_t* out_pid, uid_t* out_uid, uid_t* ou
   return fields == 7 ? 0 : -1;
 }
 
+static int selinux_enabled;
+
 /*
  * Corresponds with debugger_action_t enum type in
  * include/cutils/debugger.h.
@@ -158,6 +160,9 @@ static bool selinux_action_allowed(int s, debugger_request_t* request)
   const char *perm;
   bool allowed = false;
 
+  if (selinux_enabled <= 0)
+    return true;
+
   if (request->action <= 0 || request->action >= (sizeof(debuggerd_perms)/sizeof(debuggerd_perms[0]))) {
     ALOGE("SELinux:  No permission defined for debugger action %d", request->action);
     return false;
@@ -922,10 +927,9 @@ static void usage() {
 int main(int argc, char** argv) {
   union selinux_callback cb;
   if (argc == 1) {
+    selinux_enabled = is_selinux_enabled();
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
-    cb.func_log = selinux_log_callback;
-    selinux_set_callback(SELINUX_CB_LOG, cb);
     return do_server();
   }
 
diff --git a/init/devices.cpp b/init/devices.cpp
index 98cbae7..10019b4 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -245,8 +245,10 @@ static void make_device(const char *path,
 
     mode = get_device_perm(path, links, &uid, &gid) | (block ? S_IFBLK : S_IFCHR);
 
-    selabel_lookup_best_match(sehandle, &secontext, path, links, mode);
-    setfscreatecon(secontext);
+    if (sehandle) {
+        selabel_lookup_best_match(sehandle, &secontext, path, links, mode);
+        setfscreatecon(secontext);
+    }
 
     dev = makedev(major, minor);
     /* Temporarily change egid to avoid race condition setting the gid of the
@@ -1019,7 +1021,7 @@ void handle_device_fd()
         struct uevent uevent;
         parse_event(msg, &uevent);
 
-        if (selinux_status_updated() > 0) {
+        if (sehandle && selinux_status_updated() > 0) {
             struct selabel_handle *sehandle2;
             sehandle2 = selinux_android_file_context_handle();
             if (sehandle2) {
@@ -1086,8 +1088,11 @@ static void coldboot(const char *path)
 }
 
 void device_init() {
-    sehandle = selinux_android_file_context_handle();
-    selinux_status_open(true);
+    sehandle = NULL;
+    if (is_selinux_enabled() > 0) {
+        sehandle = selinux_android_file_context_handle();
+        selinux_status_open(true);
+    }
 
     /* is 256K enough? udev uses 16MB! */
     device_fd = uevent_open_socket(256*1024, true);
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 8644329..89260f6 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -73,6 +73,9 @@ void property_init() {
 
 static int check_mac_perms(const char *name, char *sctx, struct ucred *cr)
 {
+    if (is_selinux_enabled() <= 0)
+        return 1;
+
     char *tctx = NULL;
     int result = 0;
     property_audit_data audit_data;
diff --git a/init/service.cpp b/init/service.cpp
index 0cb5b6f..18ac14b 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -357,40 +357,42 @@ bool Service::Start() {
         return false;
     }
 
-    std::string scon;
-    if (!seclabel_.empty()) {
-        scon = seclabel_;
-    } else {
-        char* mycon = nullptr;
-        char* fcon = nullptr;
-
-        INFO("computing context for service '%s'\n", args_[0].c_str());
-        int rc = getcon(&mycon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
-        }
-
-        rc = getfilecon(args_[0].c_str(), &fcon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            free(mycon);
-            return false;
-        }
-
-        char* ret_scon = nullptr;
-        rc = security_compute_create(mycon, fcon, string_to_security_class("process"),
+    if (is_selinux_enabled() > 0) {
+	    std::string scon;
+	    if (!seclabel_.empty()) {
+	        scon = seclabel_;
+	    } else {
+	        char* mycon = nullptr;
+	        char* fcon = nullptr;
+
+	        INFO("computing context for service '%s'\n", args_[0].c_str());
+	        int rc = getcon(&mycon);
+	        if (rc < 0) {
+	            ERROR("could not get context while starting '%s'\n", name_.c_str());
+	            return false;
+	        }
+
+	        rc = getfilecon(args_[0].c_str(), &fcon);
+	        if (rc < 0) {
+	            ERROR("could not get context while starting '%s'\n", name_.c_str());
+	            free(mycon);
+	            return false;
+	        }
+
+ 	       char* ret_scon = nullptr;
+        	rc = security_compute_create(mycon, fcon, string_to_security_class("process"),
                                      &ret_scon);
-        if (rc == 0) {
-            scon = ret_scon;
-            free(ret_scon);
-        }
-        free(mycon);
-        free(fcon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
-        }
+        	if (rc == 0) {
+        	    scon = ret_scon;
+        	    free(ret_scon);
+        	}
+        	free(mycon);
+        	free(fcon);
+        	if (rc < 0) {
+        	    ERROR("could not get context while starting '%s'\n", name_.c_str());
+        	    return false;
+        	}
+    	}
     }
 
     NOTICE("Starting service '%s'...\n", name_.c_str());
@@ -461,7 +463,7 @@ bool Service::Start() {
             }
         }
         if (!seclabel_.empty()) {
-            if (setexeccon(seclabel_.c_str()) < 0) {
+            if (is_selinux_enabled() > 0 && setexeccon(seclabel_.c_str()) < 0) {
                 ERROR("cannot setexeccon('%s'): %s\n",
                       seclabel_.c_str(), strerror(errno));
                 _exit(127);
-- 
2.9.3

