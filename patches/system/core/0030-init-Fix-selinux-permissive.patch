From bf7ef64a7cabd3f0f40b8558cc3d88af6639918c Mon Sep 17 00:00:00 2001
From: Christian Oder <myself5@carbonrom.org>
Date: Wed, 23 Aug 2017 00:35:13 +0200
Subject: [PATCH 30/40] init: Fix selinux permissive

---
 init/property_service.cpp |  6 ++++--
 init/service.cpp          | 13 ++++++-------
 init/util.cpp             |  5 +----
 3 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 49ba47edd..a63028e3c 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -72,12 +72,13 @@ static int property_set_fd = -1;
 void property_init() {
     if (__system_property_area_init()) {
         LOG(ERROR) << "Failed to initialize property area";
-        exit(1);
+        //exit(1);
     }
 }
 
 static bool check_mac_perms(const std::string& name, char* sctx, struct ucred* cr) {
 
+    bool has_access = true;
     if (!sctx) {
       return false;
     }
@@ -96,7 +97,8 @@ static bool check_mac_perms(const std::string& name, char* sctx, struct ucred* c
     audit_data.name = name.c_str();
     audit_data.cr = cr;
 
-    bool has_access = (selinux_check_access(sctx, tctx, "property_service", "set", &audit_data) == 0);
+    if (selinux_check_access(sctx, tctx, "property_service", "set", &audit_data) == 0)
+        has_access = true;
 
     freecon(tctx);
     return has_access;
diff --git a/init/service.cpp b/init/service.cpp
index be7d2b141..1cfb9b662 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -271,11 +271,9 @@ void Service::SetProcessAttributes() {
             PLOG(FATAL) << "setuid failed for " << name_;
         }
     }
-    if (!seclabel_.empty()) {
-        if (setexeccon(seclabel_.c_str()) < 0) {
-            PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
-        }
-    }
+
+    setexeccon(seclabel_.c_str());
+
     if (priority_ != 0) {
         if (setpriority(PRIO_PROCESS, 0, priority_) != 0) {
             PLOG(FATAL) << "setpriority failed for " << name_;
@@ -717,7 +715,8 @@ bool Service::Start() {
         return false;
     }
 
-    std::string scon;
+    std::string scon = seclabel_;
+/*
     if (!seclabel_.empty()) {
         scon = seclabel_;
     } else {
@@ -726,7 +725,7 @@ bool Service::Start() {
             return false;
         }
     }
-
+*/
     LOG(INFO) << "starting service '" << name_ << "'...";
 
     pid_t pid = -1;
diff --git a/init/util.cpp b/init/util.cpp
index c1e9a87fe..9814e5ffa 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -91,10 +91,7 @@ bool DecodeUid(const std::string& name, uid_t* uid, std::string* err) {
 int CreateSocket(const char* name, int type, bool passcred, mode_t perm, uid_t uid, gid_t gid,
                  const char* socketcon, selabel_handle* sehandle) {
     if (socketcon) {
-        if (setsockcreatecon(socketcon) == -1) {
-            PLOG(ERROR) << "setsockcreatecon(\"" << socketcon << "\") failed";
-            return -1;
-        }
+        setsockcreatecon(socketcon);
     }
 
     android::base::unique_fd fd(socket(PF_UNIX, type, 0));
-- 
2.11.0

