diff --git a/ext4_utils/Android.mk b/ext4_utils/Android.mk
index 5418501..33bb7f6 100644
--- a/ext4_utils/Android.mk
+++ b/ext4_utils/Android.mk
@@ -102,7 +102,6 @@ LOCAL_STATIC_LIBRARIES := \
     libbase \
     liblogwrap \
     libsparse_static \
-    libselinux \
     libbase
 
 ifeq ($(BOARD_SUPPRESS_EMMC_WIPE),true)
@@ -123,7 +122,6 @@ LOCAL_SHARED_LIBRARIES := \
     libcutils \
     libext2_uuid \
     libext4_utils \
-    libselinux \
     libz
 LOCAL_CFLAGS := -DREAL_UUID
 include $(BUILD_EXECUTABLE)
diff --git a/ext4_utils/make_ext4fs.c b/ext4_utils/make_ext4fs.c
index f45a699..00989dc 100644
--- a/ext4_utils/make_ext4fs.c
+++ b/ext4_utils/make_ext4fs.c
@@ -72,8 +72,6 @@
 
 #else
 
-#include <selinux/selinux.h>
-#include <selinux/label.h>
 
 #define O_BINARY 0
 
@@ -116,22 +114,6 @@ static u32 build_default_directory_structure(const char *dir_path,
 	inode_set_permissions(inode, dentries.mode,
 		dentries.uid, dentries.gid, dentries.mtime);
 
-#ifndef USE_MINGW
-	if (sehnd) {
-		char *path = NULL;
-		char *secontext = NULL;
-
-		asprintf(&path, "%slost+found", dir_path);
-		if (selabel_lookup(sehnd, &secontext, path, S_IFDIR) < 0) {
-			error("cannot lookup security context for %s", path);
-		} else {
-			inode_set_selinux(inode, secontext);
-			freecon(secontext);
-		}
-		free(path);
-	}
-#endif
-
 	return root_inode;
 }
 
@@ -230,16 +212,6 @@ static u32 build_directory_structure(const char *full_path, const char *dir_path
 			error("can't set android permissions - built without android support");
 #endif
 		}
-#ifndef USE_MINGW
-		if (sehnd) {
-			if (selabel_lookup(sehnd, &dentries[i].secon, dentries[i].path, stat.st_mode) < 0) {
-				error("cannot lookup security context for %s", dentries[i].path);
-			}
-
-			if (dentries[i].secon && verbose)
-				printf("Labeling %s as %s\n", dentries[i].path, dentries[i].secon);
-		}
-#endif
 
 		if (S_ISREG(stat.st_mode)) {
 			dentries[i].file_type = EXT4_FT_REG_FILE;
@@ -281,10 +253,6 @@ static u32 build_directory_structure(const char *full_path, const char *dir_path
 		dentries[0].file_type = EXT4_FT_DIR;
 		dentries[0].uid = 0;
 		dentries[0].gid = 0;
-		if (sehnd) {
-			if (selabel_lookup(sehnd, &dentries[0].secon, dentries[0].path, dentries[0].mode) < 0)
-				error("cannot lookup security context for %s", dentries[0].path);
-		}
 		entries++;
 		dirs++;
 	}
@@ -815,23 +783,6 @@ int make_ext4fs_internal(int fd, const char *_directory, const char *_target_out
 	root_mode = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
 	inode_set_permissions(root_inode_num, root_mode, 0, 0, 0);
 
-#ifndef USE_MINGW
-	if (sehnd) {
-		char *secontext = NULL;
-
-		if (selabel_lookup(sehnd, &secontext, mountpoint, S_IFDIR) < 0) {
-			error("cannot lookup security context for %s", mountpoint);
-		}
-		if (secontext) {
-			if (verbose) {
-				printf("Labeling %s as %s\n", mountpoint, secontext);
-			}
-			inode_set_selinux(root_inode_num, secontext);
-		}
-		freecon(secontext);
-	}
-#endif
-
 	ext4_update_free();
 
 	// TODO: Consider migrating the OTA tools to the new base alloc file format
diff --git a/ext4_utils/make_ext4fs_main.c b/ext4_utils/make_ext4fs_main.c
index 323a445..e3b0d9a 100644
--- a/ext4_utils/make_ext4fs_main.c
+++ b/ext4_utils/make_ext4fs_main.c
@@ -31,11 +31,6 @@
 #endif
 
 #ifndef USE_MINGW
-#include <selinux/selinux.h>
-#include <selinux/label.h>
-#if !defined(HOST)
-#include <selinux/android.h>
-#endif
 #else
 struct selabel_handle;
 #endif
@@ -83,9 +78,6 @@ int main(int argc, char **argv)
 	FILE* block_list_file = NULL;
 	FILE* base_alloc_file_in = NULL;
 	FILE* base_alloc_file_out = NULL;
-#ifndef USE_MINGW
-	struct selinux_opt seopts[] = { { SELABEL_OPT_PATH, "" } };
-#endif
 
 	while ((opt = getopt(argc, argv, "l:j:b:g:i:I:L:a:S:T:C:B:d:D:fwzJsctvu")) != -1) {
 		switch (opt) {
@@ -144,14 +136,6 @@ int main(int argc, char **argv)
 			fprintf(stderr, "Warning: -t (initialize inode tables) is deprecated\n");
 			break;
 		case 'S':
-#ifndef USE_MINGW
-			seopts[0].value = optarg;
-			sehnd = selabel_open(SELABEL_CTX_FILE, seopts, 1);
-			if (!sehnd) {
-				perror(optarg);
-				exit(EXIT_FAILURE);
-			}
-#endif
 			break;
 		case 'v':
 			verbose = 1;
@@ -189,17 +173,6 @@ int main(int argc, char **argv)
 		}
 	}
 
-#if !defined(HOST)
-	// Use only if -S option not requested
-	if (!sehnd && mountpoint) {
-		sehnd = selinux_android_file_context_handle();
-
-		if (!sehnd) {
-			perror(optarg);
-			exit(EXIT_FAILURE);
-		}
-	}
-#endif
 
 	if (fs_config_file) {
 		if (load_canned_fs_config(fs_config_file) < 0) {
