diff --git a/linker/linker.cpp b/linker/linker.cpp
index d1f3469..04802c9 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -3391,24 +3391,6 @@ bool soinfo::link_image(const soinfo_list_t& global_group, const soinfo_list_t&
 
 #if !defined(__LP64__)
   if (has_text_relocations) {
-    // Fail if app is targeting M or above.
-#if defined(TARGET_NEEDS_PLATFORM_TEXT_RELOCATIONS)
-    if (get_application_target_sdk_version() != __ANDROID_API__
-        && get_application_target_sdk_version() >= __ANDROID_API_M__) {
-#else
-    if (get_application_target_sdk_version() >= __ANDROID_API_M__) {
-#endif
-      DL_ERR_AND_LOG("\"%s\" has text relocations (https://android.googlesource.com/platform/"
-                     "bionic/+/master/android-changes-for-ndk-developers.md#Text-Relocations-"
-                     "Enforced-for-API-level-23)", get_realpath());
-      return false;
-    }
-    // Make segments writable to allow text relocations to work properly. We will later call
-    // phdr_table_protect_segments() after all of them are applied.
-    DL_WARN("\"%s\" has text relocations (https://android.googlesource.com/platform/"
-            "bionic/+/master/android-changes-for-ndk-developers.md#Text-Relocations-Enforced-"
-            "for-API-level-23)", get_realpath());
-    add_dlwarning(get_realpath(), "text relocations");
     if (phdr_table_unprotect_segments(phdr, phnum, load_bias) < 0) {
       DL_ERR("can't unprotect loadable segments for \"%s\": %s",
              get_realpath(), strerror(errno));
